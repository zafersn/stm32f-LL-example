
LL_EX_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004b8c  08004b8c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b8c  08004b8c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  20000078  08004c0c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  08004c0c  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0dc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002967  00000000  00000000  0002d17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00030820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0fc  00000000  00000000  00031408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2cb  00000000  00000000  0004d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f574  00000000  00000000  0005a7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003164  00000000  00000000  000f9d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003dd8 	.word	0x08003dd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08003dd8 	.word	0x08003dd8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_d2iz>:
 8000234:	000a      	movs	r2, r1
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	4c13      	ldr	r4, [pc, #76]	; (8000288 <__aeabi_d2iz+0x54>)
 800023a:	0053      	lsls	r3, r2, #1
 800023c:	0309      	lsls	r1, r1, #12
 800023e:	0005      	movs	r5, r0
 8000240:	0b09      	lsrs	r1, r1, #12
 8000242:	2000      	movs	r0, #0
 8000244:	0d5b      	lsrs	r3, r3, #21
 8000246:	0fd2      	lsrs	r2, r2, #31
 8000248:	42a3      	cmp	r3, r4
 800024a:	dd04      	ble.n	8000256 <__aeabi_d2iz+0x22>
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <__aeabi_d2iz+0x58>)
 800024e:	4283      	cmp	r3, r0
 8000250:	dd02      	ble.n	8000258 <__aeabi_d2iz+0x24>
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <__aeabi_d2iz+0x5c>)
 8000254:	18d0      	adds	r0, r2, r3
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	2080      	movs	r0, #128	; 0x80
 800025a:	0340      	lsls	r0, r0, #13
 800025c:	4301      	orrs	r1, r0
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <__aeabi_d2iz+0x60>)
 8000260:	1ac0      	subs	r0, r0, r3
 8000262:	281f      	cmp	r0, #31
 8000264:	dd08      	ble.n	8000278 <__aeabi_d2iz+0x44>
 8000266:	480c      	ldr	r0, [pc, #48]	; (8000298 <__aeabi_d2iz+0x64>)
 8000268:	1ac3      	subs	r3, r0, r3
 800026a:	40d9      	lsrs	r1, r3
 800026c:	000b      	movs	r3, r1
 800026e:	4258      	negs	r0, r3
 8000270:	2a00      	cmp	r2, #0
 8000272:	d1f0      	bne.n	8000256 <__aeabi_d2iz+0x22>
 8000274:	0018      	movs	r0, r3
 8000276:	e7ee      	b.n	8000256 <__aeabi_d2iz+0x22>
 8000278:	4c08      	ldr	r4, [pc, #32]	; (800029c <__aeabi_d2iz+0x68>)
 800027a:	40c5      	lsrs	r5, r0
 800027c:	46a4      	mov	ip, r4
 800027e:	4463      	add	r3, ip
 8000280:	4099      	lsls	r1, r3
 8000282:	000b      	movs	r3, r1
 8000284:	432b      	orrs	r3, r5
 8000286:	e7f2      	b.n	800026e <__aeabi_d2iz+0x3a>
 8000288:	000003fe 	.word	0x000003fe
 800028c:	0000041d 	.word	0x0000041d
 8000290:	7fffffff 	.word	0x7fffffff
 8000294:	00000433 	.word	0x00000433
 8000298:	00000413 	.word	0x00000413
 800029c:	fffffbed 	.word	0xfffffbed

080002a0 <__aeabi_ui2d>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	1e04      	subs	r4, r0, #0
 80002a4:	d010      	beq.n	80002c8 <__aeabi_ui2d+0x28>
 80002a6:	f000 f821 	bl	80002ec <__clzsi2>
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <__aeabi_ui2d+0x48>)
 80002ac:	1a1b      	subs	r3, r3, r0
 80002ae:	280a      	cmp	r0, #10
 80002b0:	dc11      	bgt.n	80002d6 <__aeabi_ui2d+0x36>
 80002b2:	220b      	movs	r2, #11
 80002b4:	0021      	movs	r1, r4
 80002b6:	1a12      	subs	r2, r2, r0
 80002b8:	40d1      	lsrs	r1, r2
 80002ba:	3015      	adds	r0, #21
 80002bc:	030a      	lsls	r2, r1, #12
 80002be:	055b      	lsls	r3, r3, #21
 80002c0:	4084      	lsls	r4, r0
 80002c2:	0b12      	lsrs	r2, r2, #12
 80002c4:	0d5b      	lsrs	r3, r3, #21
 80002c6:	e001      	b.n	80002cc <__aeabi_ui2d+0x2c>
 80002c8:	2300      	movs	r3, #0
 80002ca:	2200      	movs	r2, #0
 80002cc:	051b      	lsls	r3, r3, #20
 80002ce:	4313      	orrs	r3, r2
 80002d0:	0020      	movs	r0, r4
 80002d2:	0019      	movs	r1, r3
 80002d4:	bd10      	pop	{r4, pc}
 80002d6:	0022      	movs	r2, r4
 80002d8:	380b      	subs	r0, #11
 80002da:	4082      	lsls	r2, r0
 80002dc:	055b      	lsls	r3, r3, #21
 80002de:	0312      	lsls	r2, r2, #12
 80002e0:	2400      	movs	r4, #0
 80002e2:	0b12      	lsrs	r2, r2, #12
 80002e4:	0d5b      	lsrs	r3, r3, #21
 80002e6:	e7f1      	b.n	80002cc <__aeabi_ui2d+0x2c>
 80002e8:	0000041e 	.word	0x0000041e

080002ec <__clzsi2>:
 80002ec:	211c      	movs	r1, #28
 80002ee:	2301      	movs	r3, #1
 80002f0:	041b      	lsls	r3, r3, #16
 80002f2:	4298      	cmp	r0, r3
 80002f4:	d301      	bcc.n	80002fa <__clzsi2+0xe>
 80002f6:	0c00      	lsrs	r0, r0, #16
 80002f8:	3910      	subs	r1, #16
 80002fa:	0a1b      	lsrs	r3, r3, #8
 80002fc:	4298      	cmp	r0, r3
 80002fe:	d301      	bcc.n	8000304 <__clzsi2+0x18>
 8000300:	0a00      	lsrs	r0, r0, #8
 8000302:	3908      	subs	r1, #8
 8000304:	091b      	lsrs	r3, r3, #4
 8000306:	4298      	cmp	r0, r3
 8000308:	d301      	bcc.n	800030e <__clzsi2+0x22>
 800030a:	0900      	lsrs	r0, r0, #4
 800030c:	3904      	subs	r1, #4
 800030e:	a202      	add	r2, pc, #8	; (adr r2, 8000318 <__clzsi2+0x2c>)
 8000310:	5c10      	ldrb	r0, [r2, r0]
 8000312:	1840      	adds	r0, r0, r1
 8000314:	4770      	bx	lr
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	02020304 	.word	0x02020304
 800031c:	01010101 	.word	0x01010101
	...

08000328 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2201      	movs	r2, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}

08000344 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	2201      	movs	r2, #1
 8000352:	4013      	ands	r3, r2
 8000354:	2b01      	cmp	r3, #1
 8000356:	d101      	bne.n	800035c <LL_I2C_IsActiveFlag_TXE+0x18>
 8000358:	2301      	movs	r3, #1
 800035a:	e000      	b.n	800035e <LL_I2C_IsActiveFlag_TXE+0x1a>
 800035c:	2300      	movs	r3, #0
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}

08000366 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	2240      	movs	r2, #64	; 0x40
 8000374:	4013      	ands	r3, r2
 8000376:	2b40      	cmp	r3, #64	; 0x40
 8000378:	d101      	bne.n	800037e <LL_I2C_IsActiveFlag_TC+0x18>
 800037a:	2301      	movs	r3, #1
 800037c:	e000      	b.n	8000380 <LL_I2C_IsActiveFlag_TC+0x1a>
 800037e:	2300      	movs	r3, #0
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}

08000388 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	699a      	ldr	r2, [r3, #24]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	401a      	ands	r2, r3
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <LL_I2C_IsActiveFlag_BUSY+0x1e>
 80003a2:	2301      	movs	r3, #1
 80003a4:	e000      	b.n	80003a8 <LL_I2C_IsActiveFlag_BUSY+0x20>
 80003a6:	2300      	movs	r3, #0
}
 80003a8:	0018      	movs	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LL_I2C_SetTransferSize>:
  * @param  I2Cx I2C Instance.
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <LL_I2C_SetTransferSize+0x24>)
 80003c0:	401a      	ands	r2, r3
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	041b      	lsls	r3, r3, #16
 80003c6:	431a      	orrs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	605a      	str	r2, [r3, #4]
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b002      	add	sp, #8
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	ff00ffff 	.word	0xff00ffff

080003d8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <LL_I2C_AcknowledgeNextData+0x24>)
 80003e8:	401a      	ands	r2, r3
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	605a      	str	r2, [r3, #4]
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	ffff7fff 	.word	0xffff7fff

08000400 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	01d2      	lsls	r2, r2, #7
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <LL_I2C_SetTransferRequest>:
  *         @arg @ref LL_I2C_REQUEST_WRITE
  *         @arg @ref LL_I2C_REQUEST_READ
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <LL_I2C_SetTransferRequest+0x24>)
 8000430:	401a      	ands	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	431a      	orrs	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	605a      	str	r2, [r3, #4]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	fffffbff 	.word	0xfffffbff

08000448 <LL_I2C_SetSlaveAddr>:
  * @param  I2Cx I2C Instance.
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	0a9b      	lsrs	r3, r3, #10
 8000458:	029a      	lsls	r2, r3, #10
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	431a      	orrs	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	605a      	str	r2, [r3, #4]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	0d51      	lsrs	r1, r2, #21
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	00d2      	lsls	r2, r2, #3
 8000486:	400a      	ands	r2, r1
 8000488:	490a      	ldr	r1, [pc, #40]	; (80004b4 <LL_I2C_HandleTransfer+0x48>)
 800048a:	430a      	orrs	r2, r1
 800048c:	43d2      	mvns	r2, r2
 800048e:	401a      	ands	r2, r3
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4319      	orrs	r1, r3
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	4319      	orrs	r1, r3
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	4319      	orrs	r1, r3
 80004a0:	69fb      	ldr	r3, [r7, #28]
 80004a2:	430b      	orrs	r3, r1
 80004a4:	431a      	orrs	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b004      	add	sp, #16
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	03ff7bff 	.word	0x03ff7bff

080004b8 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	000a      	movs	r2, r1
 80004c2:	1cfb      	adds	r3, r7, #3
 80004c4:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80004c6:	1cfb      	adds	r3, r7, #3
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004e2:	6959      	ldr	r1, [r3, #20]
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	025b      	lsls	r3, r3, #9
 8000510:	4013      	ands	r3, r2
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000514:	4694      	mov	ip, r2
 8000516:	4463      	add	r3, ip
 8000518:	425a      	negs	r2, r3
 800051a:	4153      	adcs	r3, r2
 800051c:	b2db      	uxtb	r3, r3
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	e000e010 	.word	0xe000e010
 8000528:	ffff0000 	.word	0xffff0000

0800052c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <LL_SYSTICK_EnableIT+0x18>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <LL_SYSTICK_EnableIT+0x18>)
 8000536:	2102      	movs	r1, #2
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	e000e010 	.word	0xe000e010

08000548 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	431a      	orrs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}

0800057c <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000588:	0018      	movs	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	b002      	add	sp, #8
 800058e:	bd80      	pop	{r7, pc}

08000590 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2202      	movs	r2, #2
 800059c:	4252      	negs	r2, r2
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	2201      	movs	r2, #1
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	615a      	str	r2, [r3, #20]
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	435b      	muls	r3, r3
 80005d8:	001a      	movs	r2, r3
 80005da:	0013      	movs	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	189b      	adds	r3, r3, r2
 80005e0:	43db      	mvns	r3, r3
 80005e2:	400b      	ands	r3, r1
 80005e4:	001a      	movs	r2, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	435b      	muls	r3, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	434b      	muls	r3, r1
 80005ee:	431a      	orrs	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b004      	add	sp, #16
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	43d2      	mvns	r2, r2
 8000610:	401a      	ands	r2, r3
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	434b      	muls	r3, r1
 8000618:	431a      	orrs	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	605a      	str	r2, [r3, #4]
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}

08000626 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6899      	ldr	r1, [r3, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	435b      	muls	r3, r3
 800063a:	001a      	movs	r2, r3
 800063c:	0013      	movs	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	189b      	adds	r3, r3, r2
 8000642:	43db      	mvns	r3, r3
 8000644:	400b      	ands	r3, r1
 8000646:	001a      	movs	r2, r3
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	435b      	muls	r3, r3
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	434b      	muls	r3, r1
 8000650:	431a      	orrs	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	609a      	str	r2, [r3, #8]
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}

0800065e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	68d9      	ldr	r1, [r3, #12]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	435b      	muls	r3, r3
 8000672:	001a      	movs	r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	189b      	adds	r3, r3, r2
 800067a:	43db      	mvns	r3, r3
 800067c:	400b      	ands	r3, r1
 800067e:	001a      	movs	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	435b      	muls	r3, r3
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	434b      	muls	r3, r1
 8000688:	431a      	orrs	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	60da      	str	r2, [r3, #12]
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b004      	add	sp, #16
 8000694:	bd80      	pop	{r7, pc}

08000696 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	4013      	ands	r3, r2
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	425a      	negs	r2, r3
 80006ae:	4153      	adcs	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}

080006ba <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	619a      	str	r2, [r3, #24]
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <I2C_Handle>:
void LED_On(void);
void LED_Off(void);
void LED_Blinking(uint32_t Period);

static inline uint8_t I2C_Handle(uint8_t memAddr, uint8_t* pData, uint16_t size)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	6039      	str	r1, [r7, #0]
 80006f4:	0011      	movs	r1, r2
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	1c02      	adds	r2, r0, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	1c0a      	adds	r2, r1, #0
 8000700:	801a      	strh	r2, [r3, #0]

		int32_t to = 0, timeout = 10;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	230a      	movs	r3, #10
 8000708:	60bb      	str	r3, [r7, #8]
		to = timeout;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	60fb      	str	r3, [r7, #12]

		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 800070e:	e00a      	b.n	8000726 <I2C_Handle+0x3a>
			if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000710:	f7ff fef8 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d006      	beq.n	8000726 <I2C_Handle+0x3a>
				if(to-- == 0) {
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	60fa      	str	r2, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <I2C_Handle+0x3a>
					return 1;
 8000722:	2301      	movs	r3, #1
 8000724:	e075      	b.n	8000812 <I2C_Handle+0x126>
		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 8000726:	4b3d      	ldr	r3, [pc, #244]	; (800081c <I2C_Handle+0x130>)
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff fe2d 	bl	8000388 <LL_I2C_IsActiveFlag_BUSY>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d1ee      	bne.n	8000710 <I2C_Handle+0x24>
				}
			}
		}

		to = timeout;
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	60fb      	str	r3, [r7, #12]
//	  /* Master Generate Start condition */
	  to = timeout;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	60fb      	str	r3, [r7, #12]
	 LL_I2C_HandleTransfer(I2C2, LCD_SLAVE_ADD, LL_I2C_ADDRSLAVE_7BIT, size+1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	001a      	movs	r2, r3
 8000742:	4836      	ldr	r0, [pc, #216]	; (800081c <I2C_Handle+0x130>)
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <I2C_Handle+0x134>)
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	2300      	movs	r3, #0
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	0013      	movs	r3, r2
 800074e:	2200      	movs	r2, #0
 8000750:	2178      	movs	r1, #120	; 0x78
 8000752:	f7ff fe8b 	bl	800046c <LL_I2C_HandleTransfer>

	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 8000756:	e00a      	b.n	800076e <I2C_Handle+0x82>
	  		if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000758:	f7ff fed4 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d006      	beq.n	800076e <I2C_Handle+0x82>
	  			if(to-- == 0) {
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	60fa      	str	r2, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <I2C_Handle+0x82>
	  				return 1;
 800076a:	2301      	movs	r3, #1
 800076c:	e051      	b.n	8000812 <I2C_Handle+0x126>
	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <I2C_Handle+0x130>)
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fde7 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d0ee      	beq.n	8000758 <I2C_Handle+0x6c>
	  			}
	  		}
	  	}
	  		to = timeout;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	60fb      	str	r3, [r7, #12]
	  		LL_I2C_TransmitData8(I2C2, memAddr);
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4a26      	ldr	r2, [pc, #152]	; (800081c <I2C_Handle+0x130>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f7ff fe96 	bl	80004b8 <LL_I2C_TransmitData8>

	  		do {
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 800078c:	e00a      	b.n	80007a4 <I2C_Handle+0xb8>
	  				if (LL_SYSTICK_IsActiveCounterFlag()) {
 800078e:	f7ff feb9 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d006      	beq.n	80007a4 <I2C_Handle+0xb8>
	  					if(to-- == 0) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	60fa      	str	r2, [r7, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <I2C_Handle+0xb8>
	  						return 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e036      	b.n	8000812 <I2C_Handle+0x126>
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <I2C_Handle+0x130>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fdcc 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d105      	bne.n	80007bc <I2C_Handle+0xd0>
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <I2C_Handle+0x130>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fdd7 	bl	8000366 <LL_I2C_IsActiveFlag_TC>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d0e8      	beq.n	800078e <I2C_Handle+0xa2>
	  					}
	  				}
	  			}
	  			to = timeout;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	60fb      	str	r3, [r7, #12]
	  			LL_I2C_TransmitData8(I2C2, (*pData++));
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	603a      	str	r2, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <I2C_Handle+0x130>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f7ff fe73 	bl	80004b8 <LL_I2C_TransmitData8>
	  		} while (--size > 0);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	1d3a      	adds	r2, r7, #4
 80007d6:	8812      	ldrh	r2, [r2, #0]
 80007d8:	3a01      	subs	r2, #1
 80007da:	801a      	strh	r2, [r3, #0]
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1df      	bne.n	80007a4 <I2C_Handle+0xb8>

	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80007e4:	e00a      	b.n	80007fc <I2C_Handle+0x110>
	  			if (LL_SYSTICK_IsActiveCounterFlag()) {
 80007e6:	f7ff fe8d 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d006      	beq.n	80007fc <I2C_Handle+0x110>
	  				if(to-- == 0) {
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	60fa      	str	r2, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <I2C_Handle+0x110>
	  					return 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e00a      	b.n	8000812 <I2C_Handle+0x126>
	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <I2C_Handle+0x130>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fda0 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d0ee      	beq.n	80007e6 <I2C_Handle+0xfa>
	  				}
	  			}
	  		}
	  		LL_I2C_GenerateStopCondition(I2C2);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <I2C_Handle+0x130>)
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fdf8 	bl	8000400 <LL_I2C_GenerateStopCondition>
	  		return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b004      	add	sp, #16
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40005800 	.word	0x40005800
 8000820:	80002000 	.word	0x80002000

08000824 <BSL_Startup>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Startup()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	LED_Init();
 8000828:	f000 f99c 	bl	8000b64 <LED_Init>
	IIC_Start();
 800082c:	f000 f9de 	bl	8000bec <IIC_Start>
	Display_Init();
 8000830:	f000 f838 	bl	80008a4 <Display_Init>
	Init_TIM6();
 8000834:	f000 f9a8 	bl	8000b88 <Init_TIM6>
	DHT11_Init();
 8000838:	f000 f9ba 	bl	8000bb0 <DHT11_Init>
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <BSL_Config>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Config()
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8000846:	f7ff fe71 	bl	800052c <LL_SYSTICK_EnableIT>
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <BSL_Control>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Control()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	//LED_TEST();
	LL_GPIO_SetPinMode(TEST_INPUT_GPIO_Port, TEST_INPUT_Pin, LL_GPIO_MODE_OUTPUT);
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	0059      	lsls	r1, r3, #1
 8000858:	2390      	movs	r3, #144	; 0x90
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2201      	movs	r2, #1
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff feb0 	bl	80005c4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinOutputType(TEST_INPUT_GPIO_Port, TEST_INPUT_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	0059      	lsls	r1, r3, #1
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff fec4 	bl	80005fc <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinSpeed(TEST_INPUT_GPIO_Port, TEST_INPUT_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	0059      	lsls	r1, r3, #1
 8000878:	2390      	movs	r3, #144	; 0x90
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	2200      	movs	r2, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fed1 	bl	8000626 <LL_GPIO_SetPinSpeed>

	while(1)
	{
		if(ms500ms)
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <BSL_Control+0x50>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0fa      	beq.n	8000884 <BSL_Control+0x34>
		{
			ms500ms = false;
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <BSL_Control+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]

			Display_Test();
 8000894:	f000 f916 	bl	8000ac4 <Display_Test>

			ReadDHT_Data();
 8000898:	f000 f9c8 	bl	8000c2c <ReadDHT_Data>
		if(ms500ms)
 800089c:	e7f2      	b.n	8000884 <BSL_Control+0x34>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000096 	.word	0x20000096

080008a4 <Display_Init>:
  * @brief   init func. for display.
  * @param  ------
  * @retval none
  */
void Display_Init()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
		int status = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]

			LL_I2C_SetTransferSize(I2C2, 50);
 80008ae:	4b83      	ldr	r3, [pc, #524]	; (8000abc <Display_Init+0x218>)
 80008b0:	2132      	movs	r1, #50	; 0x32
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff fd7c 	bl	80003b0 <LL_I2C_SetTransferSize>
		// Init LCD
			status += ssd1306_WriteCommand(0xAE);   // Display off
 80008b8:	20ae      	movs	r0, #174	; 0xae
 80008ba:	f000 f937 	bl	8000b2c <ssd1306_WriteCommand>
 80008be:	0003      	movs	r3, r0
 80008c0:	001a      	movs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	189b      	adds	r3, r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
		if (status != 0) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d000      	beq.n	80008d0 <Display_Init+0x2c>
 80008ce:	e0ef      	b.n	8000ab0 <Display_Init+0x20c>
			return ;
		}
			status += ssd1306_WriteCommand( 0x20);   // Set Memory Addressing Mode
 80008d0:	2020      	movs	r0, #32
 80008d2:	f000 f92b 	bl	8000b2c <ssd1306_WriteCommand>
 80008d6:	0003      	movs	r3, r0
 80008d8:	001a      	movs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	189b      	adds	r3, r3, r2
 80008de:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 f923 	bl	8000b2c <ssd1306_WriteCommand>
 80008e6:	0003      	movs	r3, r0
 80008e8:	001a      	movs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80008f0:	20b0      	movs	r0, #176	; 0xb0
 80008f2:	f000 f91b 	bl	8000b2c <ssd1306_WriteCommand>
 80008f6:	0003      	movs	r3, r0
 80008f8:	001a      	movs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	189b      	adds	r3, r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xC8);   // Set COM Output Scan Direction
 8000900:	20c8      	movs	r0, #200	; 0xc8
 8000902:	f000 f913 	bl	8000b2c <ssd1306_WriteCommand>
 8000906:	0003      	movs	r3, r0
 8000908:	001a      	movs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	189b      	adds	r3, r3, r2
 800090e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // Set low column address
 8000910:	2000      	movs	r0, #0
 8000912:	f000 f90b 	bl	8000b2c <ssd1306_WriteCommand>
 8000916:	0003      	movs	r3, r0
 8000918:	001a      	movs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	189b      	adds	r3, r3, r2
 800091e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x10);   // Set high column address
 8000920:	2010      	movs	r0, #16
 8000922:	f000 f903 	bl	8000b2c <ssd1306_WriteCommand>
 8000926:	0003      	movs	r3, r0
 8000928:	001a      	movs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	189b      	adds	r3, r3, r2
 800092e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x40);   // Set start line address
 8000930:	2040      	movs	r0, #64	; 0x40
 8000932:	f000 f8fb 	bl	8000b2c <ssd1306_WriteCommand>
 8000936:	0003      	movs	r3, r0
 8000938:	001a      	movs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	189b      	adds	r3, r3, r2
 800093e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x81);   // set contrast control register
 8000940:	2081      	movs	r0, #129	; 0x81
 8000942:	f000 f8f3 	bl	8000b2c <ssd1306_WriteCommand>
 8000946:	0003      	movs	r3, r0
 8000948:	001a      	movs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	189b      	adds	r3, r3, r2
 800094e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xFF);
 8000950:	20ff      	movs	r0, #255	; 0xff
 8000952:	f000 f8eb 	bl	8000b2c <ssd1306_WriteCommand>
 8000956:	0003      	movs	r3, r0
 8000958:	001a      	movs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	189b      	adds	r3, r3, r2
 800095e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA1);   // Set segment re-map 0 to 127
 8000960:	20a1      	movs	r0, #161	; 0xa1
 8000962:	f000 f8e3 	bl	8000b2c <ssd1306_WriteCommand>
 8000966:	0003      	movs	r3, r0
 8000968:	001a      	movs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	189b      	adds	r3, r3, r2
 800096e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA6);   // Set normal display
 8000970:	20a6      	movs	r0, #166	; 0xa6
 8000972:	f000 f8db 	bl	8000b2c <ssd1306_WriteCommand>
 8000976:	0003      	movs	r3, r0
 8000978:	001a      	movs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	189b      	adds	r3, r3, r2
 800097e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA8);   // Set multiplex ratio(1 to 64)
 8000980:	20a8      	movs	r0, #168	; 0xa8
 8000982:	f000 f8d3 	bl	8000b2c <ssd1306_WriteCommand>
 8000986:	0003      	movs	r3, r0
 8000988:	001a      	movs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	189b      	adds	r3, r3, r2
 800098e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x1F);	// ( SSD1306_HEIGHT == 32)
 8000990:	201f      	movs	r0, #31
 8000992:	f000 f8cb 	bl	8000b2c <ssd1306_WriteCommand>
 8000996:	0003      	movs	r3, r0
 8000998:	001a      	movs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	189b      	adds	r3, r3, r2
 800099e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009a0:	20a4      	movs	r0, #164	; 0xa4
 80009a2:	f000 f8c3 	bl	8000b2c <ssd1306_WriteCommand>
 80009a6:	0003      	movs	r3, r0
 80009a8:	001a      	movs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	189b      	adds	r3, r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD3);   // Set display offset
 80009b0:	20d3      	movs	r0, #211	; 0xd3
 80009b2:	f000 f8bb 	bl	8000b2c <ssd1306_WriteCommand>
 80009b6:	0003      	movs	r3, r0
 80009b8:	001a      	movs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	189b      	adds	r3, r3, r2
 80009be:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // No offset
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 f8b3 	bl	8000b2c <ssd1306_WriteCommand>
 80009c6:	0003      	movs	r3, r0
 80009c8:	001a      	movs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	189b      	adds	r3, r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD5);   // Set display clock divide ratio/oscillator frequency
 80009d0:	20d5      	movs	r0, #213	; 0xd5
 80009d2:	f000 f8ab 	bl	8000b2c <ssd1306_WriteCommand>
 80009d6:	0003      	movs	r3, r0
 80009d8:	001a      	movs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	189b      	adds	r3, r3, r2
 80009de:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xF0);   // Set divide ratio
 80009e0:	20f0      	movs	r0, #240	; 0xf0
 80009e2:	f000 f8a3 	bl	8000b2c <ssd1306_WriteCommand>
 80009e6:	0003      	movs	r3, r0
 80009e8:	001a      	movs	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	189b      	adds	r3, r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD9);   // Set pre-charge period
 80009f0:	20d9      	movs	r0, #217	; 0xd9
 80009f2:	f000 f89b 	bl	8000b2c <ssd1306_WriteCommand>
 80009f6:	0003      	movs	r3, r0
 80009f8:	001a      	movs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	189b      	adds	r3, r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x22);
 8000a00:	2022      	movs	r0, #34	; 0x22
 8000a02:	f000 f893 	bl	8000b2c <ssd1306_WriteCommand>
 8000a06:	0003      	movs	r3, r0
 8000a08:	001a      	movs	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	189b      	adds	r3, r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xDA);   // Set com pins hardware configuration
 8000a10:	20da      	movs	r0, #218	; 0xda
 8000a12:	f000 f88b 	bl	8000b2c <ssd1306_WriteCommand>
 8000a16:	0003      	movs	r3, r0
 8000a18:	001a      	movs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	189b      	adds	r3, r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
		#ifdef SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0x32);   // Enable COM left/right remap
		#else
		    status += ssd1306_WriteCommand( 0x02);   // Do not use COM left/right remap
 8000a20:	2002      	movs	r0, #2
 8000a22:	f000 f883 	bl	8000b2c <ssd1306_WriteCommand>
 8000a26:	0003      	movs	r3, r0
 8000a28:	001a      	movs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	189b      	adds	r3, r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
		#endif // SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0xDB);   // Set vcomh
 8000a30:	20db      	movs	r0, #219	; 0xdb
 8000a32:	f000 f87b 	bl	8000b2c <ssd1306_WriteCommand>
 8000a36:	0003      	movs	r3, r0
 8000a38:	001a      	movs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	189b      	adds	r3, r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x20);   // 0x20,0.77xVcc
 8000a40:	2020      	movs	r0, #32
 8000a42:	f000 f873 	bl	8000b2c <ssd1306_WriteCommand>
 8000a46:	0003      	movs	r3, r0
 8000a48:	001a      	movs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	189b      	adds	r3, r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x8D);   // Set DC-DC enable
 8000a50:	208d      	movs	r0, #141	; 0x8d
 8000a52:	f000 f86b 	bl	8000b2c <ssd1306_WriteCommand>
 8000a56:	0003      	movs	r3, r0
 8000a58:	001a      	movs	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	189b      	adds	r3, r3, r2
 8000a5e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x14);   //
 8000a60:	2014      	movs	r0, #20
 8000a62:	f000 f863 	bl	8000b2c <ssd1306_WriteCommand>
 8000a66:	0003      	movs	r3, r0
 8000a68:	001a      	movs	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	189b      	adds	r3, r3, r2
 8000a6e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xAF);   // Turn on SSD1306 panel
 8000a70:	20af      	movs	r0, #175	; 0xaf
 8000a72:	f000 f85b 	bl	8000b2c <ssd1306_WriteCommand>
 8000a76:	0003      	movs	r3, r0
 8000a78:	001a      	movs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	189b      	adds	r3, r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]

		    if (status != 0) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d116      	bne.n	8000ab4 <Display_Init+0x210>
		        return ;
		    }
		    LL_mDelay(100);
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f002 fd1e 	bl	80034c8 <LL_mDelay>
			ssd1306_Fill(White);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f000 fa55 	bl	8000f3c <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8000a92:	f000 f9ff 	bl	8000e94 <ssd1306_UpdateScreen>
			  // Set default values for screen object
			SSD1306.CurrentX = 0;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <Display_Init+0x21c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	801a      	strh	r2, [r3, #0]
			SSD1306.CurrentY = 0;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <Display_Init+0x21c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	805a      	strh	r2, [r3, #2]

			SSD1306.Initialized = 1;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <Display_Init+0x21c>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	715a      	strb	r2, [r3, #5]
			LL_mDelay(100);
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f002 fd0d 	bl	80034c8 <LL_mDelay>
 8000aae:	e002      	b.n	8000ab6 <Display_Init+0x212>
			return ;
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	e000      	b.n	8000ab6 <Display_Init+0x212>
		        return ;
 8000ab4:	46c0      	nop			; (mov r8, r8)

}
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005800 	.word	0x40005800
 8000ac0:	20000160 	.word	0x20000160

08000ac4 <Display_Test>:

void Display_Test()
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b0c1      	sub	sp, #260	; 0x104
 8000ac8:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 fa36 	bl	8000f3c <ssd1306_Fill>
	/*for (int i = 0; i < 128; i++) {
		ssd1306_DrawPixel(i, 10, White);
	}*/
	char tBuf[255];
	sprintf(tBuf,"T: %d H: %d",(int)temperature,(int)humidity);
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <Display_Test+0x58>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	0019      	movs	r1, r3
 8000ada:	f7ff fbab 	bl	8000234 <__aeabi_d2iz>
 8000ade:	0004      	movs	r4, r0
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <Display_Test+0x5c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	0019      	movs	r1, r3
 8000aea:	f7ff fba3 	bl	8000234 <__aeabi_d2iz>
 8000aee:	0003      	movs	r3, r0
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <Display_Test+0x60>)
 8000af2:	0038      	movs	r0, r7
 8000af4:	0022      	movs	r2, r4
 8000af6:	f002 fd49 	bl	800358c <siprintf>
	ssd1306_SetCursor(0, 10);
 8000afa:	210a      	movs	r1, #10
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 fadb 	bl	80010b8 <ssd1306_SetCursor>
	ssd1306_WriteString(tBuf, Font_11x18, White);
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <Display_Test+0x64>)
 8000b04:	0038      	movs	r0, r7
 8000b06:	2301      	movs	r3, #1
 8000b08:	6811      	ldr	r1, [r2, #0]
 8000b0a:	6852      	ldr	r2, [r2, #4]
 8000b0c:	f000 fa3a 	bl	8000f84 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000b10:	f000 f9c0 	bl	8000e94 <ssd1306_UpdateScreen>
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b041      	add	sp, #260	; 0x104
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	20000098 	.word	0x20000098
 8000b20:	200000a0 	.word	0x200000a0
 8000b24:	08003df0 	.word	0x08003df0
 8000b28:	20000000 	.word	0x20000000

08000b2c <ssd1306_WriteCommand>:
static uint8_t ssd1306_WriteCommand(uint8_t command)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	701a      	strb	r2, [r3, #0]
	uint8_t memAdd= 0x00;
 8000b38:	200f      	movs	r0, #15
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	uint16_t size = 1;
 8000b40:	210c      	movs	r1, #12
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2201      	movs	r2, #1
 8000b46:	801a      	strh	r2, [r3, #0]
	return I2C_Handle(memAdd,&command,size);
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	881a      	ldrh	r2, [r3, #0]
 8000b4c:	1df9      	adds	r1, r7, #7
 8000b4e:	183b      	adds	r3, r7, r0
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fdca 	bl	80006ec <I2C_Handle>
 8000b58:	0003      	movs	r3, r0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <LED_Init>:
void LED_Init()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	LED1_OFF();
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <LED_Init+0x20>)
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff fdb0 	bl	80006d2 <LL_GPIO_ResetOutputPin>
	LED2_OFF();
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <LED_Init+0x20>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fdab 	bl	80006d2 <LL_GPIO_ResetOutputPin>
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	48000800 	.word	0x48000800

08000b88 <Init_TIM6>:
void Init_TIM6(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
		LL_TIM_ClearFlag_UPDATE(TIM6);
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Init_TIM6+0x24>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fcfe 	bl	8000590 <LL_TIM_ClearFlag_UPDATE>
	/* Enable counter */
	  LL_TIM_EnableCounter(TIM6);
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <Init_TIM6+0x24>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fcd6 	bl	8000548 <LL_TIM_EnableCounter>

	  /* Force update generation */
	  LL_TIM_GenerateEvent_UPDATE(TIM6);
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <Init_TIM6+0x24>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fd02 	bl	80005a8 <LL_TIM_GenerateEvent_UPDATE>
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40001000 	.word	0x40001000

08000bb0 <DHT11_Init>:
void DHT11_Init()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
		/* Enable the LED Clock */
		DHT11_GPIO_CLK_ENABLE();
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	02db      	lsls	r3, r3, #11
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff fc8d 	bl	80004d8 <LL_AHB1_GRP1_EnableClock>

		LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_OUTPUT);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <DHT11_Init+0x38>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff fcfd 	bl	80005c4 <LL_GPIO_SetPinMode>
		/* Reset value is LL_GPIO_OUTPUT_PUSHPULL */
		LL_GPIO_SetPinOutputType(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <DHT11_Init+0x38>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2104      	movs	r1, #4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fd13 	bl	80005fc <LL_GPIO_SetPinOutputType>
		/* Reset value is LL_GPIO_SPEED_FREQ_LOW */
		LL_GPIO_SetPinSpeed(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <DHT11_Init+0x38>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2104      	movs	r1, #4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fd22 	bl	8000626 <LL_GPIO_SetPinSpeed>
		/* Reset value is LL_GPIO_PULL_NO */
		//LL_GPIO_SetPinPull(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	48000400 	.word	0x48000400

08000bec <IIC_Start>:
void IIC_Start()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	LL_I2C_SetSlaveAddr(I2C2,LCD_SLAVE_ADD);
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <IIC_Start+0x3c>)
 8000bf2:	2178      	movs	r1, #120	; 0x78
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fc27 	bl	8000448 <LL_I2C_SetSlaveAddr>
	LL_I2C_SetTransferRequest(I2C2, LL_I2C_REQUEST_WRITE);
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <IIC_Start+0x3c>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fc0e 	bl	8000420 <LL_I2C_SetTransferRequest>
	LL_I2C_SetTransferSize(I2C2, 50);
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <IIC_Start+0x3c>)
 8000c06:	2132      	movs	r1, #50	; 0x32
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fbd1 	bl	80003b0 <LL_I2C_SetTransferSize>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <IIC_Start+0x3c>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff fbe0 	bl	80003d8 <LL_I2C_AcknowledgeNextData>
	LL_I2C_Enable(I2C2);
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <IIC_Start+0x3c>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fb84 	bl	8000328 <LL_I2C_Enable>
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40005800 	.word	0x40005800

08000c2c <ReadDHT_Data>:
#define DHT_BIT_SET_DATA_DETECT_TIME_US 50
char dht11_byte[DHT_DATA_BYTE_COUNT];
uint32_t dht11_byte_t[DHT_DATA_BYTE_COUNT][8];

int ReadDHT_Data()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
		int rv = ReadRawDHTData();
 8000c32:	f000 f84b 	bl	8000ccc <ReadRawDHTData>
 8000c36:	0003      	movs	r3, r0
 8000c38:	607b      	str	r3, [r7, #4]
		if (rv != 0)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ReadDHT_Data+0x18>
		{
			return rv;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	e037      	b.n	8000cb4 <ReadDHT_Data+0x88>
		}

		// CONVERT AND STORE
		humidity    = dht11_byte[0];  // bit[1] == 0;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <ReadDHT_Data+0x90>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fb29 	bl	80002a0 <__aeabi_ui2d>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	000b      	movs	r3, r1
 8000c52:	491b      	ldr	r1, [pc, #108]	; (8000cc0 <ReadDHT_Data+0x94>)
 8000c54:	600a      	str	r2, [r1, #0]
 8000c56:	604b      	str	r3, [r1, #4]
		temperature = dht11_byte[2];  // bits[3] == 0;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <ReadDHT_Data+0x90>)
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fb1f 	bl	80002a0 <__aeabi_ui2d>
 8000c62:	0002      	movs	r2, r0
 8000c64:	000b      	movs	r3, r1
 8000c66:	4917      	ldr	r1, [pc, #92]	; (8000cc4 <ReadDHT_Data+0x98>)
 8000c68:	600a      	str	r2, [r1, #0]
 8000c6a:	604b      	str	r3, [r1, #4]

		// TEST CHECKSUM
		uint8_t sum = dht11_byte[0] + dht11_byte[1] + dht11_byte[2] + dht11_byte[3]; // bits[1] && bits[3] both 0
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <ReadDHT_Data+0x90>)
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <ReadDHT_Data+0x90>)
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <ReadDHT_Data+0x90>)
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	b2d9      	uxtb	r1, r3
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <ReadDHT_Data+0x90>)
 8000c82:	78da      	ldrb	r2, [r3, #3]
 8000c84:	1cfb      	adds	r3, r7, #3
 8000c86:	188a      	adds	r2, r1, r2
 8000c88:	701a      	strb	r2, [r3, #0]
		if (dht11_byte[4] != sum)
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <ReadDHT_Data+0x90>)
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	1cfa      	adds	r2, r7, #3
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d00d      	beq.n	8000cb2 <ReadDHT_Data+0x86>
		{
			temperature = humidity = -1;
 8000c96:	490a      	ldr	r1, [pc, #40]	; (8000cc0 <ReadDHT_Data+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <ReadDHT_Data+0x9c>)
 8000c9c:	600a      	str	r2, [r1, #0]
 8000c9e:	604b      	str	r3, [r1, #4]
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <ReadDHT_Data+0x94>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <ReadDHT_Data+0x98>)
 8000ca8:	600a      	str	r2, [r1, #0]
 8000caa:	604b      	str	r3, [r1, #4]
			return -1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	425b      	negs	r3, r3
 8000cb0:	e000      	b.n	8000cb4 <ReadDHT_Data+0x88>
		}
		return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000568 	.word	0x20000568
 8000cc0:	200000a0 	.word	0x200000a0
 8000cc4:	20000098 	.word	0x20000098
 8000cc8:	bff00000 	.word	0xbff00000

08000ccc <ReadRawDHTData>:
  * @retval :
  *  0 : OK
  *  -2 : timeout
  */
int ReadRawDHTData()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	//we notified that we want to start com.
	LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_OUTPUT);
 8000cd2:	4b60      	ldr	r3, [pc, #384]	; (8000e54 <ReadRawDHTData+0x188>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fc73 	bl	80005c4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinOutputType(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000cde:	4b5d      	ldr	r3, [pc, #372]	; (8000e54 <ReadRawDHTData+0x188>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fc89 	bl	80005fc <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinSpeed(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000cea:	4b5a      	ldr	r3, [pc, #360]	; (8000e54 <ReadRawDHTData+0x188>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	2104      	movs	r1, #4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fc98 	bl	8000626 <LL_GPIO_SetPinSpeed>

	LL_GPIO_ResetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <ReadRawDHTData+0x188>)
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fce9 	bl	80006d2 <LL_GPIO_ResetOutputPin>
	LL_mDelay(19);
 8000d00:	2013      	movs	r0, #19
 8000d02:	f002 fbe1 	bl	80034c8 <LL_mDelay>
	LL_GPIO_SetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8000d06:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <ReadRawDHTData+0x188>)
 8000d08:	2104      	movs	r1, #4
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fcd5 	bl	80006ba <LL_GPIO_SetOutputPin>
	DelayUs(30);
 8000d10:	201e      	movs	r0, #30
 8000d12:	f000 f8a5 	bl	8000e60 <DelayUs>
	//********************************

	/*****************low(80us) => high (80us) ***************** response */
	LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_INPUT);
 8000d16:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <ReadRawDHTData+0x188>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fc51 	bl	80005c4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_PULL_NO);
 8000d22:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <ReadRawDHTData+0x188>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	2104      	movs	r1, #4
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fc98 	bl	800065e <LL_GPIO_SetPinPull>

	LL_TIM_SetCounter(TIM6, 0);
 8000d2e:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fc16 	bl	8000564 <LL_TIM_SetCounter>
	while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d38:	e009      	b.n	8000d4e <ReadRawDHTData+0x82>
	{
		if(LL_TIM_GetCounter(TIM6) > DHT_BEGIN_RESPONSE_TIMEOUT_US)
 8000d3a:	4b47      	ldr	r3, [pc, #284]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fc1d 	bl	800057c <LL_TIM_GetCounter>
 8000d42:	0003      	movs	r3, r0
 8000d44:	2b5a      	cmp	r3, #90	; 0x5a
 8000d46:	d902      	bls.n	8000d4e <ReadRawDHTData+0x82>
		{
			return -2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	e07e      	b.n	8000e4c <ReadRawDHTData+0x180>
	while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <ReadRawDHTData+0x188>)
 8000d50:	2104      	movs	r1, #4
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fc9f 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d0ee      	beq.n	8000d3a <ReadRawDHTData+0x6e>
		}
	}
	LL_TIM_SetCounter(TIM6, 0);
 8000d5c:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff fbff 	bl	8000564 <LL_TIM_SetCounter>
	while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d66:	e009      	b.n	8000d7c <ReadRawDHTData+0xb0>
	{
		if(LL_TIM_GetCounter(TIM6) > DHT_BEGIN_RESPONSE_TIMEOUT_US)
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fc06 	bl	800057c <LL_TIM_GetCounter>
 8000d70:	0003      	movs	r3, r0
 8000d72:	2b5a      	cmp	r3, #90	; 0x5a
 8000d74:	d902      	bls.n	8000d7c <ReadRawDHTData+0xb0>
		{
			return -2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	425b      	negs	r3, r3
 8000d7a:	e067      	b.n	8000e4c <ReadRawDHTData+0x180>
	while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <ReadRawDHTData+0x188>)
 8000d7e:	2104      	movs	r1, #4
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fc88 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d1ee      	bne.n	8000d68 <ReadRawDHTData+0x9c>
		}
	}
	//********************************************************* Start reading data bit by low level (50us) ***************************
	for (int i = 0; i < DHT_DATA_BYTE_COUNT; i++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e059      	b.n	8000e44 <ReadRawDHTData+0x178>
	{
		for (int J = 7; J > -1; J--)
 8000d90:	2307      	movs	r3, #7
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	e050      	b.n	8000e38 <ReadRawDHTData+0x16c>
		{
			LL_TIM_SetCounter(TIM6, 0);
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fbe2 	bl	8000564 <LL_TIM_SetCounter>
			while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000da0:	e009      	b.n	8000db6 <ReadRawDHTData+0xea>
			{
				if(LL_TIM_GetCounter(TIM6) > DHT_START_BIT_TIMEOUT_US)
 8000da2:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fbe9 	bl	800057c <LL_TIM_GetCounter>
 8000daa:	0003      	movs	r3, r0
 8000dac:	2b3c      	cmp	r3, #60	; 0x3c
 8000dae:	d902      	bls.n	8000db6 <ReadRawDHTData+0xea>
				{
					return -2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	425b      	negs	r3, r3
 8000db4:	e04a      	b.n	8000e4c <ReadRawDHTData+0x180>
			while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <ReadRawDHTData+0x188>)
 8000db8:	2104      	movs	r1, #4
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fc6b 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d0ee      	beq.n	8000da2 <ReadRawDHTData+0xd6>
				}
			}

			LL_TIM_SetCounter(TIM6, 0);
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff fbcb 	bl	8000564 <LL_TIM_SetCounter>
			while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin));
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <ReadRawDHTData+0x188>)
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fc5e 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d1f8      	bne.n	8000dd0 <ReadRawDHTData+0x104>
			(LL_TIM_GetCounter(TIM6) > DHT_BIT_SET_DATA_DETECT_TIME_US) ? bitWrite(dht11_byte[i],J,1) : bitWrite(dht11_byte[i],J,0);
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <ReadRawDHTData+0x18c>)
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fbcb 	bl	800057c <LL_TIM_GetCounter>
 8000de6:	0003      	movs	r3, r0
 8000de8:	2b32      	cmp	r3, #50	; 0x32
 8000dea:	d910      	bls.n	8000e0e <ReadRawDHTData+0x142>
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <ReadRawDHTData+0x190>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	4099      	lsls	r1, r3
 8000dfa:	000b      	movs	r3, r1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <ReadRawDHTData+0x190>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	18d3      	adds	r3, r2, r3
 8000e08:	1c0a      	adds	r2, r1, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e011      	b.n	8000e32 <ReadRawDHTData+0x166>
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <ReadRawDHTData+0x190>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	18d3      	adds	r3, r2, r3
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2101      	movs	r1, #1
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4091      	lsls	r1, r2
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	4013      	ands	r3, r2
 8000e26:	b2d9      	uxtb	r1, r3
 8000e28:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <ReadRawDHTData+0x190>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	1c0a      	adds	r2, r1, #0
 8000e30:	701a      	strb	r2, [r3, #0]
		for (int J = 7; J > -1; J--)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	daab      	bge.n	8000d96 <ReadRawDHTData+0xca>
	for (int i = 0; i < DHT_DATA_BYTE_COUNT; i++)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3301      	adds	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	dda2      	ble.n	8000d90 <ReadRawDHTData+0xc4>
		}
	}

	return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	48000400 	.word	0x48000400
 8000e58:	40001000 	.word	0x40001000
 8000e5c:	20000568 	.word	0x20000568

08000e60 <DelayUs>:

void DelayUs(uint32_t us)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	LL_TIM_SetCounter(TIM6, 0);
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <DelayUs+0x30>)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fb79 	bl	8000564 <LL_TIM_SetCounter>
	while(LL_TIM_GetCounter(TIM6) < us);
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <DelayUs+0x30>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff fb80 	bl	800057c <LL_TIM_GetCounter>
 8000e7c:	0002      	movs	r2, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d8f7      	bhi.n	8000e74 <DelayUs+0x14>
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40001000 	.word	0x40001000

08000e94 <ssd1306_UpdateScreen>:
  * @brief   Write the screenbuffer with changed to the screen
  * @param  ------
  * @retval none
  */
void ssd1306_UpdateScreen()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
    uint8_t i;
    int sum = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]

    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e02f      	b.n	8000f06 <ssd1306_UpdateScreen+0x72>
    	sum+= ssd1306_WriteCommand( 0xB0 + i);
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3b50      	subs	r3, #80	; 0x50
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f7ff fe3c 	bl	8000b2c <ssd1306_WriteCommand>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	189b      	adds	r3, r3, r2
 8000ebc:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x00);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff fe34 	bl	8000b2c <ssd1306_WriteCommand>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	189b      	adds	r3, r3, r2
 8000ecc:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x10);
 8000ece:	2010      	movs	r0, #16
 8000ed0:	f7ff fe2c 	bl	8000b2c <ssd1306_WriteCommand>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	189b      	adds	r3, r3, r2
 8000edc:	603b      	str	r3, [r7, #0]
    	sum+= I2C_Handle(0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	01da      	lsls	r2, r3, #7
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <ssd1306_UpdateScreen+0xa0>)
 8000ee6:	18d3      	adds	r3, r2, r3
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	0019      	movs	r1, r3
 8000eec:	2040      	movs	r0, #64	; 0x40
 8000eee:	f7ff fbfd 	bl	80006ec <I2C_Handle>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	189b      	adds	r3, r3, r2
 8000efa:	603b      	str	r3, [r7, #0]
    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	3201      	adds	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d9cb      	bls.n	8000ea6 <ssd1306_UpdateScreen+0x12>
    }
    if(sum != 0)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <ssd1306_UpdateScreen+0x8c>
    {
    	LED1_ON();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <ssd1306_UpdateScreen+0xa4>)
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff fbce 	bl	80006ba <LL_GPIO_SetOutputPin>
    }
    else
    {
    	LED2_ON();
    }
}
 8000f1e:	e004      	b.n	8000f2a <ssd1306_UpdateScreen+0x96>
    	LED2_ON();
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <ssd1306_UpdateScreen+0xa4>)
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fbc8 	bl	80006ba <LL_GPIO_SetOutputPin>
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	20000168 	.word	0x20000168
 8000f38:	48000800 	.word	0x48000800

08000f3c <ssd1306_Fill>:
  * @brief   Fill the whole screen with the given color
  * @param  ------
  * @retval none
  */
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	701a      	strb	r2, [r3, #0]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e00e      	b.n	8000f6c <ssd1306_Fill+0x30>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <ssd1306_Fill+0x1e>
 8000f56:	2100      	movs	r1, #0
 8000f58:	e000      	b.n	8000f5c <ssd1306_Fill+0x20>
 8000f5a:	21ff      	movs	r1, #255	; 0xff
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <ssd1306_Fill+0x44>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	1c0a      	adds	r2, r1, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3eb      	bcc.n	8000f4e <ssd1306_Fill+0x12>
    }
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000168 	.word	0x20000168

08000f84 <ssd1306_WriteString>:
  * @brief   Write full string to screenbuffer
  * @param  ------
  * @retval none
  */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	1d38      	adds	r0, r7, #4
 8000f8e:	6001      	str	r1, [r0, #0]
 8000f90:	6042      	str	r2, [r0, #4]
 8000f92:	001a      	movs	r2, r3
 8000f94:	1cfb      	adds	r3, r7, #3
 8000f96:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str)
 8000f98:	e014      	b.n	8000fc4 <ssd1306_WriteString+0x40>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	7818      	ldrb	r0, [r3, #0]
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	1d3a      	adds	r2, r7, #4
 8000fa4:	6811      	ldr	r1, [r2, #0]
 8000fa6:	6852      	ldr	r2, [r2, #4]
 8000fa8:	f000 f8a0 	bl	80010ec <ssd1306_WriteChar>
 8000fac:	0003      	movs	r3, r0
 8000fae:	001a      	movs	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d002      	beq.n	8000fbe <ssd1306_WriteString+0x3a>
        {
            // Char could not be written
            return *str;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	e008      	b.n	8000fd0 <ssd1306_WriteString+0x4c>
        }

        // Next char
        str++;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e6      	bne.n	8000f9a <ssd1306_WriteString+0x16>
    }

    // Everything ok
    return *str;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	781b      	ldrb	r3, [r3, #0]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <ssd1306_DrawPixel>:
  * 		Y => Y Coordinate
  * 		color => Pixel color
  * @retval none
  */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0004      	movs	r4, r0
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	1c22      	adds	r2, r4, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	1dbb      	adds	r3, r7, #6
 8000fec:	1c02      	adds	r2, r0, #0
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	1d7b      	adds	r3, r7, #5
 8000ff2:	1c0a      	adds	r2, r1, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db52      	blt.n	80010a6 <ssd1306_DrawPixel+0xce>
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b1f      	cmp	r3, #31
 8001006:	d84e      	bhi.n	80010a6 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <ssd1306_DrawPixel+0xd8>)
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d006      	beq.n	800101e <ssd1306_DrawPixel+0x46>
    {
        color = (SSD1306_COLOR)!color;
 8001010:	1d7b      	adds	r3, r7, #5
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	425a      	negs	r2, r3
 8001016:	4153      	adcs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	1d7b      	adds	r3, r7, #5
 800101c:	701a      	strb	r2, [r3, #0]
    }

    // Draw in the correct color
    if (color == White)
 800101e:	1d7b      	adds	r3, r7, #5
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d11e      	bne.n	8001064 <ssd1306_DrawPixel+0x8c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	1dbb      	adds	r3, r7, #6
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	08db      	lsrs	r3, r3, #3
 8001030:	b2d8      	uxtb	r0, r3
 8001032:	0003      	movs	r3, r0
 8001034:	01db      	lsls	r3, r3, #7
 8001036:	18d3      	adds	r3, r2, r3
 8001038:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <ssd1306_DrawPixel+0xdc>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	b25a      	sxtb	r2, r3
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2107      	movs	r1, #7
 8001044:	400b      	ands	r3, r1
 8001046:	2101      	movs	r1, #1
 8001048:	4099      	lsls	r1, r3
 800104a:	000b      	movs	r3, r1
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b259      	sxtb	r1, r3
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	0003      	movs	r3, r0
 8001058:	01db      	lsls	r3, r3, #7
 800105a:	18d3      	adds	r3, r2, r3
 800105c:	b2c9      	uxtb	r1, r1
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <ssd1306_DrawPixel+0xdc>)
 8001060:	54d1      	strb	r1, [r2, r3]
 8001062:	e021      	b.n	80010a8 <ssd1306_DrawPixel+0xd0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	b2d8      	uxtb	r0, r3
 8001070:	0003      	movs	r3, r0
 8001072:	01db      	lsls	r3, r3, #7
 8001074:	18d3      	adds	r3, r2, r3
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <ssd1306_DrawPixel+0xdc>)
 8001078:	5cd3      	ldrb	r3, [r2, r3]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	1dba      	adds	r2, r7, #6
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	2107      	movs	r1, #7
 8001082:	400a      	ands	r2, r1
 8001084:	2101      	movs	r1, #1
 8001086:	4091      	lsls	r1, r2
 8001088:	000a      	movs	r2, r1
 800108a:	b252      	sxtb	r2, r2
 800108c:	43d2      	mvns	r2, r2
 800108e:	b252      	sxtb	r2, r2
 8001090:	4013      	ands	r3, r2
 8001092:	b259      	sxtb	r1, r3
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	0003      	movs	r3, r0
 800109a:	01db      	lsls	r3, r3, #7
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	b2c9      	uxtb	r1, r1
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <ssd1306_DrawPixel+0xdc>)
 80010a2:	54d1      	strb	r1, [r2, r3]
 80010a4:	e000      	b.n	80010a8 <ssd1306_DrawPixel+0xd0>
        return;
 80010a6:	46c0      	nop			; (mov r8, r8)
    }
}
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b003      	add	sp, #12
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	20000160 	.word	0x20000160
 80010b4:	20000168 	.word	0x20000168

080010b8 <ssd1306_SetCursor>:
  * @param  x      => axis
  * 		y      => axis
  * @retval none
  */
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	1c0a      	adds	r2, r1, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <ssd1306_SetCursor+0x30>)
 80010d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80010d4:	1dbb      	adds	r3, r7, #6
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <ssd1306_SetCursor+0x30>)
 80010dc:	805a      	strh	r2, [r3, #2]
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	20000160 	.word	0x20000160

080010ec <ssd1306_WriteChar>:
  * 		Font    => Font to use
  * 		color   => Black or White
  * @retval char
  */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	0004      	movs	r4, r0
 80010f4:	1d38      	adds	r0, r7, #4
 80010f6:	6001      	str	r1, [r0, #0]
 80010f8:	6042      	str	r2, [r0, #4]
 80010fa:	0019      	movs	r1, r3
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	1c22      	adds	r2, r4, #0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	230e      	movs	r3, #14
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	1c0a      	adds	r2, r1, #0
 800110a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <ssd1306_WriteChar+0x11c>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	18d3      	adds	r3, r2, r3
 8001118:	2b7f      	cmp	r3, #127	; 0x7f
 800111a:	dc07      	bgt.n	800112c <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <ssd1306_WriteChar+0x11c>)
 800111e:	885b      	ldrh	r3, [r3, #2]
 8001120:	001a      	movs	r2, r3
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001128:	2b1f      	cmp	r3, #31
 800112a:	dd01      	ble.n	8001130 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 800112c:	2300      	movs	r3, #0
 800112e:	e066      	b.n	80011fe <ssd1306_WriteChar+0x112>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	e051      	b.n	80011da <ssd1306_WriteChar+0xee>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	230f      	movs	r3, #15
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	3b20      	subs	r3, #32
 8001142:	1d39      	adds	r1, r7, #4
 8001144:	7849      	ldrb	r1, [r1, #1]
 8001146:	434b      	muls	r3, r1
 8001148:	0019      	movs	r1, r3
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	18cb      	adds	r3, r1, r3
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	e035      	b.n	80011c8 <ssd1306_WriteChar+0xdc>
        {
            if ((b << j) & 0x8000)
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	409a      	lsls	r2, r3
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4013      	ands	r3, r2
 8001168:	d014      	beq.n	8001194 <ssd1306_WriteChar+0xa8>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <ssd1306_WriteChar+0x11c>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	18d3      	adds	r3, r2, r3
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <ssd1306_WriteChar+0x11c>)
 800117a:	885b      	ldrh	r3, [r3, #2]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	b2d9      	uxtb	r1, r3
 8001186:	230e      	movs	r3, #14
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	001a      	movs	r2, r3
 800118e:	f7ff ff23 	bl	8000fd8 <ssd1306_DrawPixel>
 8001192:	e016      	b.n	80011c2 <ssd1306_WriteChar+0xd6>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <ssd1306_WriteChar+0x11c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	18d3      	adds	r3, r2, r3
 80011a0:	b2d8      	uxtb	r0, r3
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <ssd1306_WriteChar+0x11c>)
 80011a4:	885b      	ldrh	r3, [r3, #2]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	b2d9      	uxtb	r1, r3
 80011b0:	230e      	movs	r3, #14
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	425a      	negs	r2, r3
 80011b8:	4153      	adcs	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	001a      	movs	r2, r3
 80011be:	f7ff ff0b 	bl	8000fd8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	001a      	movs	r2, r3
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d3c3      	bcc.n	800115c <ssd1306_WriteChar+0x70>
    for (i = 0; i < Font.FontHeight; i++)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	3301      	adds	r3, #1
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	001a      	movs	r2, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d3a7      	bcc.n	8001136 <ssd1306_WriteChar+0x4a>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <ssd1306_WriteChar+0x11c>)
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	18d3      	adds	r3, r2, r3
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <ssd1306_WriteChar+0x11c>)
 80011f6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	781b      	ldrb	r3, [r3, #0]
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b009      	add	sp, #36	; 0x24
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	20000160 	.word	0x20000160

0800120c <BSL_Tick>:
    LL_mDelay(Period);
  }
}

void BSL_Tick()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	static __IO uint32_t cntr_ms_50 = 0;
	static __IO uint32_t cntr_ms_500 = 0;
	static __IO uint32_t cntr_ms_3000 = 0;

	if(++cntr_ms_50 >49)
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <BSL_Tick+0x60>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <BSL_Tick+0x60>)
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	2b31      	cmp	r3, #49	; 0x31
 800121c:	d905      	bls.n	800122a <BSL_Tick+0x1e>
	{
		ms50ms = true;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <BSL_Tick+0x64>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
		cntr_ms_50 = 0;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <BSL_Tick+0x60>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
	}
	if(++cntr_ms_500 >499)
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <BSL_Tick+0x68>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a10      	ldr	r2, [pc, #64]	; (8001274 <BSL_Tick+0x68>)
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	22fa      	movs	r2, #250	; 0xfa
 8001236:	0052      	lsls	r2, r2, #1
 8001238:	4293      	cmp	r3, r2
 800123a:	d305      	bcc.n	8001248 <BSL_Tick+0x3c>
		{
			ms500ms = true;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <BSL_Tick+0x6c>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
			cntr_ms_500 = 0;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <BSL_Tick+0x68>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
		}
	if(++cntr_ms_3000 > 2999)
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <BSL_Tick+0x70>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <BSL_Tick+0x70>)
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <BSL_Tick+0x74>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d905      	bls.n	8001264 <BSL_Tick+0x58>
	{
		ms3000ms = true;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <BSL_Tick+0x78>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
		cntr_ms_3000 = 0;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <BSL_Tick+0x70>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
	}
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	200000a8 	.word	0x200000a8
 8001270:	20000094 	.word	0x20000094
 8001274:	200000ac 	.word	0x200000ac
 8001278:	20000096 	.word	0x20000096
 800127c:	200000b0 	.word	0x200000b0
 8001280:	00000bb7 	.word	0x00000bb7
 8001284:	20000095 	.word	0x20000095

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b7f      	cmp	r3, #127	; 0x7f
 800129a:	d809      	bhi.n	80012b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	001a      	movs	r2, r3
 80012a2:	231f      	movs	r3, #31
 80012a4:	401a      	ands	r2, r3
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_EnableIRQ+0x30>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
  }
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	0002      	movs	r2, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b7f      	cmp	r3, #127	; 0x7f
 80012d0:	d828      	bhi.n	8001324 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <__NVIC_SetPriority+0xd4>)
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	33c0      	adds	r3, #192	; 0xc0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	589b      	ldr	r3, [r3, r2]
 80012e2:	1dfa      	adds	r2, r7, #7
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	0011      	movs	r1, r2
 80012e8:	2203      	movs	r2, #3
 80012ea:	400a      	ands	r2, r1
 80012ec:	00d2      	lsls	r2, r2, #3
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	4091      	lsls	r1, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	401a      	ands	r2, r3
 80012f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	401a      	ands	r2, r3
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	2303      	movs	r3, #3
 800130a:	4003      	ands	r3, r0
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001310:	481f      	ldr	r0, [pc, #124]	; (8001390 <__NVIC_SetPriority+0xd4>)
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	430a      	orrs	r2, r1
 800131c:	33c0      	adds	r3, #192	; 0xc0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001322:	e031      	b.n	8001388 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <__NVIC_SetPriority+0xd8>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	0019      	movs	r1, r3
 800132c:	230f      	movs	r3, #15
 800132e:	400b      	ands	r3, r1
 8001330:	3b08      	subs	r3, #8
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3306      	adds	r3, #6
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	18d3      	adds	r3, r2, r3
 800133a:	3304      	adds	r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	0011      	movs	r1, r2
 8001344:	2203      	movs	r2, #3
 8001346:	400a      	ands	r2, r1
 8001348:	00d2      	lsls	r2, r2, #3
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	4091      	lsls	r1, r2
 800134e:	000a      	movs	r2, r1
 8001350:	43d2      	mvns	r2, r2
 8001352:	401a      	ands	r2, r3
 8001354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	019b      	lsls	r3, r3, #6
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	401a      	ands	r2, r3
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	2303      	movs	r3, #3
 8001366:	4003      	ands	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <__NVIC_SetPriority+0xd8>)
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	001c      	movs	r4, r3
 8001374:	230f      	movs	r3, #15
 8001376:	4023      	ands	r3, r4
 8001378:	3b08      	subs	r3, #8
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	430a      	orrs	r2, r1
 800137e:	3306      	adds	r3, #6
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	18c3      	adds	r3, r0, r3
 8001384:	3304      	adds	r3, #4
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b003      	add	sp, #12
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <LL_I2C_EnableClockStretching>:
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <LL_I2C_EnableClockStretching+0x1c>)
 80013a6:	401a      	ands	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	fffdffff 	.word	0xfffdffff

080013b8 <LL_I2C_DisableGeneralCall>:
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <LL_I2C_DisableGeneralCall+0x1c>)
 80013c6:	401a      	ands	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	fff7ffff 	.word	0xfff7ffff

080013d8 <LL_I2C_SetOwnAddress2>:
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <LL_I2C_SetOwnAddress2+0x28>)
 80013ea:	401a      	ands	r2, r3
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	430b      	orrs	r3, r1
 80013f2:	431a      	orrs	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	60da      	str	r2, [r3, #12]
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	fffff801 	.word	0xfffff801

08001404 <LL_I2C_DisableOwnAddress2>:
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <LL_I2C_DisableOwnAddress2+0x1c>)
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	60da      	str	r2, [r3, #12]
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	ffff7fff 	.word	0xffff7fff

08001424 <LL_I2C_EnableAutoEndMode>:
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	0492      	lsls	r2, r2, #18
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	605a      	str	r2, [r3, #4]
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <LL_RCC_HSI_Enable+0x18>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <LL_RCC_HSI_Enable+0x18>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40021000 	.word	0x40021000

08001460 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <LL_RCC_HSI_IsReady+0x1c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2202      	movs	r2, #2
 800146a:	4013      	ands	r3, r2
 800146c:	3b02      	subs	r3, #2
 800146e:	425a      	negs	r2, r3
 8001470:	4153      	adcs	r3, r2
 8001472:	b2db      	uxtb	r3, r3
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	40021000 	.word	0x40021000

08001480 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	22f8      	movs	r2, #248	; 0xf8
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	00da      	lsls	r2, r3, #3
 8001496:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000

080014a8 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CR2          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI48ON);
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <LL_RCC_HSI48_Enable+0x18>)
 80014ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <LL_RCC_HSI48_Enable+0x18>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0249      	lsls	r1, r1, #9
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000

080014c4 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CR2          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI48RDY) == (RCC_CR2_HSI48RDY));
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <LL_RCC_HSI48_IsReady+0x20>)
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	029b      	lsls	r3, r3, #10
 80014d0:	4013      	ands	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <LL_RCC_HSI48_IsReady+0x24>)
 80014d4:	4694      	mov	ip, r2
 80014d6:	4463      	add	r3, ip
 80014d8:	425a      	negs	r2, r3
 80014da:	4153      	adcs	r3, r2
 80014dc:	b2db      	uxtb	r3, r3
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	fffe0000 	.word	0xfffe0000

080014ec <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <LL_RCC_SetSysClkSource+0x24>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	4393      	bics	r3, r2
 80014fc:	0019      	movs	r1, r3
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <LL_RCC_SetSysClkSource+0x24>)
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	40021000 	.word	0x40021000

08001514 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <LL_RCC_GetSysClkSource+0x14>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	220c      	movs	r2, #12
 800151e:	4013      	ands	r3, r2
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	40021000 	.word	0x40021000

0800152c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <LL_RCC_SetAHBPrescaler+0x24>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	22f0      	movs	r2, #240	; 0xf0
 800153a:	4393      	bics	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LL_RCC_SetAHBPrescaler+0x24>)
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40021000 	.word	0x40021000

08001554 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <LL_RCC_SetAPB1Prescaler+0x24>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001562:	4013      	ands	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40021000 	.word	0x40021000
 800157c:	fffff8ff 	.word	0xfffff8ff

08001580 <LL_RCC_SetUSBClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_USBSW, USBxSource);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <LL_RCC_SetUSBClockSource+0x24>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <LL_RCC_SetUSBClockSource+0x24>)
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	430a      	orrs	r2, r1
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40021000 	.word	0x40021000

080015a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <LL_RCC_PLL_Enable+0x18>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <LL_RCC_PLL_Enable+0x18>)
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	0449      	lsls	r1, r1, #17
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000

080015c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <LL_RCC_PLL_IsReady+0x24>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	049b      	lsls	r3, r3, #18
 80015d0:	4013      	ands	r3, r2
 80015d2:	22fe      	movs	r2, #254	; 0xfe
 80015d4:	0612      	lsls	r2, r2, #24
 80015d6:	4694      	mov	ip, r2
 80015d8:	4463      	add	r3, ip
 80015da:	425a      	negs	r2, r3
 80015dc:	4153      	adcs	r3, r2
 80015de:	b2db      	uxtb	r3, r3
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	40021000 	.word	0x40021000

080015ec <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 80015fe:	4013      	ands	r3, r2
 8001600:	0019      	movs	r1, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	431a      	orrs	r2, r3
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	220f      	movs	r2, #15
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	430a      	orrs	r2, r1
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b004      	add	sp, #16
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	ffc27fff 	.word	0xffc27fff

08001630 <LL_AHB1_GRP1_EnableClock>:
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <LL_AHB1_GRP1_EnableClock+0x28>)
 800163a:	6959      	ldr	r1, [r3, #20]
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <LL_AHB1_GRP1_EnableClock+0x28>)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	430a      	orrs	r2, r1
 8001642:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b004      	add	sp, #16
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000

0800165c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <LL_APB1_GRP1_EnableClock+0x28>)
 8001666:	69d9      	ldr	r1, [r3, #28]
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <LL_APB1_GRP1_EnableClock+0x28>)
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	430a      	orrs	r2, r1
 800166e:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <LL_APB1_GRP1_EnableClock+0x28>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4013      	ands	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000

08001688 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <LL_SYSCFG_SetEXTISource+0x48>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	21ff      	movs	r1, #255	; 0xff
 8001698:	400b      	ands	r3, r1
 800169a:	3302      	adds	r3, #2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	589b      	ldr	r3, [r3, r2]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	0c12      	lsrs	r2, r2, #16
 80016a4:	210f      	movs	r1, #15
 80016a6:	4091      	lsls	r1, r2
 80016a8:	000a      	movs	r2, r1
 80016aa:	43d2      	mvns	r2, r2
 80016ac:	401a      	ands	r2, r3
 80016ae:	0011      	movs	r1, r2
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	0c1b      	lsrs	r3, r3, #16
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	409a      	lsls	r2, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <LL_SYSCFG_SetEXTISource+0x48>)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	24ff      	movs	r4, #255	; 0xff
 80016be:	4023      	ands	r3, r4
 80016c0:	430a      	orrs	r2, r1
 80016c2:	3302      	adds	r3, #2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	501a      	str	r2, [r3, r0]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b003      	add	sp, #12
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	40010000 	.word	0x40010000

080016d4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <LL_FLASH_SetLatency+0x24>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4393      	bics	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <LL_FLASH_SetLatency+0x24>)
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40022000 	.word	0x40022000

080016fc <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <LL_FLASH_GetLatency+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40022000 	.word	0x40022000

08001714 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2210      	movs	r2, #16
 8001724:	4393      	bics	r3, r2
 8001726:	001a      	movs	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}

08001738 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2208      	movs	r2, #8
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <LL_TIM_DisableARRPreload>:
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	4393      	bics	r3, r2
 8001764:	001a      	movs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}

08001772 <LL_TIM_SetTriggerOutput>:
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2270      	movs	r2, #112	; 0x70
 8001782:	4393      	bics	r3, r2
 8001784:	001a      	movs	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	605a      	str	r2, [r3, #4]
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}

08001796 <LL_TIM_DisableMasterSlaveMode>:
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	4393      	bics	r3, r2
 80017a6:	001a      	movs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LL_TIM_EnableIT_UPDATE>:
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	60da      	str	r2, [r3, #12]
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <LL_GPIO_SetPinMode>:
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	435b      	muls	r3, r3
 80017e4:	001a      	movs	r2, r3
 80017e6:	0013      	movs	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	189b      	adds	r3, r3, r2
 80017ec:	43db      	mvns	r3, r3
 80017ee:	400b      	ands	r3, r1
 80017f0:	001a      	movs	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	435b      	muls	r3, r3
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	434b      	muls	r3, r1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bd80      	pop	{r7, pc}

08001808 <LL_GPIO_SetPinPull>:
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	68d9      	ldr	r1, [r3, #12]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	435b      	muls	r3, r3
 800181c:	001a      	movs	r2, r3
 800181e:	0013      	movs	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	189b      	adds	r3, r3, r2
 8001824:	43db      	mvns	r3, r3
 8001826:	400b      	ands	r3, r1
 8001828:	001a      	movs	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	435b      	muls	r3, r3
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	434b      	muls	r3, r1
 8001832:	431a      	orrs	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	60da      	str	r2, [r3, #12]
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}

08001840 <LL_GPIO_ResetOutputPin>:
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f000 fd2e 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f814 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f000 fa32 	bl	8001ccc <MX_GPIO_Init>
  MX_I2C2_Init();
 8001868:	f000 f860 	bl	800192c <MX_I2C2_Init>
  MX_SPI2_Init();
 800186c:	f000 f8e8 	bl	8001a40 <MX_SPI2_Init>
  MX_TSC_Init();
 8001870:	f000 f9c2 	bl	8001bf8 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8001874:	f000 fa04 	bl	8001c80 <MX_USB_PCD_Init>
  MX_TIM6_Init();
 8001878:	f000 f982 	bl	8001b80 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  BSL_Startup();
 800187c:	f7fe ffd2 	bl	8000824 <BSL_Startup>

  BSL_Config();
 8001880:	f7fe ffdf 	bl	8000842 <BSL_Config>

  BSL_Control();
 8001884:	f7fe ffe4 	bl	8000850 <BSL_Control>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001888:	e7fe      	b.n	8001888 <main+0x30>
	...

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff ff1f 	bl	80016d4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	f7ff ff30 	bl	80016fc <LL_FLASH_GetLatency>
 800189c:	0003      	movs	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d1fa      	bne.n	8001898 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80018a2:	f7ff fdcf 	bl	8001444 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	f7ff fdda 	bl	8001460 <LL_RCC_HSI_IsReady>
 80018ac:	0003      	movs	r3, r0
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d1fa      	bne.n	80018a8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80018b2:	2010      	movs	r0, #16
 80018b4:	f7ff fde4 	bl	8001480 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI48_Enable();
 80018b8:	f7ff fdf6 	bl	80014a8 <LL_RCC_HSI48_Enable>

   /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	f7ff fe01 	bl	80014c4 <LL_RCC_HSI48_IsReady>
 80018c2:	0003      	movs	r3, r0
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d1fa      	bne.n	80018be <SystemClock_Config+0x32>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PREDIV_DIV_1);
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	0359      	lsls	r1, r3, #13
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	2200      	movs	r2, #0
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff fe8a 	bl	80015ec <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80018d8:	f7ff fe66 	bl	80015a8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	f7ff fe71 	bl	80015c4 <LL_RCC_PLL_IsReady>
 80018e2:	0003      	movs	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d1fa      	bne.n	80018de <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fe1f 	bl	800152c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fe30 	bl	8001554 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7ff fdf9 	bl	80014ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	f7ff fe0a 	bl	8001514 <LL_RCC_GetSysClkSource>
 8001900:	0003      	movs	r3, r0
 8001902:	2b08      	cmp	r3, #8
 8001904:	d1fa      	bne.n	80018fc <SystemClock_Config+0x70>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <SystemClock_Config+0x9c>)
 8001908:	0018      	movs	r0, r3
 800190a:	f001 fdff 	bl	800350c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800190e:	2000      	movs	r0, #0
 8001910:	f000 fce8 	bl	80022e4 <HAL_InitTick>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001918:	f000 fb3a 	bl	8001f90 <Error_Handler>
  }
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_HSI48);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fe2f 	bl	8001580 <LL_RCC_SetUSBClockSource>
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	02dc6c00 	.word	0x02dc6c00

0800192c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b08f      	sub	sp, #60	; 0x3c
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001932:	241c      	movs	r4, #28
 8001934:	193b      	adds	r3, r7, r4
 8001936:	0018      	movs	r0, r3
 8001938:	231c      	movs	r3, #28
 800193a:	001a      	movs	r2, r3
 800193c:	2100      	movs	r1, #0
 800193e:	f001 fe1d 	bl	800357c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	0018      	movs	r0, r3
 8001946:	2318      	movs	r3, #24
 8001948:	001a      	movs	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	f001 fe16 	bl	800357c <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	02db      	lsls	r3, r3, #11
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff fe6b 	bl	8001630 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	00d2      	lsls	r2, r2, #3
 8001960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2202      	movs	r2, #2
 8001966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2203      	movs	r2, #3
 800196c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2201      	movs	r2, #1
 8001972:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2201      	movs	r2, #1
 8001978:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2201      	movs	r2, #1
 800197e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <MX_I2C2_Init+0x108>)
 8001984:	0019      	movs	r1, r3
 8001986:	0010      	movs	r0, r2
 8001988:	f001 fac8 	bl	8002f1c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2202      	movs	r2, #2
 8001998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2203      	movs	r2, #3
 800199e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2201      	movs	r2, #1
 80019a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2201      	movs	r2, #1
 80019aa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2201      	movs	r2, #1
 80019b0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <MX_I2C2_Init+0x108>)
 80019b6:	0019      	movs	r1, r3
 80019b8:	0010      	movs	r0, r2
 80019ba:	f001 faaf 	bl	8002f1c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	03db      	lsls	r3, r3, #15
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7ff fe4a 	bl	800165c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_I2C2_Init+0x10c>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff fd1a 	bl	8001404 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_I2C2_Init+0x10c>)
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7ff fcf0 	bl	80013b8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_I2C2_Init+0x10c>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff fcdc 	bl	8001398 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019e0:	0021      	movs	r1, r4
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x2010091A;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <MX_I2C2_Init+0x110>)
 80019ec:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <MX_I2C2_Init+0x10c>)
 8001a10:	0019      	movs	r1, r3
 8001a12:	0010      	movs	r0, r2
 8001a14:	f001 fb7c 	bl	8003110 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_I2C2_Init+0x10c>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff fd02 	bl	8001424 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <MX_I2C2_Init+0x10c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff fcd6 	bl	80013d8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b00f      	add	sp, #60	; 0x3c
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	48000400 	.word	0x48000400
 8001a38:	40005800 	.word	0x40005800
 8001a3c:	2010091a 	.word	0x2010091a

08001a40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b091      	sub	sp, #68	; 0x44
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a46:	2418      	movs	r4, #24
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	2328      	movs	r3, #40	; 0x28
 8001a4e:	001a      	movs	r2, r3
 8001a50:	2100      	movs	r1, #0
 8001a52:	f001 fd93 	bl	800357c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	003b      	movs	r3, r7
 8001a58:	0018      	movs	r0, r3
 8001a5a:	2318      	movs	r3, #24
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f001 fd8c 	bl	800357c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	01db      	lsls	r3, r3, #7
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fdf7 	bl	800165c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	02db      	lsls	r3, r3, #11
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fddc 	bl	8001630 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001a78:	003b      	movs	r3, r7
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	0192      	lsls	r2, r2, #6
 8001a7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a80:	003b      	movs	r3, r7
 8001a82:	2202      	movs	r2, #2
 8001a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a86:	003b      	movs	r3, r7
 8001a88:	2203      	movs	r2, #3
 8001a8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a8c:	003b      	movs	r3, r7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a92:	003b      	movs	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001a98:	003b      	movs	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	003b      	movs	r3, r7
 8001aa0:	4a35      	ldr	r2, [pc, #212]	; (8001b78 <MX_SPI2_Init+0x138>)
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	0010      	movs	r0, r2
 8001aa6:	f001 fa39 	bl	8002f1c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_MISO_Pin;
 8001aaa:	003b      	movs	r3, r7
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	01d2      	lsls	r2, r2, #7
 8001ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ab2:	003b      	movs	r3, r7
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ab8:	003b      	movs	r3, r7
 8001aba:	2203      	movs	r2, #3
 8001abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001abe:	003b      	movs	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac4:	003b      	movs	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001aca:	003b      	movs	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	003b      	movs	r3, r7
 8001ad2:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <MX_SPI2_Init+0x138>)
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	0010      	movs	r0, r2
 8001ad8:	f001 fa20 	bl	8002f1c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001adc:	003b      	movs	r3, r7
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0212      	lsls	r2, r2, #8
 8001ae2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001aea:	003b      	movs	r3, r7
 8001aec:	2203      	movs	r2, #3
 8001aee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001af0:	003b      	movs	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af6:	003b      	movs	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001afc:	003b      	movs	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001b02:	003b      	movs	r3, r7
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <MX_SPI2_Init+0x138>)
 8001b06:	0019      	movs	r1, r3
 8001b08:	0010      	movs	r0, r2
 8001b0a:	f001 fa07 	bl	8002f1c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b0e:	0021      	movs	r1, r4
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2282      	movs	r2, #130	; 0x82
 8001b1a:	0052      	lsls	r2, r2, #1
 8001b1c:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	22c0      	movs	r2, #192	; 0xc0
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2207      	movs	r2, #7
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <MX_SPI2_Init+0x13c>)
 8001b56:	0019      	movs	r1, r3
 8001b58:	0010      	movs	r0, r2
 8001b5a:	f001 fb4f 	bl	80031fc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_SPI2_Init+0x13c>)
 8001b60:	2100      	movs	r1, #0
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff fdd6 	bl	8001714 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <MX_SPI2_Init+0x13c>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff fde4 	bl	8001738 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b011      	add	sp, #68	; 0x44
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	40003800 	.word	0x40003800

08001b80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	0018      	movs	r0, r3
 8001b8a:	2314      	movs	r3, #20
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f001 fcf4 	bl	800357c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001b94:	2010      	movs	r0, #16
 8001b96:	f7ff fd61 	bl	800165c <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2011      	movs	r0, #17
 8001b9e:	f7ff fb8d 	bl	80012bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ba2:	2011      	movs	r0, #17
 8001ba4:	f7ff fb70 	bl	8001288 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	222f      	movs	r2, #47	; 0x2f
 8001bac:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 0xffff-LL_TIM_IC_FILTER_FDIV1_N2;
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <MX_TIM6_Init+0x70>)
 8001bb8:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <MX_TIM6_Init+0x74>)
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	0010      	movs	r0, r2
 8001bc2:	f001 fbb9 	bl	8003338 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_TIM6_Init+0x74>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7ff fdc3 	bl	8001754 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_TIM6_Init+0x74>)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f7ff fdcd 	bl	8001772 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_TIM6_Init+0x74>)
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7ff fddb 	bl	8001796 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM6);
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <MX_TIM6_Init+0x74>)
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff fde6 	bl	80017b4 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM6_Init 2 */

}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b006      	add	sp, #24
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	fff0ffff 	.word	0xfff0ffff
 8001bf4:	40001000 	.word	0x40001000

08001bf8 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <MX_TSC_Init+0x80>)
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <MX_TSC_Init+0x84>)
 8001c00:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	0552      	lsls	r2, r2, #21
 8001c08:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0452      	lsls	r2, r2, #17
 8001c10:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	0192      	lsls	r2, r2, #6
 8001c2a:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c2e:	22a0      	movs	r2, #160	; 0xa0
 8001c30:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c46:	222c      	movs	r2, #44	; 0x2c
 8001c48:	2100      	movs	r1, #0
 8001c4a:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c4e:	2291      	movs	r2, #145	; 0x91
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c5c:	2291      	movs	r2, #145	; 0x91
 8001c5e:	00d2      	lsls	r2, r2, #3
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <MX_TSC_Init+0x80>)
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 fee9 	bl	8002a3c <HAL_TSC_Init>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8001c6e:	f000 f98f 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000864 	.word	0x20000864
 8001c7c:	40024000 	.word	0x40024000

08001c80 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <MX_USB_PCD_Init+0x48>)
 8001c88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001c92:	2202      	movs	r2, #2
 8001c94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001c98:	2202      	movs	r2, #2
 8001c9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <MX_USB_PCD_Init+0x44>)
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 fd89 	bl	80027c8 <HAL_PCD_Init>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001cba:	f000 f969 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000570 	.word	0x20000570
 8001cc8:	40005c00 	.word	0x40005c00

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001cd2:	2418      	movs	r4, #24
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	2308      	movs	r3, #8
 8001cda:	001a      	movs	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f001 fc4d 	bl	800357c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	003b      	movs	r3, r7
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	2318      	movs	r3, #24
 8001ce8:	001a      	movs	r2, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	f001 fc46 	bl	800357c <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fc9b 	bl	8001630 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	029b      	lsls	r3, r3, #10
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff fc96 	bl	8001630 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	02db      	lsls	r3, r3, #11
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff fc91 	bl	8001630 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin);
 8001d0e:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff fd94 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EXT_RESET_GPIO_Port, EXT_RESET_Pin);
 8001d18:	4b9b      	ldr	r3, [pc, #620]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff fd8f 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8001d22:	4b9a      	ldr	r3, [pc, #616]	; (8001f8c <MX_GPIO_Init+0x2c0>)
 8001d24:	2104      	movs	r1, #4
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff fd8a 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8001d2c:	4b96      	ldr	r3, [pc, #600]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fd85 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD6_GPIO_Port, LD6_Pin);
 8001d36:	4b94      	ldr	r3, [pc, #592]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fd80 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD4_GPIO_Port, LD4_Pin);
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4a90      	ldr	r2, [pc, #576]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001d46:	0019      	movs	r1, r3
 8001d48:	0010      	movs	r0, r2
 8001d4a:	f7ff fd79 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD5_GPIO_Port, LD5_Pin);
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4a8d      	ldr	r2, [pc, #564]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001d54:	0019      	movs	r1, r3
 8001d56:	0010      	movs	r0, r2
 8001d58:	f7ff fd72 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 8001d5c:	003b      	movs	r3, r7
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d62:	003b      	movs	r3, r7
 8001d64:	2201      	movs	r2, #1
 8001d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d68:	003b      	movs	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d6e:	003b      	movs	r3, r7
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d74:	003b      	movs	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	003b      	movs	r3, r7
 8001d7c:	4a82      	ldr	r2, [pc, #520]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001d7e:	0019      	movs	r1, r3
 8001d80:	0010      	movs	r0, r2
 8001d82:	f001 f8cb 	bl	8002f1c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXT_RESET_Pin;
 8001d86:	003b      	movs	r3, r7
 8001d88:	2220      	movs	r2, #32
 8001d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d8c:	003b      	movs	r3, r7
 8001d8e:	2201      	movs	r2, #1
 8001d90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d92:	003b      	movs	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d98:	003b      	movs	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d9e:	003b      	movs	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(EXT_RESET_GPIO_Port, &GPIO_InitStruct);
 8001da4:	003b      	movs	r3, r7
 8001da6:	4a78      	ldr	r2, [pc, #480]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001da8:	0019      	movs	r1, r3
 8001daa:	0010      	movs	r0, r2
 8001dac:	f001 f8b6 	bl	8002f1c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DHT11_IN_Pin;
 8001db0:	003b      	movs	r3, r7
 8001db2:	2204      	movs	r2, #4
 8001db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001db6:	003b      	movs	r3, r7
 8001db8:	2201      	movs	r2, #1
 8001dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dbc:	003b      	movs	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dc2:	003b      	movs	r3, r7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dc8:	003b      	movs	r3, r7
 8001dca:	2201      	movs	r2, #1
 8001dcc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DHT11_IN_GPIO_Port, &GPIO_InitStruct);
 8001dce:	003b      	movs	r3, r7
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <MX_GPIO_Init+0x2c0>)
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	f001 f8a1 	bl	8002f1c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8001dda:	003b      	movs	r3, r7
 8001ddc:	2240      	movs	r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001de0:	003b      	movs	r3, r7
 8001de2:	2201      	movs	r2, #1
 8001de4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001de6:	003b      	movs	r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dec:	003b      	movs	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df2:	003b      	movs	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001df8:	003b      	movs	r3, r7
 8001dfa:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	0010      	movs	r0, r2
 8001e00:	f001 f88c 	bl	8002f1c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD6_Pin;
 8001e04:	003b      	movs	r3, r7
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e0a:	003b      	movs	r3, r7
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e10:	003b      	movs	r3, r7
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e16:	003b      	movs	r3, r7
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e1c:	003b      	movs	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 8001e22:	003b      	movs	r3, r7
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001e26:	0019      	movs	r1, r3
 8001e28:	0010      	movs	r0, r2
 8001e2a:	f001 f877 	bl	8002f1c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin;
 8001e2e:	003b      	movs	r3, r7
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0052      	lsls	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e36:	003b      	movs	r3, r7
 8001e38:	2201      	movs	r2, #1
 8001e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e3c:	003b      	movs	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e42:	003b      	movs	r3, r7
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e48:	003b      	movs	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	003b      	movs	r3, r7
 8001e50:	4a4d      	ldr	r2, [pc, #308]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001e52:	0019      	movs	r1, r3
 8001e54:	0010      	movs	r0, r2
 8001e56:	f001 f861 	bl	8002f1c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD5_Pin;
 8001e5a:	003b      	movs	r3, r7
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e62:	003b      	movs	r3, r7
 8001e64:	2201      	movs	r2, #1
 8001e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e68:	003b      	movs	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e6e:	003b      	movs	r3, r7
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e74:	003b      	movs	r3, r7
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	003b      	movs	r3, r7
 8001e7c:	4a42      	ldr	r2, [pc, #264]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001e7e:	0019      	movs	r1, r3
 8001e80:	0010      	movs	r0, r2
 8001e82:	f001 f84b 	bl	8002f1c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 8001e86:	003b      	movs	r3, r7
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e8e:	003b      	movs	r3, r7
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e94:	003b      	movs	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	003a      	movs	r2, r7
 8001e9c:	2390      	movs	r3, #144	; 0x90
 8001e9e:	05db      	lsls	r3, r3, #23
 8001ea0:	0011      	movs	r1, r2
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f001 f83a 	bl	8002f1c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE1);
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	02db      	lsls	r3, r3, #11
 8001eac:	0019      	movs	r1, r3
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f7ff fbea 	bl	8001688 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	031b      	lsls	r3, r3, #12
 8001eb8:	0019      	movs	r1, r3
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f7ff fbe4 	bl	8001688 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fbe0 	bl	8001688 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_PULL_NO);
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2102      	movs	r1, #2
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fc9a 	bl	8001808 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2104      	movs	r1, #4
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff fc94 	bl	8001808 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001ee0:	2390      	movs	r3, #144	; 0x90
 8001ee2:	05db      	lsls	r3, r3, #23
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fc8d 	bl	8001808 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_MODE_INPUT);
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff fc6b 	bl	80017d0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <MX_GPIO_Init+0x2bc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	2104      	movs	r1, #4
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff fc65 	bl	80017d0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001f06:	2390      	movs	r3, #144	; 0x90
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7ff fc5e 	bl	80017d0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001f14:	0021      	movs	r1, r4
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2202      	movs	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	2201      	movs	r2, #1
 8001f20:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	2201      	movs	r2, #1
 8001f26:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f2e:	000c      	movs	r4, r1
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 feb0 	bl	8002c98 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001f38:	0021      	movs	r1, r4
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	2201      	movs	r2, #1
 8001f44:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2201      	movs	r2, #1
 8001f4a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	2201      	movs	r2, #1
 8001f50:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f52:	000c      	movs	r4, r1
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 fe9e 	bl	8002c98 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001f5c:	0021      	movs	r1, r4
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	2201      	movs	r2, #1
 8001f68:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2201      	movs	r2, #1
 8001f74:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 fe8d 	bl	8002c98 <LL_EXTI_Init>

}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b009      	add	sp, #36	; 0x24
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000400 	.word	0x48000400

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <Error_Handler+0x8>
	...

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_MspInit+0x44>)
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_MspInit+0x44>)
 8001fa8:	2101      	movs	r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_MspInit+0x44>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_MspInit+0x44>)
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_MspInit+0x44>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	0549      	lsls	r1, r1, #21
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	61da      	str	r2, [r3, #28]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_MspInit+0x44>)
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	2414      	movs	r4, #20
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	2314      	movs	r3, #20
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	f001 fac0 	bl	800357c <memset>
  if(htsc->Instance==TSC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a44      	ldr	r2, [pc, #272]	; (8002114 <HAL_TSC_MspInit+0x130>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d000      	beq.n	8002008 <HAL_TSC_MspInit+0x24>
 8002006:	e080      	b.n	800210a <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_TSC_MspInit+0x134>)
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	4b42      	ldr	r3, [pc, #264]	; (8002118 <HAL_TSC_MspInit+0x134>)
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	0449      	lsls	r1, r1, #17
 8002012:	430a      	orrs	r2, r1
 8002014:	615a      	str	r2, [r3, #20]
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_TSC_MspInit+0x134>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	045b      	lsls	r3, r3, #17
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <HAL_TSC_MspInit+0x134>)
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_TSC_MspInit+0x134>)
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0289      	lsls	r1, r1, #10
 800202e:	430a      	orrs	r2, r1
 8002030:	615a      	str	r2, [r3, #20]
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_TSC_MspInit+0x134>)
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	029b      	lsls	r3, r3, #10
 800203a:	4013      	ands	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_TSC_MspInit+0x134>)
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_TSC_MspInit+0x134>)
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	02c9      	lsls	r1, r1, #11
 800204a:	430a      	orrs	r2, r1
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_TSC_MspInit+0x134>)
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	02db      	lsls	r3, r3, #11
 8002056:	4013      	ands	r3, r2
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800205c:	193b      	adds	r3, r7, r4
 800205e:	2244      	movs	r2, #68	; 0x44
 8002060:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	193b      	adds	r3, r7, r4
 8002064:	2202      	movs	r2, #2
 8002066:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	193b      	adds	r3, r7, r4
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	193b      	adds	r3, r7, r4
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8002074:	193b      	adds	r3, r7, r4
 8002076:	2203      	movs	r2, #3
 8002078:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	193a      	adds	r2, r7, r4
 800207c:	2390      	movs	r3, #144	; 0x90
 800207e:	05db      	lsls	r3, r3, #23
 8002080:	0011      	movs	r1, r2
 8002082:	0018      	movs	r0, r3
 8002084:	f000 fa28 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8002088:	193b      	adds	r3, r7, r4
 800208a:	2288      	movs	r2, #136	; 0x88
 800208c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208e:	193b      	adds	r3, r7, r4
 8002090:	2212      	movs	r2, #18
 8002092:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	193b      	adds	r3, r7, r4
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	193b      	adds	r3, r7, r4
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	2203      	movs	r2, #3
 80020a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	193a      	adds	r2, r7, r4
 80020a8:	2390      	movs	r3, #144	; 0x90
 80020aa:	05db      	lsls	r3, r3, #23
 80020ac:	0011      	movs	r1, r2
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 fa12 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	193b      	adds	r3, r7, r4
 80020bc:	2202      	movs	r2, #2
 80020be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	193b      	adds	r3, r7, r4
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80020cc:	193b      	adds	r3, r7, r4
 80020ce:	2203      	movs	r2, #3
 80020d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	193b      	adds	r3, r7, r4
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_TSC_MspInit+0x138>)
 80020d6:	0019      	movs	r1, r3
 80020d8:	0010      	movs	r0, r2
 80020da:	f000 f9fd 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020de:	0021      	movs	r1, r4
 80020e0:	187b      	adds	r3, r7, r1
 80020e2:	2202      	movs	r2, #2
 80020e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	2212      	movs	r2, #18
 80020ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2203      	movs	r2, #3
 80020fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_TSC_MspInit+0x138>)
 8002102:	0019      	movs	r1, r3
 8002104:	0010      	movs	r0, r2
 8002106:	f000 f9e7 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b00b      	add	sp, #44	; 0x2c
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40024000 	.word	0x40024000
 8002118:	40021000 	.word	0x40021000
 800211c:	48000400 	.word	0x48000400

08002120 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_PCD_MspInit+0x38>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10d      	bne.n	800214e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_PCD_MspInit+0x3c>)
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_PCD_MspInit+0x3c>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0409      	lsls	r1, r1, #16
 800213c:	430a      	orrs	r2, r1
 800213e:	61da      	str	r2, [r3, #28]
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_PCD_MspInit+0x3c>)
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	041b      	lsls	r3, r3, #16
 8002148:	4013      	ands	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	40005c00 	.word	0x40005c00
 800215c:	40021000 	.word	0x40021000

08002160 <LL_TIM_ClearFlag_UPDATE>:
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	4252      	negs	r2, r2
 800216e:	611a      	str	r2, [r3, #16]
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b002      	add	sp, #8
 8002176:	bd80      	pop	{r7, pc}

08002178 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2201      	movs	r2, #1
 8002186:	4013      	ands	r3, r2
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}

0800219a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800219e:	e7fe      	b.n	800219e <NMI_Handler+0x4>

080021a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <HardFault_Handler+0x4>

080021a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSL_Tick();
 80021be:	f7ff f825 	bl	800120c <BSL_Tick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c2:	f000 f8c3 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	 if(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 1)
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <TIM6_DAC_IRQHandler+0x20>)
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7ff ffd0 	bl	8002178 <LL_TIM_IsActiveFlag_UPDATE>
 80021d8:	0003      	movs	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d103      	bne.n	80021e6 <TIM6_DAC_IRQHandler+0x1a>
	  {
	    /* Clear the update interrupt flag*/
	    LL_TIM_ClearFlag_UPDATE(TIM6);
 80021de:	4b03      	ldr	r3, [pc, #12]	; (80021ec <TIM6_DAC_IRQHandler+0x20>)
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff ffbd 	bl	8002160 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40001000 	.word	0x40001000

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d207      	bcs.n	8002230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002220:	f001 f982 	bl	8003528 <__errno>
 8002224:	0003      	movs	r3, r0
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222a:	2301      	movs	r3, #1
 800222c:	425b      	negs	r3, r3
 800222e:	e009      	b.n	8002244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	18d2      	adds	r2, r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <_sbrk+0x64>)
 8002240:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b006      	add	sp, #24
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20004000 	.word	0x20004000
 8002250:	00000400 	.word	0x00000400
 8002254:	200000b4 	.word	0x200000b4
 8002258:	200008c0 	.word	0x200008c0

0800225c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800226a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800226e:	490e      	ldr	r1, [pc, #56]	; (80022a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <LoopForever+0xe>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002284:	4c0b      	ldr	r4, [pc, #44]	; (80022b4 <LoopForever+0x16>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002292:	f7ff ffe3 	bl	800225c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002296:	f001 f94d 	bl	8003534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800229a:	f7ff fadd 	bl	8001858 <main>

0800229e <LoopForever>:

LoopForever:
    b LoopForever
 800229e:	e7fe      	b.n	800229e <LoopForever>
  ldr   r0, =_estack
 80022a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80022ac:	08004b94 	.word	0x08004b94
  ldr r2, =_sbss
 80022b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80022b4:	200008bc 	.word	0x200008bc

080022b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC1_COMP_IRQHandler>
	...

080022bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_Init+0x24>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_Init+0x24>)
 80022c6:	2110      	movs	r1, #16
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f000 f809 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d2:	f7ff fe63 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	40022000 	.word	0x40022000

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_InitTick+0x5c>)
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_InitTick+0x60>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	0019      	movs	r1, r3
 80022f6:	23fa      	movs	r3, #250	; 0xfa
 80022f8:	0098      	lsls	r0, r3, #2
 80022fa:	f7fd ff0f 	bl	800011c <__udivsi3>
 80022fe:	0003      	movs	r3, r0
 8002300:	0019      	movs	r1, r3
 8002302:	0020      	movs	r0, r4
 8002304:	f7fd ff0a 	bl	800011c <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f8d7 	bl	80024be <HAL_SYSTICK_Config>
 8002310:	1e03      	subs	r3, r0, #0
 8002312:	d001      	beq.n	8002318 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e00f      	b.n	8002338 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d80b      	bhi.n	8002336 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	2301      	movs	r3, #1
 8002322:	425b      	negs	r3, r3
 8002324:	2200      	movs	r2, #0
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f8b4 	bl	8002494 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_InitTick+0x64>)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b003      	add	sp, #12
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	20000008 	.word	0x20000008
 8002344:	20000010 	.word	0x20000010
 8002348:	2000000c 	.word	0x2000000c

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_IncTick+0x1c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	001a      	movs	r2, r3
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x20>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	18d2      	adds	r2, r2, r3
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_IncTick+0x20>)
 800235e:	601a      	str	r2, [r3, #0]
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	20000010 	.word	0x20000010
 800236c:	200008a8 	.word	0x200008a8

08002370 <__NVIC_SetPriority>:
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	0002      	movs	r2, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b7f      	cmp	r3, #127	; 0x7f
 8002384:	d828      	bhi.n	80023d8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002386:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <__NVIC_SetPriority+0xd4>)
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b25b      	sxtb	r3, r3
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	33c0      	adds	r3, #192	; 0xc0
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	589b      	ldr	r3, [r3, r2]
 8002396:	1dfa      	adds	r2, r7, #7
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	0011      	movs	r1, r2
 800239c:	2203      	movs	r2, #3
 800239e:	400a      	ands	r2, r1
 80023a0:	00d2      	lsls	r2, r2, #3
 80023a2:	21ff      	movs	r1, #255	; 0xff
 80023a4:	4091      	lsls	r1, r2
 80023a6:	000a      	movs	r2, r1
 80023a8:	43d2      	mvns	r2, r2
 80023aa:	401a      	ands	r2, r3
 80023ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	401a      	ands	r2, r3
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	0018      	movs	r0, r3
 80023bc:	2303      	movs	r3, #3
 80023be:	4003      	ands	r3, r0
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c4:	481f      	ldr	r0, [pc, #124]	; (8002444 <__NVIC_SetPriority+0xd4>)
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	430a      	orrs	r2, r1
 80023d0:	33c0      	adds	r3, #192	; 0xc0
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	501a      	str	r2, [r3, r0]
}
 80023d6:	e031      	b.n	800243c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <__NVIC_SetPriority+0xd8>)
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	0019      	movs	r1, r3
 80023e0:	230f      	movs	r3, #15
 80023e2:	400b      	ands	r3, r1
 80023e4:	3b08      	subs	r3, #8
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3306      	adds	r3, #6
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	3304      	adds	r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1dfa      	adds	r2, r7, #7
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	0011      	movs	r1, r2
 80023f8:	2203      	movs	r2, #3
 80023fa:	400a      	ands	r2, r1
 80023fc:	00d2      	lsls	r2, r2, #3
 80023fe:	21ff      	movs	r1, #255	; 0xff
 8002400:	4091      	lsls	r1, r2
 8002402:	000a      	movs	r2, r1
 8002404:	43d2      	mvns	r2, r2
 8002406:	401a      	ands	r2, r3
 8002408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	401a      	ands	r2, r3
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	2303      	movs	r3, #3
 800241a:	4003      	ands	r3, r0
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <__NVIC_SetPriority+0xd8>)
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	001c      	movs	r4, r3
 8002428:	230f      	movs	r3, #15
 800242a:	4023      	ands	r3, r4
 800242c:	3b08      	subs	r3, #8
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	430a      	orrs	r2, r1
 8002432:	3306      	adds	r3, #6
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	18c3      	adds	r3, r0, r3
 8002438:	3304      	adds	r3, #4
 800243a:	601a      	str	r2, [r3, #0]
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b003      	add	sp, #12
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1e5a      	subs	r2, r3, #1
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	045b      	lsls	r3, r3, #17
 800245c:	429a      	cmp	r2, r3
 800245e:	d301      	bcc.n	8002464 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002460:	2301      	movs	r3, #1
 8002462:	e010      	b.n	8002486 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <SysTick_Config+0x44>)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	3a01      	subs	r2, #1
 800246a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246c:	2301      	movs	r3, #1
 800246e:	425b      	negs	r3, r3
 8002470:	2103      	movs	r1, #3
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff ff7c 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x44>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x44>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	210f      	movs	r1, #15
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	1c02      	adds	r2, r0, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff ffbf 	bl	800244c <SysTick_Config>
 80024ce:	0003      	movs	r3, r0
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e6:	e155      	b.n	8002794 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4091      	lsls	r1, r2
 80024f2:	000a      	movs	r2, r1
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d100      	bne.n	8002500 <HAL_GPIO_Init+0x28>
 80024fe:	e146      	b.n	800278e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	2b01      	cmp	r3, #1
 800250a:	d005      	beq.n	8002518 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002514:	2b02      	cmp	r3, #2
 8002516:	d130      	bne.n	800257a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	43da      	mvns	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	0013      	movs	r3, r2
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254e:	2201      	movs	r2, #1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
 8002554:	0013      	movs	r3, r2
 8002556:	43da      	mvns	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	2201      	movs	r2, #1
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2203      	movs	r2, #3
 8002580:	4013      	ands	r3, r2
 8002582:	2b03      	cmp	r3, #3
 8002584:	d017      	beq.n	80025b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	409a      	lsls	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	43da      	mvns	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2203      	movs	r2, #3
 80025bc:	4013      	ands	r3, r2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d123      	bne.n	800260a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	58d3      	ldr	r3, [r2, r3]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2207      	movs	r2, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	220f      	movs	r2, #15
 80025da:	409a      	lsls	r2, r3
 80025dc:	0013      	movs	r3, r2
 80025de:	43da      	mvns	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2107      	movs	r1, #7
 80025ee:	400b      	ands	r3, r1
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	6939      	ldr	r1, [r7, #16]
 8002608:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	43da      	mvns	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	401a      	ands	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	0013      	movs	r3, r2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	23c0      	movs	r3, #192	; 0xc0
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d100      	bne.n	800264c <HAL_GPIO_Init+0x174>
 800264a:	e0a0      	b.n	800278e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264c:	4b57      	ldr	r3, [pc, #348]	; (80027ac <HAL_GPIO_Init+0x2d4>)
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	4b56      	ldr	r3, [pc, #344]	; (80027ac <HAL_GPIO_Init+0x2d4>)
 8002652:	2101      	movs	r1, #1
 8002654:	430a      	orrs	r2, r1
 8002656:	619a      	str	r2, [r3, #24]
 8002658:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_GPIO_Init+0x2d4>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2201      	movs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_GPIO_Init+0x2d8>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	589b      	ldr	r3, [r3, r2]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2203      	movs	r2, #3
 8002676:	4013      	ands	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	409a      	lsls	r2, r3
 800267e:	0013      	movs	r3, r2
 8002680:	43da      	mvns	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	2390      	movs	r3, #144	; 0x90
 800268c:	05db      	lsls	r3, r3, #23
 800268e:	429a      	cmp	r2, r3
 8002690:	d019      	beq.n	80026c6 <HAL_GPIO_Init+0x1ee>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_GPIO_Init+0x2dc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0x1ea>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a46      	ldr	r2, [pc, #280]	; (80027b8 <HAL_GPIO_Init+0x2e0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00d      	beq.n	80026be <HAL_GPIO_Init+0x1e6>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a45      	ldr	r2, [pc, #276]	; (80027bc <HAL_GPIO_Init+0x2e4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x1e2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a44      	ldr	r2, [pc, #272]	; (80027c0 <HAL_GPIO_Init+0x2e8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_GPIO_Init+0x1de>
 80026b2:	2304      	movs	r3, #4
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_Init+0x1f0>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x1f0>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x1f0>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x1f0>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x1f0>
 80026c6:	2300      	movs	r3, #0
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	2103      	movs	r1, #3
 80026cc:	400a      	ands	r2, r1
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_GPIO_Init+0x2d8>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	4013      	ands	r3, r2
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43da      	mvns	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	4013      	ands	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002734:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	43da      	mvns	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	035b      	lsls	r3, r3, #13
 8002752:	4013      	ands	r3, r2
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43da      	mvns	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	039b      	lsls	r3, r3, #14
 800277c:	4013      	ands	r3, r2
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_GPIO_Init+0x2ec>)
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	40da      	lsrs	r2, r3
 800279c:	1e13      	subs	r3, r2, #0
 800279e:	d000      	beq.n	80027a2 <HAL_GPIO_Init+0x2ca>
 80027a0:	e6a2      	b.n	80024e8 <HAL_GPIO_Init+0x10>
  } 
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b006      	add	sp, #24
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010000 	.word	0x40010000
 80027b4:	48000400 	.word	0x48000400
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48000c00 	.word	0x48000c00
 80027c0:	48001000 	.word	0x48001000
 80027c4:	40010400 	.word	0x40010400

080027c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	b08b      	sub	sp, #44	; 0x2c
 80027cc:	af06      	add	r7, sp, #24
 80027ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0ff      	b.n	80029da <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a81      	ldr	r2, [pc, #516]	; (80029e4 <HAL_PCD_Init+0x21c>)
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d108      	bne.n	80027f8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	23aa      	movs	r3, #170	; 0xaa
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	2100      	movs	r1, #0
 80027ee:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fc94 	bl	8002120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a7a      	ldr	r2, [pc, #488]	; (80029e4 <HAL_PCD_Init+0x21c>)
 80027fc:	2103      	movs	r1, #3
 80027fe:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fe19 	bl	800343c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	230f      	movs	r3, #15
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e058      	b.n	80028c6 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002814:	200f      	movs	r0, #15
 8002816:	183b      	adds	r3, r7, r0
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	0013      	movs	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	189b      	adds	r3, r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	18cb      	adds	r3, r1, r3
 8002828:	3301      	adds	r3, #1
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800282e:	183b      	adds	r3, r7, r0
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	0013      	movs	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	189b      	adds	r3, r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	183a      	adds	r2, r7, r0
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002844:	0004      	movs	r4, r0
 8002846:	183b      	adds	r3, r7, r0
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	193b      	adds	r3, r7, r4
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b298      	uxth	r0, r3
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	0013      	movs	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	189b      	adds	r3, r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	18cb      	adds	r3, r1, r3
 800285c:	3336      	adds	r3, #54	; 0x36
 800285e:	1c02      	adds	r2, r0, #0
 8002860:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	0013      	movs	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	189b      	adds	r3, r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	18cb      	adds	r3, r1, r3
 8002874:	3303      	adds	r3, #3
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	0013      	movs	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	189b      	adds	r3, r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	18cb      	adds	r3, r1, r3
 800288a:	3338      	adds	r3, #56	; 0x38
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002890:	193b      	adds	r3, r7, r4
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	0013      	movs	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	189b      	adds	r3, r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	18cb      	adds	r3, r1, r3
 80028a0:	333c      	adds	r3, #60	; 0x3c
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	0013      	movs	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	189b      	adds	r3, r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	18cb      	adds	r3, r1, r3
 80028b6:	3340      	adds	r3, #64	; 0x40
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	3201      	adds	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	210f      	movs	r1, #15
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d39f      	bcc.n	8002814 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e056      	b.n	800298a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028dc:	240f      	movs	r4, #15
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	236a      	movs	r3, #106	; 0x6a
 80028e6:	33ff      	adds	r3, #255	; 0xff
 80028e8:	0019      	movs	r1, r3
 80028ea:	0013      	movs	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	18c3      	adds	r3, r0, r3
 80028f4:	185b      	adds	r3, r3, r1
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	23b4      	movs	r3, #180	; 0xb4
 8002902:	0059      	lsls	r1, r3, #1
 8002904:	0013      	movs	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	189b      	adds	r3, r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	18c3      	adds	r3, r0, r3
 800290e:	185b      	adds	r3, r3, r1
 8002910:	193a      	adds	r2, r7, r4
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002916:	193b      	adds	r3, r7, r4
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	236c      	movs	r3, #108	; 0x6c
 800291e:	33ff      	adds	r3, #255	; 0xff
 8002920:	0019      	movs	r1, r3
 8002922:	0013      	movs	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	189b      	adds	r3, r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	18c3      	adds	r3, r0, r3
 800292c:	185b      	adds	r3, r3, r1
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002932:	193b      	adds	r3, r7, r4
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	23bc      	movs	r3, #188	; 0xbc
 800293a:	0059      	lsls	r1, r3, #1
 800293c:	0013      	movs	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	189b      	adds	r3, r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	18c3      	adds	r3, r0, r3
 8002946:	185b      	adds	r3, r3, r1
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800294c:	193b      	adds	r3, r7, r4
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	23be      	movs	r3, #190	; 0xbe
 8002954:	0059      	lsls	r1, r3, #1
 8002956:	0013      	movs	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	189b      	adds	r3, r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	18c3      	adds	r3, r0, r3
 8002960:	185b      	adds	r3, r3, r1
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002966:	193b      	adds	r3, r7, r4
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	23c0      	movs	r3, #192	; 0xc0
 800296e:	0059      	lsls	r1, r3, #1
 8002970:	0013      	movs	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	189b      	adds	r3, r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	18c3      	adds	r3, r0, r3
 800297a:	185b      	adds	r3, r3, r1
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002980:	193b      	adds	r3, r7, r4
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	193b      	adds	r3, r7, r4
 8002986:	3201      	adds	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	230f      	movs	r3, #15
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d3a1      	bcc.n	80028dc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	466a      	mov	r2, sp
 80029a0:	0011      	movs	r1, r2
 80029a2:	001a      	movs	r2, r3
 80029a4:	3210      	adds	r2, #16
 80029a6:	ca70      	ldmia	r2!, {r4, r5, r6}
 80029a8:	c170      	stmia	r1!, {r4, r5, r6}
 80029aa:	ca30      	ldmia	r2!, {r4, r5}
 80029ac:	c130      	stmia	r1!, {r4, r5}
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f000 fd5c 	bl	8003470 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	2100      	movs	r1, #0
 80029be:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_PCD_Init+0x21c>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d103      	bne.n	80029d8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f808 	bl	80029e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b005      	add	sp, #20
 80029e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	000002a9 	.word	0x000002a9

080029e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	23ba      	movs	r3, #186	; 0xba
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	2101      	movs	r1, #1
 80029fe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	23b8      	movs	r3, #184	; 0xb8
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	2100      	movs	r1, #0
 8002a08:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2254      	movs	r2, #84	; 0x54
 8002a0e:	5a9b      	ldrh	r3, [r3, r2]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2201      	movs	r2, #1
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b299      	uxth	r1, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2254      	movs	r2, #84	; 0x54
 8002a1c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2254      	movs	r2, #84	; 0x54
 8002a22:	5a9b      	ldrh	r3, [r3, r2]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2202      	movs	r2, #2
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b299      	uxth	r1, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2254      	movs	r2, #84	; 0x54
 8002a30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e074      	b.n	8002b38 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	223c      	movs	r2, #60	; 0x3c
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	223d      	movs	r2, #61	; 0x3d
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff fabd 	bl	8001fe4 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223c      	movs	r2, #60	; 0x3c
 8002a6e:	2102      	movs	r1, #2
 8002a70:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002a88:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002a90:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002a96:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002a9c:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002aa2:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002aa8:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002aae:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7b1b      	ldrb	r3, [r3, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d108      	bne.n	8002ad2 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0249      	lsls	r1, r1, #9
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	43d2      	mvns	r2, r2
 8002ae8:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b02:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681c      	ldr	r4, [r3, #0]
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f000 f817 	bl	8002b40 <TSC_extract_groups>
 8002b12:	0003      	movs	r3, r0
 8002b14:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2103      	movs	r1, #3
 8002b22:	438a      	bics	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	223c      	movs	r2, #60	; 0x3c
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b003      	add	sp, #12
 8002b3e:	bd90      	pop	{r4, r7, pc}

08002b40 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	e011      	b.n	8002b76 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d006      	beq.n	8002b70 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002b62:	2201      	movs	r2, #1
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d9ea      	bls.n	8002b52 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <LL_EXTI_DisableIT_0_31+0x20>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <LL_EXTI_DisableIT_0_31+0x20>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	40010400 	.word	0x40010400

08002bcc <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]

}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40010400 	.word	0x40010400

08002bec <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <LL_EXTI_DisableEvent_0_31+0x20>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <LL_EXTI_DisableEvent_0_31+0x20>)
 8002bfe:	400a      	ands	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40010400 	.word	0x40010400

08002c10 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002c1a:	6899      	ldr	r1, [r3, #8]
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]

}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40010400 	.word	0x40010400

08002c30 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]

}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40010400 	.word	0x40010400

08002c54 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002c5e:	68d9      	ldr	r1, [r3, #12]
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40010400 	.word	0x40010400

08002c74 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	60da      	str	r2, [r3, #12]
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40010400 	.word	0x40010400

08002c98 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	791b      	ldrb	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d100      	bne.n	8002cb2 <LL_EXTI_Init+0x1a>
 8002cb0:	e068      	b.n	8002d84 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d100      	bne.n	8002cbc <LL_EXTI_Init+0x24>
 8002cba:	e06e      	b.n	8002d9a <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	795b      	ldrb	r3, [r3, #5]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d01b      	beq.n	8002cfc <LL_EXTI_Init+0x64>
 8002cc4:	dc25      	bgt.n	8002d12 <LL_EXTI_Init+0x7a>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <LL_EXTI_Init+0x38>
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d00b      	beq.n	8002ce6 <LL_EXTI_Init+0x4e>
 8002cce:	e020      	b.n	8002d12 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff ff89 	bl	8002bec <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7ff ff52 	bl	8002b88 <LL_EXTI_EnableIT_0_31>
          break;
 8002ce4:	e01a      	b.n	8002d1c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff ff5c 	bl	8002ba8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff ff69 	bl	8002bcc <LL_EXTI_EnableEvent_0_31>
          break;
 8002cfa:	e00f      	b.n	8002d1c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7ff ff41 	bl	8002b88 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7ff ff5e 	bl	8002bcc <LL_EXTI_EnableEvent_0_31>
          break;
 8002d10:	e004      	b.n	8002d1c <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002d12:	230f      	movs	r3, #15
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
          break;
 8002d1a:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	799b      	ldrb	r3, [r3, #6]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03a      	beq.n	8002d9a <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	799b      	ldrb	r3, [r3, #6]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d01b      	beq.n	8002d64 <LL_EXTI_Init+0xcc>
 8002d2c:	dc25      	bgt.n	8002d7a <LL_EXTI_Init+0xe2>
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d002      	beq.n	8002d38 <LL_EXTI_Init+0xa0>
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d00b      	beq.n	8002d4e <LL_EXTI_Init+0xb6>
 8002d36:	e020      	b.n	8002d7a <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff ff99 	bl	8002c74 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff ff62 	bl	8002c10 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002d4c:	e026      	b.n	8002d9c <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7ff ff6c 	bl	8002c30 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff ff79 	bl	8002c54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d62:	e01b      	b.n	8002d9c <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ff51 	bl	8002c10 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7ff ff6e 	bl	8002c54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d78:	e010      	b.n	8002d9c <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
            break;
 8002d82:	e00b      	b.n	8002d9c <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7ff ff0d 	bl	8002ba8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7ff ff2a 	bl	8002bec <LL_EXTI_DisableEvent_0_31>
 8002d98:	e000      	b.n	8002d9c <LL_EXTI_Init+0x104>
      }
 8002d9a:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	781b      	ldrb	r3, [r3, #0]
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}

08002daa <LL_GPIO_SetPinMode>:
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	435b      	muls	r3, r3
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	189b      	adds	r3, r3, r2
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	400b      	ands	r3, r1
 8002dca:	001a      	movs	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	435b      	muls	r3, r3
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	434b      	muls	r3, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <LL_GPIO_SetPinOutputType>:
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	43d2      	mvns	r2, r2
 8002df6:	401a      	ands	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	434b      	muls	r3, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	605a      	str	r2, [r3, #4]
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <LL_GPIO_SetPinSpeed>:
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6899      	ldr	r1, [r3, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	435b      	muls	r3, r3
 8002e20:	001a      	movs	r2, r3
 8002e22:	0013      	movs	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	435b      	muls	r3, r3
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	434b      	muls	r3, r1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b004      	add	sp, #16
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <LL_GPIO_SetPinPull>:
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68d9      	ldr	r1, [r3, #12]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	435b      	muls	r3, r3
 8002e58:	001a      	movs	r2, r3
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	43db      	mvns	r3, r3
 8002e62:	400b      	ands	r3, r1
 8002e64:	001a      	movs	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	435b      	muls	r3, r3
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	434b      	muls	r3, r1
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <LL_GPIO_SetAFPin_0_7>:
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a19      	ldr	r1, [r3, #32]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	435b      	muls	r3, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	4353      	muls	r3, r2
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	435a      	muls	r2, r3
 8002e98:	0013      	movs	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	435b      	muls	r3, r3
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	434b      	muls	r3, r1
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	434b      	muls	r3, r1
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	434b      	muls	r3, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b004      	add	sp, #16
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <LL_GPIO_SetAFPin_8_15>:
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	0a12      	lsrs	r2, r2, #8
 8002eda:	4353      	muls	r3, r2
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	0a12      	lsrs	r2, r2, #8
 8002ee0:	4353      	muls	r3, r2
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	0a12      	lsrs	r2, r2, #8
 8002ee6:	435a      	muls	r2, r3
 8002ee8:	0013      	movs	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	0a09      	lsrs	r1, r1, #8
 8002efc:	434b      	muls	r3, r1
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	0a09      	lsrs	r1, r1, #8
 8002f02:	434b      	muls	r3, r1
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	0a09      	lsrs	r1, r1, #8
 8002f08:	434b      	muls	r3, r1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	434b      	muls	r3, r1
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002f2a:	e048      	b.n	8002fbe <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4091      	lsls	r1, r2
 8002f36:	000a      	movs	r2, r1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03a      	beq.n	8002fb8 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d003      	beq.n	8002f52 <LL_GPIO_Init+0x36>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d10e      	bne.n	8002f70 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff ff56 	bl	8002e0c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6819      	ldr	r1, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff ff39 	bl	8002de2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7ff ff63 	bl	8002e44 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d111      	bne.n	8002faa <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2bff      	cmp	r3, #255	; 0xff
 8002f8a:	d807      	bhi.n	8002f9c <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ff71 	bl	8002e7c <LL_GPIO_SetAFPin_0_7>
 8002f9a:	e006      	b.n	8002faa <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff ff8c 	bl	8002ec2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff fef9 	bl	8002daa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	40da      	lsrs	r2, r3
 8002fc6:	1e13      	subs	r3, r2, #0
 8002fc8:	d1b0      	bne.n	8002f2c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <LL_I2C_Enable>:
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	601a      	str	r2, [r3, #0]
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b002      	add	sp, #8
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <LL_I2C_Disable>:
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4393      	bics	r3, r2
 8003000:	001a      	movs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <LL_I2C_ConfigFilters>:
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a06      	ldr	r2, [pc, #24]	; (800303c <LL_I2C_ConfigFilters+0x2c>)
 8003022:	401a      	ands	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0219      	lsls	r1, r3, #8
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	430b      	orrs	r3, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b004      	add	sp, #16
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	ffffe0ff 	.word	0xffffe0ff

08003040 <LL_I2C_SetOwnAddress1>:
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	0adb      	lsrs	r3, r3, #11
 8003052:	02da      	lsls	r2, r3, #11
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	430b      	orrs	r3, r1
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}

08003068 <LL_I2C_EnableOwnAddress1>:
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0212      	lsls	r2, r2, #8
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b002      	add	sp, #8
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <LL_I2C_DisableOwnAddress1>:
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <LL_I2C_DisableOwnAddress1+0x1c>)
 8003096:	401a      	ands	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	ffff7fff 	.word	0xffff7fff

080030a8 <LL_I2C_SetTiming>:
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	611a      	str	r2, [r3, #16]
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <LL_I2C_SetMode>:
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <LL_I2C_SetMode+0x24>)
 80030d0:	401a      	ands	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	ffcfffff 	.word	0xffcfffff

080030e8 <LL_I2C_AcknowledgeNextData>:
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a05      	ldr	r2, [pc, #20]	; (800310c <LL_I2C_AcknowledgeNextData+0x24>)
 80030f8:	401a      	ands	r2, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	605a      	str	r2, [r3, #4]
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	ffff7fff 	.word	0xffff7fff

08003110 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f7ff ff67 	bl	8002ff0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ff6f 	bl	8003010 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f7ff ffb4 	bl	80030a8 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff ff46 	bl	8002fd4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff ff9c 	bl	8003088 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6919      	ldr	r1, [r3, #16]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff ff70 	bl	8003040 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff ff7c 	bl	8003068 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0011      	movs	r1, r2
 8003178:	0018      	movs	r0, r3
 800317a:	f7ff ffa1 	bl	80030c0 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0011      	movs	r1, r2
 8003186:	0018      	movs	r0, r3
 8003188:	f7ff ffae 	bl	80030e8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800318c:	2300      	movs	r3, #0
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}

08003196 <LL_SPI_IsEnabled>:
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d101      	bne.n	80031ae <LL_SPI_IsEnabled+0x18>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <LL_SPI_IsEnabled+0x1a>
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <LL_SPI_SetRxFIFOThreshold>:
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <LL_SPI_SetRxFIFOThreshold+0x24>)
 80031c8:	401a      	ands	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	605a      	str	r2, [r3, #4]
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b002      	add	sp, #8
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	ffffefff 	.word	0xffffefff

080031e0 <LL_SPI_SetCRCPolynomial>:
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	001a      	movs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	611a      	str	r2, [r3, #16]
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}

080031fc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003206:	230f      	movs	r3, #15
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff ffc0 	bl	8003196 <LL_SPI_IsEnabled>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d148      	bne.n	80032ac <LL_SPI_Init+0xb0>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <LL_SPI_Init+0xcc>)
 8003220:	401a      	ands	r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4319      	orrs	r1, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4319      	orrs	r1, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	4319      	orrs	r1, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4319      	orrs	r1, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	4319      	orrs	r1, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	4319      	orrs	r1, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	430b      	orrs	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <LL_SPI_Init+0xd0>)
 800325c:	401a      	ands	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	430b      	orrs	r3, r1
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	429a      	cmp	r2, r3
 800327a:	d206      	bcs.n	800328a <LL_SPI_Init+0x8e>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0011      	movs	r1, r2
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff ff97 	bl	80031b8 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	019b      	lsls	r3, r3, #6
 8003292:	429a      	cmp	r2, r3
 8003294:	d106      	bne.n	80032a4 <LL_SPI_Init+0xa8>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0011      	movs	r1, r2
 800329e:	0018      	movs	r0, r3
 80032a0:	f7ff ff9e 	bl	80031e0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80032a4:	230f      	movs	r3, #15
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <LL_SPI_Init+0xd4>)
 80032b2:	401a      	ands	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 80032b8:	230f      	movs	r3, #15
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	ffff0040 	.word	0xffff0040
 80032cc:	fffff0fb 	.word	0xfffff0fb
 80032d0:	fffff7ff 	.word	0xfffff7ff

080032d4 <LL_TIM_SetPrescaler>:
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}

080032ec <LL_TIM_SetAutoReload>:
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <LL_TIM_SetRepetitionCounter>:
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <LL_TIM_GenerateEvent_UPDATE>:
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	2201      	movs	r2, #1
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	615a      	str	r2, [r3, #20]
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a35      	ldr	r2, [pc, #212]	; (8003420 <LL_TIM_Init+0xe8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d008      	beq.n	8003362 <LL_TIM_Init+0x2a>
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	05db      	lsls	r3, r3, #23
 8003356:	429a      	cmp	r2, r3
 8003358:	d003      	beq.n	8003362 <LL_TIM_Init+0x2a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a31      	ldr	r2, [pc, #196]	; (8003424 <LL_TIM_Init+0xec>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d107      	bne.n	8003372 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2270      	movs	r2, #112	; 0x70
 8003366:	4393      	bics	r3, r2
 8003368:	001a      	movs	r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <LL_TIM_Init+0xe8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <LL_TIM_Init+0x74>
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	05db      	lsls	r3, r3, #23
 8003380:	429a      	cmp	r2, r3
 8003382:	d013      	beq.n	80033ac <LL_TIM_Init+0x74>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a27      	ldr	r2, [pc, #156]	; (8003424 <LL_TIM_Init+0xec>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00f      	beq.n	80033ac <LL_TIM_Init+0x74>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a26      	ldr	r2, [pc, #152]	; (8003428 <LL_TIM_Init+0xf0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00b      	beq.n	80033ac <LL_TIM_Init+0x74>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a25      	ldr	r2, [pc, #148]	; (800342c <LL_TIM_Init+0xf4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d007      	beq.n	80033ac <LL_TIM_Init+0x74>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a24      	ldr	r2, [pc, #144]	; (8003430 <LL_TIM_Init+0xf8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <LL_TIM_Init+0x74>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a23      	ldr	r2, [pc, #140]	; (8003434 <LL_TIM_Init+0xfc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d106      	bne.n	80033ba <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a22      	ldr	r2, [pc, #136]	; (8003438 <LL_TIM_Init+0x100>)
 80033b0:	401a      	ands	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff ff8f 	bl	80032ec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	001a      	movs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0011      	movs	r1, r2
 80033d8:	0018      	movs	r0, r3
 80033da:	f7ff ff7b 	bl	80032d4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a0f      	ldr	r2, [pc, #60]	; (8003420 <LL_TIM_Init+0xe8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00b      	beq.n	80033fe <LL_TIM_Init+0xc6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a10      	ldr	r2, [pc, #64]	; (800342c <LL_TIM_Init+0xf4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <LL_TIM_Init+0xc6>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <LL_TIM_Init+0xf8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <LL_TIM_Init+0xc6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <LL_TIM_Init+0xfc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d106      	bne.n	800340c <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0011      	movs	r1, r2
 8003406:	0018      	movs	r0, r3
 8003408:	f7ff ff7c 	bl	8003304 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f7ff ff84 	bl	800331c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b004      	add	sp, #16
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40000400 	.word	0x40000400
 8003428:	40002000 	.word	0x40002000
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800
 8003438:	fffffcff 	.word	0xfffffcff

0800343c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <USB_DisableGlobalInt+0x30>)
 8003446:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	5a9b      	ldrh	r3, [r3, r2]
 800344e:	b29b      	uxth	r3, r3
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	b292      	uxth	r2, r2
 8003454:	43d2      	mvns	r2, r2
 8003456:	b292      	uxth	r2, r2
 8003458:	4013      	ands	r3, r2
 800345a:	b299      	uxth	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2240      	movs	r2, #64	; 0x40
 8003460:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b004      	add	sp, #16
 800346a:	bd80      	pop	{r7, pc}
 800346c:	0000bf80 	.word	0x0000bf80

08003470 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003470:	b084      	sub	sp, #16
 8003472:	b590      	push	{r4, r7, lr}
 8003474:	46c6      	mov	lr, r8
 8003476:	b500      	push	{lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	2004      	movs	r0, #4
 8003480:	2410      	movs	r4, #16
 8003482:	46a4      	mov	ip, r4
 8003484:	2408      	movs	r4, #8
 8003486:	46a0      	mov	r8, r4
 8003488:	44b8      	add	r8, r7
 800348a:	44c4      	add	ip, r8
 800348c:	4460      	add	r0, ip
 800348e:	6001      	str	r1, [r0, #0]
 8003490:	6042      	str	r2, [r0, #4]
 8003492:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	2101      	movs	r1, #1
 800349a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	2100      	movs	r1, #0
 80034a2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2244      	movs	r2, #68	; 0x44
 80034a8:	2100      	movs	r1, #0
 80034aa:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2250      	movs	r2, #80	; 0x50
 80034b0:	2100      	movs	r1, #0
 80034b2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bc80      	pop	{r7}
 80034be:	46b8      	mov	r8, r7
 80034c0:	bc90      	pop	{r4, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	b004      	add	sp, #16
 80034c6:	4718      	bx	r3

080034c8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <LL_mDelay+0x40>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80034d6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3301      	adds	r3, #1
 80034dc:	d00c      	beq.n	80034f8 <LL_mDelay+0x30>
  {
    Delay++;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3301      	adds	r3, #1
 80034e2:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80034e4:	e008      	b.n	80034f8 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <LL_mDelay+0x40>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	025b      	lsls	r3, r3, #9
 80034ee:	4013      	ands	r3, r2
 80034f0:	d002      	beq.n	80034f8 <LL_mDelay+0x30>
    {
      Delay--;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	607b      	str	r3, [r7, #4]
  while (Delay)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f3      	bne.n	80034e6 <LL_mDelay+0x1e>
    }
  }
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b004      	add	sp, #16
 8003506:	bd80      	pop	{r7, pc}
 8003508:	e000e010 	.word	0xe000e010

0800350c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <LL_SetSystemCoreClock+0x18>)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	20000008 	.word	0x20000008

08003528 <__errno>:
 8003528:	4b01      	ldr	r3, [pc, #4]	; (8003530 <__errno+0x8>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	4770      	bx	lr
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	20000014 	.word	0x20000014

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	2600      	movs	r6, #0
 8003538:	4d0c      	ldr	r5, [pc, #48]	; (800356c <__libc_init_array+0x38>)
 800353a:	4c0d      	ldr	r4, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353c:	1b64      	subs	r4, r4, r5
 800353e:	10a4      	asrs	r4, r4, #2
 8003540:	42a6      	cmp	r6, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	2600      	movs	r6, #0
 8003546:	f000 fc47 	bl	8003dd8 <_init>
 800354a:	4d0a      	ldr	r5, [pc, #40]	; (8003574 <__libc_init_array+0x40>)
 800354c:	4c0a      	ldr	r4, [pc, #40]	; (8003578 <__libc_init_array+0x44>)
 800354e:	1b64      	subs	r4, r4, r5
 8003550:	10a4      	asrs	r4, r4, #2
 8003552:	42a6      	cmp	r6, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	00b3      	lsls	r3, r6, #2
 800355a:	58eb      	ldr	r3, [r5, r3]
 800355c:	4798      	blx	r3
 800355e:	3601      	adds	r6, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	00b3      	lsls	r3, r6, #2
 8003564:	58eb      	ldr	r3, [r5, r3]
 8003566:	4798      	blx	r3
 8003568:	3601      	adds	r6, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	08004b8c 	.word	0x08004b8c
 8003570:	08004b8c 	.word	0x08004b8c
 8003574:	08004b8c 	.word	0x08004b8c
 8003578:	08004b90 	.word	0x08004b90

0800357c <memset>:
 800357c:	0003      	movs	r3, r0
 800357e:	1882      	adds	r2, r0, r2
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	7019      	strb	r1, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <siprintf>:
 800358c:	b40e      	push	{r1, r2, r3}
 800358e:	b500      	push	{lr}
 8003590:	490b      	ldr	r1, [pc, #44]	; (80035c0 <siprintf+0x34>)
 8003592:	b09c      	sub	sp, #112	; 0x70
 8003594:	ab1d      	add	r3, sp, #116	; 0x74
 8003596:	9002      	str	r0, [sp, #8]
 8003598:	9006      	str	r0, [sp, #24]
 800359a:	9107      	str	r1, [sp, #28]
 800359c:	9104      	str	r1, [sp, #16]
 800359e:	4809      	ldr	r0, [pc, #36]	; (80035c4 <siprintf+0x38>)
 80035a0:	4909      	ldr	r1, [pc, #36]	; (80035c8 <siprintf+0x3c>)
 80035a2:	cb04      	ldmia	r3!, {r2}
 80035a4:	9105      	str	r1, [sp, #20]
 80035a6:	6800      	ldr	r0, [r0, #0]
 80035a8:	a902      	add	r1, sp, #8
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	f000 f870 	bl	8003690 <_svfiprintf_r>
 80035b0:	2300      	movs	r3, #0
 80035b2:	9a02      	ldr	r2, [sp, #8]
 80035b4:	7013      	strb	r3, [r2, #0]
 80035b6:	b01c      	add	sp, #112	; 0x70
 80035b8:	bc08      	pop	{r3}
 80035ba:	b003      	add	sp, #12
 80035bc:	4718      	bx	r3
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	7fffffff 	.word	0x7fffffff
 80035c4:	20000014 	.word	0x20000014
 80035c8:	ffff0208 	.word	0xffff0208

080035cc <__ssputs_r>:
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	688e      	ldr	r6, [r1, #8]
 80035d0:	b085      	sub	sp, #20
 80035d2:	0007      	movs	r7, r0
 80035d4:	000c      	movs	r4, r1
 80035d6:	9203      	str	r2, [sp, #12]
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	429e      	cmp	r6, r3
 80035dc:	d83c      	bhi.n	8003658 <__ssputs_r+0x8c>
 80035de:	2390      	movs	r3, #144	; 0x90
 80035e0:	898a      	ldrh	r2, [r1, #12]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	421a      	tst	r2, r3
 80035e6:	d034      	beq.n	8003652 <__ssputs_r+0x86>
 80035e8:	2503      	movs	r5, #3
 80035ea:	6909      	ldr	r1, [r1, #16]
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	1a5b      	subs	r3, r3, r1
 80035f0:	9302      	str	r3, [sp, #8]
 80035f2:	6963      	ldr	r3, [r4, #20]
 80035f4:	9802      	ldr	r0, [sp, #8]
 80035f6:	435d      	muls	r5, r3
 80035f8:	0feb      	lsrs	r3, r5, #31
 80035fa:	195d      	adds	r5, r3, r5
 80035fc:	9b01      	ldr	r3, [sp, #4]
 80035fe:	106d      	asrs	r5, r5, #1
 8003600:	3301      	adds	r3, #1
 8003602:	181b      	adds	r3, r3, r0
 8003604:	42ab      	cmp	r3, r5
 8003606:	d900      	bls.n	800360a <__ssputs_r+0x3e>
 8003608:	001d      	movs	r5, r3
 800360a:	0553      	lsls	r3, r2, #21
 800360c:	d532      	bpl.n	8003674 <__ssputs_r+0xa8>
 800360e:	0029      	movs	r1, r5
 8003610:	0038      	movs	r0, r7
 8003612:	f000 fb31 	bl	8003c78 <_malloc_r>
 8003616:	1e06      	subs	r6, r0, #0
 8003618:	d109      	bne.n	800362e <__ssputs_r+0x62>
 800361a:	230c      	movs	r3, #12
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	2340      	movs	r3, #64	; 0x40
 8003620:	2001      	movs	r0, #1
 8003622:	89a2      	ldrh	r2, [r4, #12]
 8003624:	4240      	negs	r0, r0
 8003626:	4313      	orrs	r3, r2
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	b005      	add	sp, #20
 800362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362e:	9a02      	ldr	r2, [sp, #8]
 8003630:	6921      	ldr	r1, [r4, #16]
 8003632:	f000 faba 	bl	8003baa <memcpy>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <__ssputs_r+0xc0>)
 800363a:	401a      	ands	r2, r3
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	4313      	orrs	r3, r2
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	9b02      	ldr	r3, [sp, #8]
 8003644:	6126      	str	r6, [r4, #16]
 8003646:	18f6      	adds	r6, r6, r3
 8003648:	6026      	str	r6, [r4, #0]
 800364a:	6165      	str	r5, [r4, #20]
 800364c:	9e01      	ldr	r6, [sp, #4]
 800364e:	1aed      	subs	r5, r5, r3
 8003650:	60a5      	str	r5, [r4, #8]
 8003652:	9b01      	ldr	r3, [sp, #4]
 8003654:	429e      	cmp	r6, r3
 8003656:	d900      	bls.n	800365a <__ssputs_r+0x8e>
 8003658:	9e01      	ldr	r6, [sp, #4]
 800365a:	0032      	movs	r2, r6
 800365c:	9903      	ldr	r1, [sp, #12]
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	f000 faac 	bl	8003bbc <memmove>
 8003664:	68a3      	ldr	r3, [r4, #8]
 8003666:	2000      	movs	r0, #0
 8003668:	1b9b      	subs	r3, r3, r6
 800366a:	60a3      	str	r3, [r4, #8]
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	199e      	adds	r6, r3, r6
 8003670:	6026      	str	r6, [r4, #0]
 8003672:	e7da      	b.n	800362a <__ssputs_r+0x5e>
 8003674:	002a      	movs	r2, r5
 8003676:	0038      	movs	r0, r7
 8003678:	f000 fb5c 	bl	8003d34 <_realloc_r>
 800367c:	1e06      	subs	r6, r0, #0
 800367e:	d1e0      	bne.n	8003642 <__ssputs_r+0x76>
 8003680:	0038      	movs	r0, r7
 8003682:	6921      	ldr	r1, [r4, #16]
 8003684:	f000 faae 	bl	8003be4 <_free_r>
 8003688:	e7c7      	b.n	800361a <__ssputs_r+0x4e>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	fffffb7f 	.word	0xfffffb7f

08003690 <_svfiprintf_r>:
 8003690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003692:	b0a1      	sub	sp, #132	; 0x84
 8003694:	9003      	str	r0, [sp, #12]
 8003696:	001d      	movs	r5, r3
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	000f      	movs	r7, r1
 800369c:	0016      	movs	r6, r2
 800369e:	061b      	lsls	r3, r3, #24
 80036a0:	d511      	bpl.n	80036c6 <_svfiprintf_r+0x36>
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10e      	bne.n	80036c6 <_svfiprintf_r+0x36>
 80036a8:	2140      	movs	r1, #64	; 0x40
 80036aa:	f000 fae5 	bl	8003c78 <_malloc_r>
 80036ae:	6038      	str	r0, [r7, #0]
 80036b0:	6138      	str	r0, [r7, #16]
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d105      	bne.n	80036c2 <_svfiprintf_r+0x32>
 80036b6:	230c      	movs	r3, #12
 80036b8:	9a03      	ldr	r2, [sp, #12]
 80036ba:	3801      	subs	r0, #1
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	b021      	add	sp, #132	; 0x84
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c2:	2340      	movs	r3, #64	; 0x40
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	2300      	movs	r3, #0
 80036c8:	ac08      	add	r4, sp, #32
 80036ca:	6163      	str	r3, [r4, #20]
 80036cc:	3320      	adds	r3, #32
 80036ce:	7663      	strb	r3, [r4, #25]
 80036d0:	3310      	adds	r3, #16
 80036d2:	76a3      	strb	r3, [r4, #26]
 80036d4:	9507      	str	r5, [sp, #28]
 80036d6:	0035      	movs	r5, r6
 80036d8:	782b      	ldrb	r3, [r5, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <_svfiprintf_r+0x52>
 80036de:	2b25      	cmp	r3, #37	; 0x25
 80036e0:	d147      	bne.n	8003772 <_svfiprintf_r+0xe2>
 80036e2:	1bab      	subs	r3, r5, r6
 80036e4:	9305      	str	r3, [sp, #20]
 80036e6:	42b5      	cmp	r5, r6
 80036e8:	d00c      	beq.n	8003704 <_svfiprintf_r+0x74>
 80036ea:	0032      	movs	r2, r6
 80036ec:	0039      	movs	r1, r7
 80036ee:	9803      	ldr	r0, [sp, #12]
 80036f0:	f7ff ff6c 	bl	80035cc <__ssputs_r>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d100      	bne.n	80036fa <_svfiprintf_r+0x6a>
 80036f8:	e0ae      	b.n	8003858 <_svfiprintf_r+0x1c8>
 80036fa:	6962      	ldr	r2, [r4, #20]
 80036fc:	9b05      	ldr	r3, [sp, #20]
 80036fe:	4694      	mov	ip, r2
 8003700:	4463      	add	r3, ip
 8003702:	6163      	str	r3, [r4, #20]
 8003704:	782b      	ldrb	r3, [r5, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d100      	bne.n	800370c <_svfiprintf_r+0x7c>
 800370a:	e0a5      	b.n	8003858 <_svfiprintf_r+0x1c8>
 800370c:	2201      	movs	r2, #1
 800370e:	2300      	movs	r3, #0
 8003710:	4252      	negs	r2, r2
 8003712:	6062      	str	r2, [r4, #4]
 8003714:	a904      	add	r1, sp, #16
 8003716:	3254      	adds	r2, #84	; 0x54
 8003718:	1852      	adds	r2, r2, r1
 800371a:	1c6e      	adds	r6, r5, #1
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	60e3      	str	r3, [r4, #12]
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	7013      	strb	r3, [r2, #0]
 8003724:	65a3      	str	r3, [r4, #88]	; 0x58
 8003726:	2205      	movs	r2, #5
 8003728:	7831      	ldrb	r1, [r6, #0]
 800372a:	4854      	ldr	r0, [pc, #336]	; (800387c <_svfiprintf_r+0x1ec>)
 800372c:	f000 fa32 	bl	8003b94 <memchr>
 8003730:	1c75      	adds	r5, r6, #1
 8003732:	2800      	cmp	r0, #0
 8003734:	d11f      	bne.n	8003776 <_svfiprintf_r+0xe6>
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	06d3      	lsls	r3, r2, #27
 800373a:	d504      	bpl.n	8003746 <_svfiprintf_r+0xb6>
 800373c:	2353      	movs	r3, #83	; 0x53
 800373e:	a904      	add	r1, sp, #16
 8003740:	185b      	adds	r3, r3, r1
 8003742:	2120      	movs	r1, #32
 8003744:	7019      	strb	r1, [r3, #0]
 8003746:	0713      	lsls	r3, r2, #28
 8003748:	d504      	bpl.n	8003754 <_svfiprintf_r+0xc4>
 800374a:	2353      	movs	r3, #83	; 0x53
 800374c:	a904      	add	r1, sp, #16
 800374e:	185b      	adds	r3, r3, r1
 8003750:	212b      	movs	r1, #43	; 0x2b
 8003752:	7019      	strb	r1, [r3, #0]
 8003754:	7833      	ldrb	r3, [r6, #0]
 8003756:	2b2a      	cmp	r3, #42	; 0x2a
 8003758:	d016      	beq.n	8003788 <_svfiprintf_r+0xf8>
 800375a:	0035      	movs	r5, r6
 800375c:	2100      	movs	r1, #0
 800375e:	200a      	movs	r0, #10
 8003760:	68e3      	ldr	r3, [r4, #12]
 8003762:	782a      	ldrb	r2, [r5, #0]
 8003764:	1c6e      	adds	r6, r5, #1
 8003766:	3a30      	subs	r2, #48	; 0x30
 8003768:	2a09      	cmp	r2, #9
 800376a:	d94e      	bls.n	800380a <_svfiprintf_r+0x17a>
 800376c:	2900      	cmp	r1, #0
 800376e:	d111      	bne.n	8003794 <_svfiprintf_r+0x104>
 8003770:	e017      	b.n	80037a2 <_svfiprintf_r+0x112>
 8003772:	3501      	adds	r5, #1
 8003774:	e7b0      	b.n	80036d8 <_svfiprintf_r+0x48>
 8003776:	4b41      	ldr	r3, [pc, #260]	; (800387c <_svfiprintf_r+0x1ec>)
 8003778:	6822      	ldr	r2, [r4, #0]
 800377a:	1ac0      	subs	r0, r0, r3
 800377c:	2301      	movs	r3, #1
 800377e:	4083      	lsls	r3, r0
 8003780:	4313      	orrs	r3, r2
 8003782:	002e      	movs	r6, r5
 8003784:	6023      	str	r3, [r4, #0]
 8003786:	e7ce      	b.n	8003726 <_svfiprintf_r+0x96>
 8003788:	9b07      	ldr	r3, [sp, #28]
 800378a:	1d19      	adds	r1, r3, #4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	9107      	str	r1, [sp, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db01      	blt.n	8003798 <_svfiprintf_r+0x108>
 8003794:	930b      	str	r3, [sp, #44]	; 0x2c
 8003796:	e004      	b.n	80037a2 <_svfiprintf_r+0x112>
 8003798:	425b      	negs	r3, r3
 800379a:	60e3      	str	r3, [r4, #12]
 800379c:	2302      	movs	r3, #2
 800379e:	4313      	orrs	r3, r2
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	782b      	ldrb	r3, [r5, #0]
 80037a4:	2b2e      	cmp	r3, #46	; 0x2e
 80037a6:	d10a      	bne.n	80037be <_svfiprintf_r+0x12e>
 80037a8:	786b      	ldrb	r3, [r5, #1]
 80037aa:	2b2a      	cmp	r3, #42	; 0x2a
 80037ac:	d135      	bne.n	800381a <_svfiprintf_r+0x18a>
 80037ae:	9b07      	ldr	r3, [sp, #28]
 80037b0:	3502      	adds	r5, #2
 80037b2:	1d1a      	adds	r2, r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	9207      	str	r2, [sp, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db2b      	blt.n	8003814 <_svfiprintf_r+0x184>
 80037bc:	9309      	str	r3, [sp, #36]	; 0x24
 80037be:	4e30      	ldr	r6, [pc, #192]	; (8003880 <_svfiprintf_r+0x1f0>)
 80037c0:	2203      	movs	r2, #3
 80037c2:	0030      	movs	r0, r6
 80037c4:	7829      	ldrb	r1, [r5, #0]
 80037c6:	f000 f9e5 	bl	8003b94 <memchr>
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d006      	beq.n	80037dc <_svfiprintf_r+0x14c>
 80037ce:	2340      	movs	r3, #64	; 0x40
 80037d0:	1b80      	subs	r0, r0, r6
 80037d2:	4083      	lsls	r3, r0
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	3501      	adds	r5, #1
 80037d8:	4313      	orrs	r3, r2
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	7829      	ldrb	r1, [r5, #0]
 80037de:	2206      	movs	r2, #6
 80037e0:	4828      	ldr	r0, [pc, #160]	; (8003884 <_svfiprintf_r+0x1f4>)
 80037e2:	1c6e      	adds	r6, r5, #1
 80037e4:	7621      	strb	r1, [r4, #24]
 80037e6:	f000 f9d5 	bl	8003b94 <memchr>
 80037ea:	2800      	cmp	r0, #0
 80037ec:	d03c      	beq.n	8003868 <_svfiprintf_r+0x1d8>
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <_svfiprintf_r+0x1f8>)
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d125      	bne.n	8003840 <_svfiprintf_r+0x1b0>
 80037f4:	2207      	movs	r2, #7
 80037f6:	9b07      	ldr	r3, [sp, #28]
 80037f8:	3307      	adds	r3, #7
 80037fa:	4393      	bics	r3, r2
 80037fc:	3308      	adds	r3, #8
 80037fe:	9307      	str	r3, [sp, #28]
 8003800:	6963      	ldr	r3, [r4, #20]
 8003802:	9a04      	ldr	r2, [sp, #16]
 8003804:	189b      	adds	r3, r3, r2
 8003806:	6163      	str	r3, [r4, #20]
 8003808:	e765      	b.n	80036d6 <_svfiprintf_r+0x46>
 800380a:	4343      	muls	r3, r0
 800380c:	0035      	movs	r5, r6
 800380e:	2101      	movs	r1, #1
 8003810:	189b      	adds	r3, r3, r2
 8003812:	e7a6      	b.n	8003762 <_svfiprintf_r+0xd2>
 8003814:	2301      	movs	r3, #1
 8003816:	425b      	negs	r3, r3
 8003818:	e7d0      	b.n	80037bc <_svfiprintf_r+0x12c>
 800381a:	2300      	movs	r3, #0
 800381c:	200a      	movs	r0, #10
 800381e:	001a      	movs	r2, r3
 8003820:	3501      	adds	r5, #1
 8003822:	6063      	str	r3, [r4, #4]
 8003824:	7829      	ldrb	r1, [r5, #0]
 8003826:	1c6e      	adds	r6, r5, #1
 8003828:	3930      	subs	r1, #48	; 0x30
 800382a:	2909      	cmp	r1, #9
 800382c:	d903      	bls.n	8003836 <_svfiprintf_r+0x1a6>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0c5      	beq.n	80037be <_svfiprintf_r+0x12e>
 8003832:	9209      	str	r2, [sp, #36]	; 0x24
 8003834:	e7c3      	b.n	80037be <_svfiprintf_r+0x12e>
 8003836:	4342      	muls	r2, r0
 8003838:	0035      	movs	r5, r6
 800383a:	2301      	movs	r3, #1
 800383c:	1852      	adds	r2, r2, r1
 800383e:	e7f1      	b.n	8003824 <_svfiprintf_r+0x194>
 8003840:	ab07      	add	r3, sp, #28
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	003a      	movs	r2, r7
 8003846:	0021      	movs	r1, r4
 8003848:	4b10      	ldr	r3, [pc, #64]	; (800388c <_svfiprintf_r+0x1fc>)
 800384a:	9803      	ldr	r0, [sp, #12]
 800384c:	e000      	b.n	8003850 <_svfiprintf_r+0x1c0>
 800384e:	bf00      	nop
 8003850:	9004      	str	r0, [sp, #16]
 8003852:	9b04      	ldr	r3, [sp, #16]
 8003854:	3301      	adds	r3, #1
 8003856:	d1d3      	bne.n	8003800 <_svfiprintf_r+0x170>
 8003858:	89bb      	ldrh	r3, [r7, #12]
 800385a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800385c:	065b      	lsls	r3, r3, #25
 800385e:	d400      	bmi.n	8003862 <_svfiprintf_r+0x1d2>
 8003860:	e72d      	b.n	80036be <_svfiprintf_r+0x2e>
 8003862:	2001      	movs	r0, #1
 8003864:	4240      	negs	r0, r0
 8003866:	e72a      	b.n	80036be <_svfiprintf_r+0x2e>
 8003868:	ab07      	add	r3, sp, #28
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	003a      	movs	r2, r7
 800386e:	0021      	movs	r1, r4
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <_svfiprintf_r+0x1fc>)
 8003872:	9803      	ldr	r0, [sp, #12]
 8003874:	f000 f87c 	bl	8003970 <_printf_i>
 8003878:	e7ea      	b.n	8003850 <_svfiprintf_r+0x1c0>
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	08004b58 	.word	0x08004b58
 8003880:	08004b5e 	.word	0x08004b5e
 8003884:	08004b62 	.word	0x08004b62
 8003888:	00000000 	.word	0x00000000
 800388c:	080035cd 	.word	0x080035cd

08003890 <_printf_common>:
 8003890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003892:	0015      	movs	r5, r2
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	688a      	ldr	r2, [r1, #8]
 8003898:	690b      	ldr	r3, [r1, #16]
 800389a:	000c      	movs	r4, r1
 800389c:	9000      	str	r0, [sp, #0]
 800389e:	4293      	cmp	r3, r2
 80038a0:	da00      	bge.n	80038a4 <_printf_common+0x14>
 80038a2:	0013      	movs	r3, r2
 80038a4:	0022      	movs	r2, r4
 80038a6:	602b      	str	r3, [r5, #0]
 80038a8:	3243      	adds	r2, #67	; 0x43
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	2a00      	cmp	r2, #0
 80038ae:	d001      	beq.n	80038b4 <_printf_common+0x24>
 80038b0:	3301      	adds	r3, #1
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	069b      	lsls	r3, r3, #26
 80038b8:	d502      	bpl.n	80038c0 <_printf_common+0x30>
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	3302      	adds	r3, #2
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	2306      	movs	r3, #6
 80038c4:	0017      	movs	r7, r2
 80038c6:	401f      	ands	r7, r3
 80038c8:	421a      	tst	r2, r3
 80038ca:	d027      	beq.n	800391c <_printf_common+0x8c>
 80038cc:	0023      	movs	r3, r4
 80038ce:	3343      	adds	r3, #67	; 0x43
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	4193      	sbcs	r3, r2
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	0692      	lsls	r2, r2, #26
 80038da:	d430      	bmi.n	800393e <_printf_common+0xae>
 80038dc:	0022      	movs	r2, r4
 80038de:	9901      	ldr	r1, [sp, #4]
 80038e0:	9800      	ldr	r0, [sp, #0]
 80038e2:	9e08      	ldr	r6, [sp, #32]
 80038e4:	3243      	adds	r2, #67	; 0x43
 80038e6:	47b0      	blx	r6
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d025      	beq.n	8003938 <_printf_common+0xa8>
 80038ec:	2306      	movs	r3, #6
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	682a      	ldr	r2, [r5, #0]
 80038f2:	68e1      	ldr	r1, [r4, #12]
 80038f4:	2500      	movs	r5, #0
 80038f6:	4003      	ands	r3, r0
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d103      	bne.n	8003904 <_printf_common+0x74>
 80038fc:	1a8d      	subs	r5, r1, r2
 80038fe:	43eb      	mvns	r3, r5
 8003900:	17db      	asrs	r3, r3, #31
 8003902:	401d      	ands	r5, r3
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	6922      	ldr	r2, [r4, #16]
 8003908:	4293      	cmp	r3, r2
 800390a:	dd01      	ble.n	8003910 <_printf_common+0x80>
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	18ed      	adds	r5, r5, r3
 8003910:	2700      	movs	r7, #0
 8003912:	42bd      	cmp	r5, r7
 8003914:	d120      	bne.n	8003958 <_printf_common+0xc8>
 8003916:	2000      	movs	r0, #0
 8003918:	e010      	b.n	800393c <_printf_common+0xac>
 800391a:	3701      	adds	r7, #1
 800391c:	68e3      	ldr	r3, [r4, #12]
 800391e:	682a      	ldr	r2, [r5, #0]
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	42bb      	cmp	r3, r7
 8003924:	ddd2      	ble.n	80038cc <_printf_common+0x3c>
 8003926:	0022      	movs	r2, r4
 8003928:	2301      	movs	r3, #1
 800392a:	9901      	ldr	r1, [sp, #4]
 800392c:	9800      	ldr	r0, [sp, #0]
 800392e:	9e08      	ldr	r6, [sp, #32]
 8003930:	3219      	adds	r2, #25
 8003932:	47b0      	blx	r6
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d1f0      	bne.n	800391a <_printf_common+0x8a>
 8003938:	2001      	movs	r0, #1
 800393a:	4240      	negs	r0, r0
 800393c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800393e:	2030      	movs	r0, #48	; 0x30
 8003940:	18e1      	adds	r1, r4, r3
 8003942:	3143      	adds	r1, #67	; 0x43
 8003944:	7008      	strb	r0, [r1, #0]
 8003946:	0021      	movs	r1, r4
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	3145      	adds	r1, #69	; 0x45
 800394c:	7809      	ldrb	r1, [r1, #0]
 800394e:	18a2      	adds	r2, r4, r2
 8003950:	3243      	adds	r2, #67	; 0x43
 8003952:	3302      	adds	r3, #2
 8003954:	7011      	strb	r1, [r2, #0]
 8003956:	e7c1      	b.n	80038dc <_printf_common+0x4c>
 8003958:	0022      	movs	r2, r4
 800395a:	2301      	movs	r3, #1
 800395c:	9901      	ldr	r1, [sp, #4]
 800395e:	9800      	ldr	r0, [sp, #0]
 8003960:	9e08      	ldr	r6, [sp, #32]
 8003962:	321a      	adds	r2, #26
 8003964:	47b0      	blx	r6
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	d0e6      	beq.n	8003938 <_printf_common+0xa8>
 800396a:	3701      	adds	r7, #1
 800396c:	e7d1      	b.n	8003912 <_printf_common+0x82>
	...

08003970 <_printf_i>:
 8003970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003972:	b08b      	sub	sp, #44	; 0x2c
 8003974:	9206      	str	r2, [sp, #24]
 8003976:	000a      	movs	r2, r1
 8003978:	3243      	adds	r2, #67	; 0x43
 800397a:	9307      	str	r3, [sp, #28]
 800397c:	9005      	str	r0, [sp, #20]
 800397e:	9204      	str	r2, [sp, #16]
 8003980:	7e0a      	ldrb	r2, [r1, #24]
 8003982:	000c      	movs	r4, r1
 8003984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003986:	2a78      	cmp	r2, #120	; 0x78
 8003988:	d806      	bhi.n	8003998 <_printf_i+0x28>
 800398a:	2a62      	cmp	r2, #98	; 0x62
 800398c:	d808      	bhi.n	80039a0 <_printf_i+0x30>
 800398e:	2a00      	cmp	r2, #0
 8003990:	d100      	bne.n	8003994 <_printf_i+0x24>
 8003992:	e0c0      	b.n	8003b16 <_printf_i+0x1a6>
 8003994:	2a58      	cmp	r2, #88	; 0x58
 8003996:	d052      	beq.n	8003a3e <_printf_i+0xce>
 8003998:	0026      	movs	r6, r4
 800399a:	3642      	adds	r6, #66	; 0x42
 800399c:	7032      	strb	r2, [r6, #0]
 800399e:	e022      	b.n	80039e6 <_printf_i+0x76>
 80039a0:	0010      	movs	r0, r2
 80039a2:	3863      	subs	r0, #99	; 0x63
 80039a4:	2815      	cmp	r0, #21
 80039a6:	d8f7      	bhi.n	8003998 <_printf_i+0x28>
 80039a8:	f7fc fbae 	bl	8000108 <__gnu_thumb1_case_shi>
 80039ac:	001f0016 	.word	0x001f0016
 80039b0:	fff6fff6 	.word	0xfff6fff6
 80039b4:	fff6fff6 	.word	0xfff6fff6
 80039b8:	fff6001f 	.word	0xfff6001f
 80039bc:	fff6fff6 	.word	0xfff6fff6
 80039c0:	00a8fff6 	.word	0x00a8fff6
 80039c4:	009a0036 	.word	0x009a0036
 80039c8:	fff6fff6 	.word	0xfff6fff6
 80039cc:	fff600b9 	.word	0xfff600b9
 80039d0:	fff60036 	.word	0xfff60036
 80039d4:	009efff6 	.word	0x009efff6
 80039d8:	0026      	movs	r6, r4
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	3642      	adds	r6, #66	; 0x42
 80039de:	1d11      	adds	r1, r2, #4
 80039e0:	6019      	str	r1, [r3, #0]
 80039e2:	6813      	ldr	r3, [r2, #0]
 80039e4:	7033      	strb	r3, [r6, #0]
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0a7      	b.n	8003b3a <_printf_i+0x1ca>
 80039ea:	6808      	ldr	r0, [r1, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	1d0a      	adds	r2, r1, #4
 80039f0:	0605      	lsls	r5, r0, #24
 80039f2:	d50b      	bpl.n	8003a0c <_printf_i+0x9c>
 80039f4:	680d      	ldr	r5, [r1, #0]
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	2d00      	cmp	r5, #0
 80039fa:	da03      	bge.n	8003a04 <_printf_i+0x94>
 80039fc:	232d      	movs	r3, #45	; 0x2d
 80039fe:	9a04      	ldr	r2, [sp, #16]
 8003a00:	426d      	negs	r5, r5
 8003a02:	7013      	strb	r3, [r2, #0]
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <_printf_i+0x21c>)
 8003a06:	270a      	movs	r7, #10
 8003a08:	9303      	str	r3, [sp, #12]
 8003a0a:	e032      	b.n	8003a72 <_printf_i+0x102>
 8003a0c:	680d      	ldr	r5, [r1, #0]
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	0641      	lsls	r1, r0, #25
 8003a12:	d5f1      	bpl.n	80039f8 <_printf_i+0x88>
 8003a14:	b22d      	sxth	r5, r5
 8003a16:	e7ef      	b.n	80039f8 <_printf_i+0x88>
 8003a18:	680d      	ldr	r5, [r1, #0]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	1d08      	adds	r0, r1, #4
 8003a1e:	6018      	str	r0, [r3, #0]
 8003a20:	062e      	lsls	r6, r5, #24
 8003a22:	d501      	bpl.n	8003a28 <_printf_i+0xb8>
 8003a24:	680d      	ldr	r5, [r1, #0]
 8003a26:	e003      	b.n	8003a30 <_printf_i+0xc0>
 8003a28:	066d      	lsls	r5, r5, #25
 8003a2a:	d5fb      	bpl.n	8003a24 <_printf_i+0xb4>
 8003a2c:	680d      	ldr	r5, [r1, #0]
 8003a2e:	b2ad      	uxth	r5, r5
 8003a30:	4b56      	ldr	r3, [pc, #344]	; (8003b8c <_printf_i+0x21c>)
 8003a32:	270a      	movs	r7, #10
 8003a34:	9303      	str	r3, [sp, #12]
 8003a36:	2a6f      	cmp	r2, #111	; 0x6f
 8003a38:	d117      	bne.n	8003a6a <_printf_i+0xfa>
 8003a3a:	2708      	movs	r7, #8
 8003a3c:	e015      	b.n	8003a6a <_printf_i+0xfa>
 8003a3e:	3145      	adds	r1, #69	; 0x45
 8003a40:	700a      	strb	r2, [r1, #0]
 8003a42:	4a52      	ldr	r2, [pc, #328]	; (8003b8c <_printf_i+0x21c>)
 8003a44:	9203      	str	r2, [sp, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	6821      	ldr	r1, [r4, #0]
 8003a4a:	ca20      	ldmia	r2!, {r5}
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	0608      	lsls	r0, r1, #24
 8003a50:	d550      	bpl.n	8003af4 <_printf_i+0x184>
 8003a52:	07cb      	lsls	r3, r1, #31
 8003a54:	d502      	bpl.n	8003a5c <_printf_i+0xec>
 8003a56:	2320      	movs	r3, #32
 8003a58:	4319      	orrs	r1, r3
 8003a5a:	6021      	str	r1, [r4, #0]
 8003a5c:	2710      	movs	r7, #16
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	d103      	bne.n	8003a6a <_printf_i+0xfa>
 8003a62:	2320      	movs	r3, #32
 8003a64:	6822      	ldr	r2, [r4, #0]
 8003a66:	439a      	bics	r2, r3
 8003a68:	6022      	str	r2, [r4, #0]
 8003a6a:	0023      	movs	r3, r4
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	3343      	adds	r3, #67	; 0x43
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	6863      	ldr	r3, [r4, #4]
 8003a74:	60a3      	str	r3, [r4, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	db03      	blt.n	8003a82 <_printf_i+0x112>
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	6821      	ldr	r1, [r4, #0]
 8003a7e:	4391      	bics	r1, r2
 8003a80:	6021      	str	r1, [r4, #0]
 8003a82:	2d00      	cmp	r5, #0
 8003a84:	d102      	bne.n	8003a8c <_printf_i+0x11c>
 8003a86:	9e04      	ldr	r6, [sp, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00c      	beq.n	8003aa6 <_printf_i+0x136>
 8003a8c:	9e04      	ldr	r6, [sp, #16]
 8003a8e:	0028      	movs	r0, r5
 8003a90:	0039      	movs	r1, r7
 8003a92:	f7fc fbc9 	bl	8000228 <__aeabi_uidivmod>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	3e01      	subs	r6, #1
 8003a9a:	5c5b      	ldrb	r3, [r3, r1]
 8003a9c:	7033      	strb	r3, [r6, #0]
 8003a9e:	002b      	movs	r3, r5
 8003aa0:	0005      	movs	r5, r0
 8003aa2:	429f      	cmp	r7, r3
 8003aa4:	d9f3      	bls.n	8003a8e <_printf_i+0x11e>
 8003aa6:	2f08      	cmp	r7, #8
 8003aa8:	d109      	bne.n	8003abe <_printf_i+0x14e>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	07db      	lsls	r3, r3, #31
 8003aae:	d506      	bpl.n	8003abe <_printf_i+0x14e>
 8003ab0:	6863      	ldr	r3, [r4, #4]
 8003ab2:	6922      	ldr	r2, [r4, #16]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	dc02      	bgt.n	8003abe <_printf_i+0x14e>
 8003ab8:	2330      	movs	r3, #48	; 0x30
 8003aba:	3e01      	subs	r6, #1
 8003abc:	7033      	strb	r3, [r6, #0]
 8003abe:	9b04      	ldr	r3, [sp, #16]
 8003ac0:	1b9b      	subs	r3, r3, r6
 8003ac2:	6123      	str	r3, [r4, #16]
 8003ac4:	9b07      	ldr	r3, [sp, #28]
 8003ac6:	0021      	movs	r1, r4
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	9805      	ldr	r0, [sp, #20]
 8003acc:	9b06      	ldr	r3, [sp, #24]
 8003ace:	aa09      	add	r2, sp, #36	; 0x24
 8003ad0:	f7ff fede 	bl	8003890 <_printf_common>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d135      	bne.n	8003b44 <_printf_i+0x1d4>
 8003ad8:	2001      	movs	r0, #1
 8003ada:	4240      	negs	r0, r0
 8003adc:	b00b      	add	sp, #44	; 0x2c
 8003ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	6809      	ldr	r1, [r1, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	6022      	str	r2, [r4, #0]
 8003ae8:	0022      	movs	r2, r4
 8003aea:	2178      	movs	r1, #120	; 0x78
 8003aec:	3245      	adds	r2, #69	; 0x45
 8003aee:	7011      	strb	r1, [r2, #0]
 8003af0:	4a27      	ldr	r2, [pc, #156]	; (8003b90 <_printf_i+0x220>)
 8003af2:	e7a7      	b.n	8003a44 <_printf_i+0xd4>
 8003af4:	0648      	lsls	r0, r1, #25
 8003af6:	d5ac      	bpl.n	8003a52 <_printf_i+0xe2>
 8003af8:	b2ad      	uxth	r5, r5
 8003afa:	e7aa      	b.n	8003a52 <_printf_i+0xe2>
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	680d      	ldr	r5, [r1, #0]
 8003b00:	1d10      	adds	r0, r2, #4
 8003b02:	6949      	ldr	r1, [r1, #20]
 8003b04:	6018      	str	r0, [r3, #0]
 8003b06:	6813      	ldr	r3, [r2, #0]
 8003b08:	062e      	lsls	r6, r5, #24
 8003b0a:	d501      	bpl.n	8003b10 <_printf_i+0x1a0>
 8003b0c:	6019      	str	r1, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <_printf_i+0x1a6>
 8003b10:	066d      	lsls	r5, r5, #25
 8003b12:	d5fb      	bpl.n	8003b0c <_printf_i+0x19c>
 8003b14:	8019      	strh	r1, [r3, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9e04      	ldr	r6, [sp, #16]
 8003b1a:	6123      	str	r3, [r4, #16]
 8003b1c:	e7d2      	b.n	8003ac4 <_printf_i+0x154>
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	1d11      	adds	r1, r2, #4
 8003b22:	6019      	str	r1, [r3, #0]
 8003b24:	6816      	ldr	r6, [r2, #0]
 8003b26:	2100      	movs	r1, #0
 8003b28:	0030      	movs	r0, r6
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	f000 f832 	bl	8003b94 <memchr>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d001      	beq.n	8003b38 <_printf_i+0x1c8>
 8003b34:	1b80      	subs	r0, r0, r6
 8003b36:	6060      	str	r0, [r4, #4]
 8003b38:	6863      	ldr	r3, [r4, #4]
 8003b3a:	6123      	str	r3, [r4, #16]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9a04      	ldr	r2, [sp, #16]
 8003b40:	7013      	strb	r3, [r2, #0]
 8003b42:	e7bf      	b.n	8003ac4 <_printf_i+0x154>
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	0032      	movs	r2, r6
 8003b48:	9906      	ldr	r1, [sp, #24]
 8003b4a:	9805      	ldr	r0, [sp, #20]
 8003b4c:	9d07      	ldr	r5, [sp, #28]
 8003b4e:	47a8      	blx	r5
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d0c1      	beq.n	8003ad8 <_printf_i+0x168>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	079b      	lsls	r3, r3, #30
 8003b58:	d415      	bmi.n	8003b86 <_printf_i+0x216>
 8003b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5c:	68e0      	ldr	r0, [r4, #12]
 8003b5e:	4298      	cmp	r0, r3
 8003b60:	dabc      	bge.n	8003adc <_printf_i+0x16c>
 8003b62:	0018      	movs	r0, r3
 8003b64:	e7ba      	b.n	8003adc <_printf_i+0x16c>
 8003b66:	0022      	movs	r2, r4
 8003b68:	2301      	movs	r3, #1
 8003b6a:	9906      	ldr	r1, [sp, #24]
 8003b6c:	9805      	ldr	r0, [sp, #20]
 8003b6e:	9e07      	ldr	r6, [sp, #28]
 8003b70:	3219      	adds	r2, #25
 8003b72:	47b0      	blx	r6
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d0af      	beq.n	8003ad8 <_printf_i+0x168>
 8003b78:	3501      	adds	r5, #1
 8003b7a:	68e3      	ldr	r3, [r4, #12]
 8003b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	42ab      	cmp	r3, r5
 8003b82:	dcf0      	bgt.n	8003b66 <_printf_i+0x1f6>
 8003b84:	e7e9      	b.n	8003b5a <_printf_i+0x1ea>
 8003b86:	2500      	movs	r5, #0
 8003b88:	e7f7      	b.n	8003b7a <_printf_i+0x20a>
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	08004b69 	.word	0x08004b69
 8003b90:	08004b7a 	.word	0x08004b7a

08003b94 <memchr>:
 8003b94:	b2c9      	uxtb	r1, r1
 8003b96:	1882      	adds	r2, r0, r2
 8003b98:	4290      	cmp	r0, r2
 8003b9a:	d101      	bne.n	8003ba0 <memchr+0xc>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	4770      	bx	lr
 8003ba0:	7803      	ldrb	r3, [r0, #0]
 8003ba2:	428b      	cmp	r3, r1
 8003ba4:	d0fb      	beq.n	8003b9e <memchr+0xa>
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	e7f6      	b.n	8003b98 <memchr+0x4>

08003baa <memcpy>:
 8003baa:	2300      	movs	r3, #0
 8003bac:	b510      	push	{r4, lr}
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d100      	bne.n	8003bb4 <memcpy+0xa>
 8003bb2:	bd10      	pop	{r4, pc}
 8003bb4:	5ccc      	ldrb	r4, [r1, r3]
 8003bb6:	54c4      	strb	r4, [r0, r3]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	e7f8      	b.n	8003bae <memcpy+0x4>

08003bbc <memmove>:
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	4288      	cmp	r0, r1
 8003bc0:	d902      	bls.n	8003bc8 <memmove+0xc>
 8003bc2:	188b      	adds	r3, r1, r2
 8003bc4:	4298      	cmp	r0, r3
 8003bc6:	d303      	bcc.n	8003bd0 <memmove+0x14>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e007      	b.n	8003bdc <memmove+0x20>
 8003bcc:	5c8b      	ldrb	r3, [r1, r2]
 8003bce:	5483      	strb	r3, [r0, r2]
 8003bd0:	3a01      	subs	r2, #1
 8003bd2:	d2fb      	bcs.n	8003bcc <memmove+0x10>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	5ccc      	ldrb	r4, [r1, r3]
 8003bd8:	54c4      	strb	r4, [r0, r3]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1fa      	bne.n	8003bd6 <memmove+0x1a>
 8003be0:	e7f8      	b.n	8003bd4 <memmove+0x18>
	...

08003be4 <_free_r>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	0005      	movs	r5, r0
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d010      	beq.n	8003c0e <_free_r+0x2a>
 8003bec:	1f0c      	subs	r4, r1, #4
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	da00      	bge.n	8003bf6 <_free_r+0x12>
 8003bf4:	18e4      	adds	r4, r4, r3
 8003bf6:	0028      	movs	r0, r5
 8003bf8:	f000 f8d4 	bl	8003da4 <__malloc_lock>
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <_free_r+0x90>)
 8003bfe:	6813      	ldr	r3, [r2, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <_free_r+0x2c>
 8003c04:	6063      	str	r3, [r4, #4]
 8003c06:	6014      	str	r4, [r2, #0]
 8003c08:	0028      	movs	r0, r5
 8003c0a:	f000 f8d3 	bl	8003db4 <__malloc_unlock>
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d908      	bls.n	8003c26 <_free_r+0x42>
 8003c14:	6821      	ldr	r1, [r4, #0]
 8003c16:	1860      	adds	r0, r4, r1
 8003c18:	4283      	cmp	r3, r0
 8003c1a:	d1f3      	bne.n	8003c04 <_free_r+0x20>
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	1841      	adds	r1, r0, r1
 8003c22:	6021      	str	r1, [r4, #0]
 8003c24:	e7ee      	b.n	8003c04 <_free_r+0x20>
 8003c26:	001a      	movs	r2, r3
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <_free_r+0x4e>
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	d9f9      	bls.n	8003c26 <_free_r+0x42>
 8003c32:	6811      	ldr	r1, [r2, #0]
 8003c34:	1850      	adds	r0, r2, r1
 8003c36:	42a0      	cmp	r0, r4
 8003c38:	d10b      	bne.n	8003c52 <_free_r+0x6e>
 8003c3a:	6820      	ldr	r0, [r4, #0]
 8003c3c:	1809      	adds	r1, r1, r0
 8003c3e:	1850      	adds	r0, r2, r1
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	4283      	cmp	r3, r0
 8003c44:	d1e0      	bne.n	8003c08 <_free_r+0x24>
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	1841      	adds	r1, r0, r1
 8003c4c:	6011      	str	r1, [r2, #0]
 8003c4e:	6053      	str	r3, [r2, #4]
 8003c50:	e7da      	b.n	8003c08 <_free_r+0x24>
 8003c52:	42a0      	cmp	r0, r4
 8003c54:	d902      	bls.n	8003c5c <_free_r+0x78>
 8003c56:	230c      	movs	r3, #12
 8003c58:	602b      	str	r3, [r5, #0]
 8003c5a:	e7d5      	b.n	8003c08 <_free_r+0x24>
 8003c5c:	6821      	ldr	r1, [r4, #0]
 8003c5e:	1860      	adds	r0, r4, r1
 8003c60:	4283      	cmp	r3, r0
 8003c62:	d103      	bne.n	8003c6c <_free_r+0x88>
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	1841      	adds	r1, r0, r1
 8003c6a:	6021      	str	r1, [r4, #0]
 8003c6c:	6063      	str	r3, [r4, #4]
 8003c6e:	6054      	str	r4, [r2, #4]
 8003c70:	e7ca      	b.n	8003c08 <_free_r+0x24>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	200000b8 	.word	0x200000b8

08003c78 <_malloc_r>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	1ccd      	adds	r5, r1, #3
 8003c7e:	439d      	bics	r5, r3
 8003c80:	3508      	adds	r5, #8
 8003c82:	0006      	movs	r6, r0
 8003c84:	2d0c      	cmp	r5, #12
 8003c86:	d21f      	bcs.n	8003cc8 <_malloc_r+0x50>
 8003c88:	250c      	movs	r5, #12
 8003c8a:	42a9      	cmp	r1, r5
 8003c8c:	d81e      	bhi.n	8003ccc <_malloc_r+0x54>
 8003c8e:	0030      	movs	r0, r6
 8003c90:	f000 f888 	bl	8003da4 <__malloc_lock>
 8003c94:	4925      	ldr	r1, [pc, #148]	; (8003d2c <_malloc_r+0xb4>)
 8003c96:	680a      	ldr	r2, [r1, #0]
 8003c98:	0014      	movs	r4, r2
 8003c9a:	2c00      	cmp	r4, #0
 8003c9c:	d11a      	bne.n	8003cd4 <_malloc_r+0x5c>
 8003c9e:	4f24      	ldr	r7, [pc, #144]	; (8003d30 <_malloc_r+0xb8>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <_malloc_r+0x38>
 8003ca6:	0021      	movs	r1, r4
 8003ca8:	0030      	movs	r0, r6
 8003caa:	f000 f869 	bl	8003d80 <_sbrk_r>
 8003cae:	6038      	str	r0, [r7, #0]
 8003cb0:	0029      	movs	r1, r5
 8003cb2:	0030      	movs	r0, r6
 8003cb4:	f000 f864 	bl	8003d80 <_sbrk_r>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d12b      	bne.n	8003d14 <_malloc_r+0x9c>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	0030      	movs	r0, r6
 8003cc0:	6033      	str	r3, [r6, #0]
 8003cc2:	f000 f877 	bl	8003db4 <__malloc_unlock>
 8003cc6:	e003      	b.n	8003cd0 <_malloc_r+0x58>
 8003cc8:	2d00      	cmp	r5, #0
 8003cca:	dade      	bge.n	8003c8a <_malloc_r+0x12>
 8003ccc:	230c      	movs	r3, #12
 8003cce:	6033      	str	r3, [r6, #0]
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	1b5b      	subs	r3, r3, r5
 8003cd8:	d419      	bmi.n	8003d0e <_malloc_r+0x96>
 8003cda:	2b0b      	cmp	r3, #11
 8003cdc:	d903      	bls.n	8003ce6 <_malloc_r+0x6e>
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	18e4      	adds	r4, r4, r3
 8003ce2:	6025      	str	r5, [r4, #0]
 8003ce4:	e003      	b.n	8003cee <_malloc_r+0x76>
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	42a2      	cmp	r2, r4
 8003cea:	d10e      	bne.n	8003d0a <_malloc_r+0x92>
 8003cec:	600b      	str	r3, [r1, #0]
 8003cee:	0030      	movs	r0, r6
 8003cf0:	f000 f860 	bl	8003db4 <__malloc_unlock>
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	300b      	adds	r0, #11
 8003cfa:	1d23      	adds	r3, r4, #4
 8003cfc:	4390      	bics	r0, r2
 8003cfe:	1ac2      	subs	r2, r0, r3
 8003d00:	4298      	cmp	r0, r3
 8003d02:	d0e6      	beq.n	8003cd2 <_malloc_r+0x5a>
 8003d04:	1a1b      	subs	r3, r3, r0
 8003d06:	50a3      	str	r3, [r4, r2]
 8003d08:	e7e3      	b.n	8003cd2 <_malloc_r+0x5a>
 8003d0a:	6053      	str	r3, [r2, #4]
 8003d0c:	e7ef      	b.n	8003cee <_malloc_r+0x76>
 8003d0e:	0022      	movs	r2, r4
 8003d10:	6864      	ldr	r4, [r4, #4]
 8003d12:	e7c2      	b.n	8003c9a <_malloc_r+0x22>
 8003d14:	2303      	movs	r3, #3
 8003d16:	1cc4      	adds	r4, r0, #3
 8003d18:	439c      	bics	r4, r3
 8003d1a:	42a0      	cmp	r0, r4
 8003d1c:	d0e1      	beq.n	8003ce2 <_malloc_r+0x6a>
 8003d1e:	1a21      	subs	r1, r4, r0
 8003d20:	0030      	movs	r0, r6
 8003d22:	f000 f82d 	bl	8003d80 <_sbrk_r>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d1db      	bne.n	8003ce2 <_malloc_r+0x6a>
 8003d2a:	e7c7      	b.n	8003cbc <_malloc_r+0x44>
 8003d2c:	200000b8 	.word	0x200000b8
 8003d30:	200000bc 	.word	0x200000bc

08003d34 <_realloc_r>:
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d36:	0007      	movs	r7, r0
 8003d38:	000d      	movs	r5, r1
 8003d3a:	0016      	movs	r6, r2
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d105      	bne.n	8003d4c <_realloc_r+0x18>
 8003d40:	0011      	movs	r1, r2
 8003d42:	f7ff ff99 	bl	8003c78 <_malloc_r>
 8003d46:	0004      	movs	r4, r0
 8003d48:	0020      	movs	r0, r4
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d103      	bne.n	8003d58 <_realloc_r+0x24>
 8003d50:	f7ff ff48 	bl	8003be4 <_free_r>
 8003d54:	0034      	movs	r4, r6
 8003d56:	e7f7      	b.n	8003d48 <_realloc_r+0x14>
 8003d58:	f000 f834 	bl	8003dc4 <_malloc_usable_size_r>
 8003d5c:	002c      	movs	r4, r5
 8003d5e:	42b0      	cmp	r0, r6
 8003d60:	d2f2      	bcs.n	8003d48 <_realloc_r+0x14>
 8003d62:	0031      	movs	r1, r6
 8003d64:	0038      	movs	r0, r7
 8003d66:	f7ff ff87 	bl	8003c78 <_malloc_r>
 8003d6a:	1e04      	subs	r4, r0, #0
 8003d6c:	d0ec      	beq.n	8003d48 <_realloc_r+0x14>
 8003d6e:	0029      	movs	r1, r5
 8003d70:	0032      	movs	r2, r6
 8003d72:	f7ff ff1a 	bl	8003baa <memcpy>
 8003d76:	0029      	movs	r1, r5
 8003d78:	0038      	movs	r0, r7
 8003d7a:	f7ff ff33 	bl	8003be4 <_free_r>
 8003d7e:	e7e3      	b.n	8003d48 <_realloc_r+0x14>

08003d80 <_sbrk_r>:
 8003d80:	2300      	movs	r3, #0
 8003d82:	b570      	push	{r4, r5, r6, lr}
 8003d84:	4d06      	ldr	r5, [pc, #24]	; (8003da0 <_sbrk_r+0x20>)
 8003d86:	0004      	movs	r4, r0
 8003d88:	0008      	movs	r0, r1
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	f7fe fa30 	bl	80021f0 <_sbrk>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d103      	bne.n	8003d9c <_sbrk_r+0x1c>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d000      	beq.n	8003d9c <_sbrk_r+0x1c>
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	200008ac 	.word	0x200008ac

08003da4 <__malloc_lock>:
 8003da4:	b510      	push	{r4, lr}
 8003da6:	4802      	ldr	r0, [pc, #8]	; (8003db0 <__malloc_lock+0xc>)
 8003da8:	f000 f814 	bl	8003dd4 <__retarget_lock_acquire_recursive>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	200008b4 	.word	0x200008b4

08003db4 <__malloc_unlock>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <__malloc_unlock+0xc>)
 8003db8:	f000 f80d 	bl	8003dd6 <__retarget_lock_release_recursive>
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	200008b4 	.word	0x200008b4

08003dc4 <_malloc_usable_size_r>:
 8003dc4:	1f0b      	subs	r3, r1, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1f18      	subs	r0, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da01      	bge.n	8003dd2 <_malloc_usable_size_r+0xe>
 8003dce:	580b      	ldr	r3, [r1, r0]
 8003dd0:	18c0      	adds	r0, r0, r3
 8003dd2:	4770      	bx	lr

08003dd4 <__retarget_lock_acquire_recursive>:
 8003dd4:	4770      	bx	lr

08003dd6 <__retarget_lock_release_recursive>:
 8003dd6:	4770      	bx	lr

08003dd8 <_init>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr

08003de4 <_fini>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dea:	bc08      	pop	{r3}
 8003dec:	469e      	mov	lr, r3
 8003dee:	4770      	bx	lr
