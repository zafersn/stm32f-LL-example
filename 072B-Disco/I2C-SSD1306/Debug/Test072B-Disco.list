
Test072B-Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033c8  080033c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033c8  080033c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033c8  080033c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  08003440  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08003440  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e86  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011dc  00000000  00000000  00024f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  00026100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  00026750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d3b  00000000  00000000  00026cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d2e  00000000  00000000  0003aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a214  00000000  00000000  0003f759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a996d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f8  00000000  00000000  000a99c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bf4 	.word	0x08002bf4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002bf4 	.word	0x08002bf4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2201      	movs	r2, #1
 8000242:	431a      	orrs	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	601a      	str	r2, [r3, #0]
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}

08000250 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	2201      	movs	r2, #1
 800025e:	4013      	ands	r3, r2
 8000260:	2b01      	cmp	r3, #1
 8000262:	d101      	bne.n	8000268 <LL_I2C_IsActiveFlag_TXE+0x18>
 8000264:	2301      	movs	r3, #1
 8000266:	e000      	b.n	800026a <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000268:	2300      	movs	r3, #0
}
 800026a:	0018      	movs	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	2240      	movs	r2, #64	; 0x40
 8000280:	4013      	ands	r3, r2
 8000282:	2b40      	cmp	r3, #64	; 0x40
 8000284:	d101      	bne.n	800028a <LL_I2C_IsActiveFlag_TC+0x18>
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <LL_I2C_IsActiveFlag_TC+0x1a>
 800028a:	2300      	movs	r3, #0
}
 800028c:	0018      	movs	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}

08000294 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	699a      	ldr	r2, [r3, #24]
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	021b      	lsls	r3, r3, #8
 80002a4:	401a      	ands	r2, r3
 80002a6:	2380      	movs	r3, #128	; 0x80
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d101      	bne.n	80002b2 <LL_I2C_IsActiveFlag_BUSY+0x1e>
 80002ae:	2301      	movs	r3, #1
 80002b0:	e000      	b.n	80002b4 <LL_I2C_IsActiveFlag_BUSY+0x20>
 80002b2:	2300      	movs	r3, #0
}
 80002b4:	0018      	movs	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}

080002bc <LL_I2C_SetTransferSize>:
  * @param  I2Cx I2C Instance.
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <LL_I2C_SetTransferSize+0x24>)
 80002cc:	401a      	ands	r2, r3
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	041b      	lsls	r3, r3, #16
 80002d2:	431a      	orrs	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	605a      	str	r2, [r3, #4]
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b002      	add	sp, #8
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	ff00ffff 	.word	0xff00ffff

080002e4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <LL_I2C_AcknowledgeNextData+0x24>)
 80002f4:	401a      	ands	r2, r3
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	605a      	str	r2, [r3, #4]
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b002      	add	sp, #8
 8000304:	bd80      	pop	{r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	ffff7fff 	.word	0xffff7fff

0800030c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	01d2      	lsls	r2, r2, #7
 800031c:	431a      	orrs	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	605a      	str	r2, [r3, #4]
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <LL_I2C_SetTransferRequest>:
  *         @arg @ref LL_I2C_REQUEST_WRITE
  *         @arg @ref LL_I2C_REQUEST_READ
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <LL_I2C_SetTransferRequest+0x24>)
 800033c:	401a      	ands	r2, r3
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	431a      	orrs	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b002      	add	sp, #8
 800034c:	bd80      	pop	{r7, pc}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	fffffbff 	.word	0xfffffbff

08000354 <LL_I2C_SetSlaveAddr>:
  * @param  I2Cx I2C Instance.
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	0a9b      	lsrs	r3, r3, #10
 8000364:	029a      	lsls	r2, r3, #10
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	431a      	orrs	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	605a      	str	r2, [r3, #4]
}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b002      	add	sp, #8
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
 8000384:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	69fa      	ldr	r2, [r7, #28]
 800038c:	0d51      	lsrs	r1, r2, #21
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	00d2      	lsls	r2, r2, #3
 8000392:	400a      	ands	r2, r1
 8000394:	490a      	ldr	r1, [pc, #40]	; (80003c0 <LL_I2C_HandleTransfer+0x48>)
 8000396:	430a      	orrs	r2, r1
 8000398:	43d2      	mvns	r2, r2
 800039a:	401a      	ands	r2, r3
 800039c:	68b9      	ldr	r1, [r7, #8]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4319      	orrs	r1, r3
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	041b      	lsls	r3, r3, #16
 80003a6:	4319      	orrs	r1, r3
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	4319      	orrs	r1, r3
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	430b      	orrs	r3, r1
 80003b0:	431a      	orrs	r2, r3
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b004      	add	sp, #16
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	03ff7bff 	.word	0x03ff7bff

080003c4 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	000a      	movs	r2, r1
 80003ce:	1cfb      	adds	r3, r7, #3
 80003d0:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80003d2:	1cfb      	adds	r3, r7, #3
 80003d4:	781a      	ldrb	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b002      	add	sp, #8
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	025b      	lsls	r3, r3, #9
 80003f0:	4013      	ands	r3, r2
 80003f2:	4a05      	ldr	r2, [pc, #20]	; (8000408 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80003f4:	4694      	mov	ip, r2
 80003f6:	4463      	add	r3, ip
 80003f8:	425a      	negs	r2, r3
 80003fa:	4153      	adcs	r3, r2
 80003fc:	b2db      	uxtb	r3, r3
}
 80003fe:	0018      	movs	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	e000e010 	.word	0xe000e010
 8000408:	ffff0000 	.word	0xffff0000

0800040c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	683a      	ldr	r2, [r7, #0]
 800041a:	619a      	str	r2, [r3, #24]
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}

08000424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}

0800043c <I2C_Handle>:
void LED_On(void);
void LED_Off(void);
void LED_Blinking(uint32_t Period);

static inline uint8_t I2C_Handle(uint8_t memAddr, uint8_t* pData, uint16_t size)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af02      	add	r7, sp, #8
 8000442:	6039      	str	r1, [r7, #0]
 8000444:	0011      	movs	r1, r2
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	1c02      	adds	r2, r0, #0
 800044a:	701a      	strb	r2, [r3, #0]
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	1c0a      	adds	r2, r1, #0
 8000450:	801a      	strh	r2, [r3, #0]

		int32_t to = 0, timeout = 10;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	230a      	movs	r3, #10
 8000458:	60bb      	str	r3, [r7, #8]
		to = timeout;
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	60fb      	str	r3, [r7, #12]

		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 800045e:	e00a      	b.n	8000476 <I2C_Handle+0x3a>
			if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000460:	f7ff ffc0 	bl	80003e4 <LL_SYSTICK_IsActiveCounterFlag>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d006      	beq.n	8000476 <I2C_Handle+0x3a>
				if(to-- == 0) {
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	1e5a      	subs	r2, r3, #1
 800046c:	60fa      	str	r2, [r7, #12]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d101      	bne.n	8000476 <I2C_Handle+0x3a>
					return 1;
 8000472:	2301      	movs	r3, #1
 8000474:	e075      	b.n	8000562 <I2C_Handle+0x126>
		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 8000476:	4b3d      	ldr	r3, [pc, #244]	; (800056c <I2C_Handle+0x130>)
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff ff0b 	bl	8000294 <LL_I2C_IsActiveFlag_BUSY>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d1ee      	bne.n	8000460 <I2C_Handle+0x24>
				}
			}
		}

		to = timeout;
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	60fb      	str	r3, [r7, #12]
//	  /* Master Generate Start condition */
	  to = timeout;
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	60fb      	str	r3, [r7, #12]
	 LL_I2C_HandleTransfer(I2C2, LCD_SLAVE_ADD, LL_I2C_ADDRSLAVE_7BIT, size+1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	001a      	movs	r2, r3
 8000492:	4836      	ldr	r0, [pc, #216]	; (800056c <I2C_Handle+0x130>)
 8000494:	4b36      	ldr	r3, [pc, #216]	; (8000570 <I2C_Handle+0x134>)
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	2300      	movs	r3, #0
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	0013      	movs	r3, r2
 800049e:	2200      	movs	r2, #0
 80004a0:	2178      	movs	r1, #120	; 0x78
 80004a2:	f7ff ff69 	bl	8000378 <LL_I2C_HandleTransfer>

	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80004a6:	e00a      	b.n	80004be <I2C_Handle+0x82>
	  		if (LL_SYSTICK_IsActiveCounterFlag()) {
 80004a8:	f7ff ff9c 	bl	80003e4 <LL_SYSTICK_IsActiveCounterFlag>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d006      	beq.n	80004be <I2C_Handle+0x82>
	  			if(to-- == 0) {
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	1e5a      	subs	r2, r3, #1
 80004b4:	60fa      	str	r2, [r7, #12]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d101      	bne.n	80004be <I2C_Handle+0x82>
	  				return 1;
 80004ba:	2301      	movs	r3, #1
 80004bc:	e051      	b.n	8000562 <I2C_Handle+0x126>
	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <I2C_Handle+0x130>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff fec5 	bl	8000250 <LL_I2C_IsActiveFlag_TXE>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d0ee      	beq.n	80004a8 <I2C_Handle+0x6c>
	  			}
	  		}
	  	}
	  		to = timeout;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	60fb      	str	r3, [r7, #12]
	  		LL_I2C_TransmitData8(I2C2, memAddr);
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4a26      	ldr	r2, [pc, #152]	; (800056c <I2C_Handle+0x130>)
 80004d4:	0019      	movs	r1, r3
 80004d6:	0010      	movs	r0, r2
 80004d8:	f7ff ff74 	bl	80003c4 <LL_I2C_TransmitData8>

	  		do {
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 80004dc:	e00a      	b.n	80004f4 <I2C_Handle+0xb8>
	  				if (LL_SYSTICK_IsActiveCounterFlag()) {
 80004de:	f7ff ff81 	bl	80003e4 <LL_SYSTICK_IsActiveCounterFlag>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d006      	beq.n	80004f4 <I2C_Handle+0xb8>
	  					if(to-- == 0) {
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	1e5a      	subs	r2, r3, #1
 80004ea:	60fa      	str	r2, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d101      	bne.n	80004f4 <I2C_Handle+0xb8>
	  						return 1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	e036      	b.n	8000562 <I2C_Handle+0x126>
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <I2C_Handle+0x130>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff feaa 	bl	8000250 <LL_I2C_IsActiveFlag_TXE>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d105      	bne.n	800050c <I2C_Handle+0xd0>
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <I2C_Handle+0x130>)
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff feb5 	bl	8000272 <LL_I2C_IsActiveFlag_TC>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d0e8      	beq.n	80004de <I2C_Handle+0xa2>
	  					}
	  				}
	  			}
	  			to = timeout;
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	60fb      	str	r3, [r7, #12]
	  			LL_I2C_TransmitData8(I2C2, (*pData++));
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	603a      	str	r2, [r7, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4a14      	ldr	r2, [pc, #80]	; (800056c <I2C_Handle+0x130>)
 800051a:	0019      	movs	r1, r3
 800051c:	0010      	movs	r0, r2
 800051e:	f7ff ff51 	bl	80003c4 <LL_I2C_TransmitData8>
	  		} while (--size > 0);
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	3a01      	subs	r2, #1
 800052a:	801a      	strh	r2, [r3, #0]
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1df      	bne.n	80004f4 <I2C_Handle+0xb8>

	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 8000534:	e00a      	b.n	800054c <I2C_Handle+0x110>
	  			if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000536:	f7ff ff55 	bl	80003e4 <LL_SYSTICK_IsActiveCounterFlag>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d006      	beq.n	800054c <I2C_Handle+0x110>
	  				if(to-- == 0) {
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	60fa      	str	r2, [r7, #12]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <I2C_Handle+0x110>
	  					return 1;
 8000548:	2301      	movs	r3, #1
 800054a:	e00a      	b.n	8000562 <I2C_Handle+0x126>
	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <I2C_Handle+0x130>)
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fe7e 	bl	8000250 <LL_I2C_IsActiveFlag_TXE>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d0ee      	beq.n	8000536 <I2C_Handle+0xfa>
	  				}
	  			}
	  		}
	  		LL_I2C_GenerateStopCondition(I2C2);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <I2C_Handle+0x130>)
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff fed6 	bl	800030c <LL_I2C_GenerateStopCondition>
	  		return 0;
 8000560:	2300      	movs	r3, #0
}
 8000562:	0018      	movs	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	b004      	add	sp, #16
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40005800 	.word	0x40005800
 8000570:	80002000 	.word	0x80002000

08000574 <BSL_Startup>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Startup()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	LED_Init();
 8000578:	f000 f9a4 	bl	80008c4 <LED_Init>
	IIC_Start();
 800057c:	f000 f9b4 	bl	80008e8 <IIC_Start>
	Display_Init();
 8000580:	f000 f816 	bl	80005b0 <Display_Init>
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <BSL_Control>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Control()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	//LED_TEST();
	if(ms500ms)
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <BSL_Control+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d004      	beq.n	80005a4 <BSL_Control+0x18>
	{
		ms500ms = false;
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <BSL_Control+0x20>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
		Display_Test();
 80005a0:	f000 f916 	bl	80007d0 <Display_Test>
	}

}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	2000008e 	.word	0x2000008e

080005b0 <Display_Init>:
  * @brief   init func. for display.
  * @param  ------
  * @retval none
  */
void Display_Init()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
		int status = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]

			LL_I2C_SetTransferSize(I2C2, 50);
 80005ba:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <Display_Init+0x218>)
 80005bc:	2132      	movs	r1, #50	; 0x32
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff fe7c 	bl	80002bc <LL_I2C_SetTransferSize>
		// Init LCD
			status += ssd1306_WriteCommand(0xAE);   // Display off
 80005c4:	20ae      	movs	r0, #174	; 0xae
 80005c6:	f000 f961 	bl	800088c <ssd1306_WriteCommand>
 80005ca:	0003      	movs	r3, r0
 80005cc:	001a      	movs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	189b      	adds	r3, r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
		if (status != 0) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d000      	beq.n	80005dc <Display_Init+0x2c>
 80005da:	e0ef      	b.n	80007bc <Display_Init+0x20c>
			return ;
		}
			status += ssd1306_WriteCommand( 0x20);   // Set Memory Addressing Mode
 80005dc:	2020      	movs	r0, #32
 80005de:	f000 f955 	bl	800088c <ssd1306_WriteCommand>
 80005e2:	0003      	movs	r3, r0
 80005e4:	001a      	movs	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	189b      	adds	r3, r3, r2
 80005ea:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f94d 	bl	800088c <ssd1306_WriteCommand>
 80005f2:	0003      	movs	r3, r0
 80005f4:	001a      	movs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	189b      	adds	r3, r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80005fc:	20b0      	movs	r0, #176	; 0xb0
 80005fe:	f000 f945 	bl	800088c <ssd1306_WriteCommand>
 8000602:	0003      	movs	r3, r0
 8000604:	001a      	movs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	189b      	adds	r3, r3, r2
 800060a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xC8);   // Set COM Output Scan Direction
 800060c:	20c8      	movs	r0, #200	; 0xc8
 800060e:	f000 f93d 	bl	800088c <ssd1306_WriteCommand>
 8000612:	0003      	movs	r3, r0
 8000614:	001a      	movs	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	189b      	adds	r3, r3, r2
 800061a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // Set low column address
 800061c:	2000      	movs	r0, #0
 800061e:	f000 f935 	bl	800088c <ssd1306_WriteCommand>
 8000622:	0003      	movs	r3, r0
 8000624:	001a      	movs	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	189b      	adds	r3, r3, r2
 800062a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x10);   // Set high column address
 800062c:	2010      	movs	r0, #16
 800062e:	f000 f92d 	bl	800088c <ssd1306_WriteCommand>
 8000632:	0003      	movs	r3, r0
 8000634:	001a      	movs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	189b      	adds	r3, r3, r2
 800063a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x40);   // Set start line address
 800063c:	2040      	movs	r0, #64	; 0x40
 800063e:	f000 f925 	bl	800088c <ssd1306_WriteCommand>
 8000642:	0003      	movs	r3, r0
 8000644:	001a      	movs	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	189b      	adds	r3, r3, r2
 800064a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x81);   // set contrast control register
 800064c:	2081      	movs	r0, #129	; 0x81
 800064e:	f000 f91d 	bl	800088c <ssd1306_WriteCommand>
 8000652:	0003      	movs	r3, r0
 8000654:	001a      	movs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	189b      	adds	r3, r3, r2
 800065a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xFF);
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	f000 f915 	bl	800088c <ssd1306_WriteCommand>
 8000662:	0003      	movs	r3, r0
 8000664:	001a      	movs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	189b      	adds	r3, r3, r2
 800066a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA1);   // Set segment re-map 0 to 127
 800066c:	20a1      	movs	r0, #161	; 0xa1
 800066e:	f000 f90d 	bl	800088c <ssd1306_WriteCommand>
 8000672:	0003      	movs	r3, r0
 8000674:	001a      	movs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	189b      	adds	r3, r3, r2
 800067a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA6);   // Set normal display
 800067c:	20a6      	movs	r0, #166	; 0xa6
 800067e:	f000 f905 	bl	800088c <ssd1306_WriteCommand>
 8000682:	0003      	movs	r3, r0
 8000684:	001a      	movs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	189b      	adds	r3, r3, r2
 800068a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA8);   // Set multiplex ratio(1 to 64)
 800068c:	20a8      	movs	r0, #168	; 0xa8
 800068e:	f000 f8fd 	bl	800088c <ssd1306_WriteCommand>
 8000692:	0003      	movs	r3, r0
 8000694:	001a      	movs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	189b      	adds	r3, r3, r2
 800069a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x1F);	// ( SSD1306_HEIGHT == 32)
 800069c:	201f      	movs	r0, #31
 800069e:	f000 f8f5 	bl	800088c <ssd1306_WriteCommand>
 80006a2:	0003      	movs	r3, r0
 80006a4:	001a      	movs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006ac:	20a4      	movs	r0, #164	; 0xa4
 80006ae:	f000 f8ed 	bl	800088c <ssd1306_WriteCommand>
 80006b2:	0003      	movs	r3, r0
 80006b4:	001a      	movs	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD3);   // Set display offset
 80006bc:	20d3      	movs	r0, #211	; 0xd3
 80006be:	f000 f8e5 	bl	800088c <ssd1306_WriteCommand>
 80006c2:	0003      	movs	r3, r0
 80006c4:	001a      	movs	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	189b      	adds	r3, r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // No offset
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f8dd 	bl	800088c <ssd1306_WriteCommand>
 80006d2:	0003      	movs	r3, r0
 80006d4:	001a      	movs	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	189b      	adds	r3, r3, r2
 80006da:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD5);   // Set display clock divide ratio/oscillator frequency
 80006dc:	20d5      	movs	r0, #213	; 0xd5
 80006de:	f000 f8d5 	bl	800088c <ssd1306_WriteCommand>
 80006e2:	0003      	movs	r3, r0
 80006e4:	001a      	movs	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	189b      	adds	r3, r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xF0);   // Set divide ratio
 80006ec:	20f0      	movs	r0, #240	; 0xf0
 80006ee:	f000 f8cd 	bl	800088c <ssd1306_WriteCommand>
 80006f2:	0003      	movs	r3, r0
 80006f4:	001a      	movs	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	189b      	adds	r3, r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD9);   // Set pre-charge period
 80006fc:	20d9      	movs	r0, #217	; 0xd9
 80006fe:	f000 f8c5 	bl	800088c <ssd1306_WriteCommand>
 8000702:	0003      	movs	r3, r0
 8000704:	001a      	movs	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	189b      	adds	r3, r3, r2
 800070a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x22);
 800070c:	2022      	movs	r0, #34	; 0x22
 800070e:	f000 f8bd 	bl	800088c <ssd1306_WriteCommand>
 8000712:	0003      	movs	r3, r0
 8000714:	001a      	movs	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	189b      	adds	r3, r3, r2
 800071a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xDA);   // Set com pins hardware configuration
 800071c:	20da      	movs	r0, #218	; 0xda
 800071e:	f000 f8b5 	bl	800088c <ssd1306_WriteCommand>
 8000722:	0003      	movs	r3, r0
 8000724:	001a      	movs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	189b      	adds	r3, r3, r2
 800072a:	607b      	str	r3, [r7, #4]
		#ifdef SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0x32);   // Enable COM left/right remap
		#else
		    status += ssd1306_WriteCommand( 0x02);   // Do not use COM left/right remap
 800072c:	2002      	movs	r0, #2
 800072e:	f000 f8ad 	bl	800088c <ssd1306_WriteCommand>
 8000732:	0003      	movs	r3, r0
 8000734:	001a      	movs	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	189b      	adds	r3, r3, r2
 800073a:	607b      	str	r3, [r7, #4]
		#endif // SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0xDB);   // Set vcomh
 800073c:	20db      	movs	r0, #219	; 0xdb
 800073e:	f000 f8a5 	bl	800088c <ssd1306_WriteCommand>
 8000742:	0003      	movs	r3, r0
 8000744:	001a      	movs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	189b      	adds	r3, r3, r2
 800074a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x20);   // 0x20,0.77xVcc
 800074c:	2020      	movs	r0, #32
 800074e:	f000 f89d 	bl	800088c <ssd1306_WriteCommand>
 8000752:	0003      	movs	r3, r0
 8000754:	001a      	movs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	189b      	adds	r3, r3, r2
 800075a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x8D);   // Set DC-DC enable
 800075c:	208d      	movs	r0, #141	; 0x8d
 800075e:	f000 f895 	bl	800088c <ssd1306_WriteCommand>
 8000762:	0003      	movs	r3, r0
 8000764:	001a      	movs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	189b      	adds	r3, r3, r2
 800076a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x14);   //
 800076c:	2014      	movs	r0, #20
 800076e:	f000 f88d 	bl	800088c <ssd1306_WriteCommand>
 8000772:	0003      	movs	r3, r0
 8000774:	001a      	movs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	189b      	adds	r3, r3, r2
 800077a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xAF);   // Turn on SSD1306 panel
 800077c:	20af      	movs	r0, #175	; 0xaf
 800077e:	f000 f885 	bl	800088c <ssd1306_WriteCommand>
 8000782:	0003      	movs	r3, r0
 8000784:	001a      	movs	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	189b      	adds	r3, r3, r2
 800078a:	607b      	str	r3, [r7, #4]

		    if (status != 0) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d116      	bne.n	80007c0 <Display_Init+0x210>
		        return ;
		    }
		    LL_mDelay(100);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f001 fda6 	bl	80022e4 <LL_mDelay>
			ssd1306_Fill(White);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 f919 	bl	80009d0 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 800079e:	f000 f8c3 	bl	8000928 <ssd1306_UpdateScreen>
			  // Set default values for screen object
			SSD1306.CurrentX = 0;
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <Display_Init+0x21c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	801a      	strh	r2, [r3, #0]
			SSD1306.CurrentY = 0;
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <Display_Init+0x21c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	805a      	strh	r2, [r3, #2]

			SSD1306.Initialized = 1;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <Display_Init+0x21c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	715a      	strb	r2, [r3, #5]
			LL_mDelay(100);
 80007b4:	2064      	movs	r0, #100	; 0x64
 80007b6:	f001 fd95 	bl	80022e4 <LL_mDelay>
 80007ba:	e002      	b.n	80007c2 <Display_Init+0x212>
			return ;
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	e000      	b.n	80007c2 <Display_Init+0x212>
		        return ;
 80007c0:	46c0      	nop			; (mov r8, r8)

}
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40005800 	.word	0x40005800
 80007cc:	200000a8 	.word	0x200000a8

080007d0 <Display_Test>:

void Display_Test()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f8fa 	bl	80009d0 <ssd1306_Fill>
	for (int i = 0; i < 128; i++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	e009      	b.n	80007f6 <Display_Test+0x26>
		ssd1306_DrawPixel(i, 10, White);
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2201      	movs	r2, #1
 80007e8:	210a      	movs	r1, #10
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f93e 	bl	8000a6c <ssd1306_DrawPixel>
	for (int i = 0; i < 128; i++) {
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	3301      	adds	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2b7f      	cmp	r3, #127	; 0x7f
 80007fa:	ddf2      	ble.n	80007e2 <Display_Test+0x12>
	}
	char tBuf[9];
	static uint8_t cN = 0;
	sprintf(tBuf,"Loading %d%",cN++);
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <Display_Test+0xb0>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	b2d1      	uxtb	r1, r2
 8000804:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <Display_Test+0xb0>)
 8000806:	7011      	strb	r1, [r2, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	491e      	ldr	r1, [pc, #120]	; (8000884 <Display_Test+0xb4>)
 800080c:	003b      	movs	r3, r7
 800080e:	0018      	movs	r0, r3
 8000810:	f001 fdca 	bl	80023a8 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f998 	bl	8000b4c <ssd1306_SetCursor>
	ssd1306_WriteString(tBuf, Font_7x10, White);
 800081c:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <Display_Test+0xb8>)
 800081e:	0038      	movs	r0, r7
 8000820:	2301      	movs	r3, #1
 8000822:	6811      	ldr	r1, [r2, #0]
 8000824:	6852      	ldr	r2, [r2, #4]
 8000826:	f000 f8f7 	bl	8000a18 <ssd1306_WriteString>
	for (int i = 14 ; i < cN+14; i++)
 800082a:	230e      	movs	r3, #14
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	e013      	b.n	8000858 <Display_Test+0x88>
	{
		for(int J = 15; J < 28; J++)
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	e00a      	b.n	800084c <Display_Test+0x7c>
		{
			ssd1306_DrawPixel(i, J, White);
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	b2d1      	uxtb	r1, r2
 800083e:	2201      	movs	r2, #1
 8000840:	0018      	movs	r0, r3
 8000842:	f000 f913 	bl	8000a6c <ssd1306_DrawPixel>
		for(int J = 15; J < 28; J++)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b1b      	cmp	r3, #27
 8000850:	ddf1      	ble.n	8000836 <Display_Test+0x66>
	for (int i = 14 ; i < cN+14; i++)
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3301      	adds	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <Display_Test+0xb0>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	330d      	adds	r3, #13
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	dde5      	ble.n	8000830 <Display_Test+0x60>
		}
	}
	ssd1306_UpdateScreen();
 8000864:	f000 f860 	bl	8000928 <ssd1306_UpdateScreen>
	if(cN>=100)cN = 0;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <Display_Test+0xb0>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b63      	cmp	r3, #99	; 0x63
 800086e:	d902      	bls.n	8000876 <Display_Test+0xa6>
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <Display_Test+0xb0>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b006      	add	sp, #24
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	2000008f 	.word	0x2000008f
 8000884:	08002c0c 	.word	0x08002c0c
 8000888:	20000000 	.word	0x20000000

0800088c <ssd1306_WriteCommand>:
static uint8_t ssd1306_WriteCommand(uint8_t command)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	701a      	strb	r2, [r3, #0]
	uint8_t memAdd= 0x00;
 8000898:	200f      	movs	r0, #15
 800089a:	183b      	adds	r3, r7, r0
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
	uint16_t size = 1;
 80008a0:	210c      	movs	r1, #12
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2201      	movs	r2, #1
 80008a6:	801a      	strh	r2, [r3, #0]
	return I2C_Handle(memAdd,&command,size);
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	881a      	ldrh	r2, [r3, #0]
 80008ac:	1df9      	adds	r1, r7, #7
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff fdc2 	bl	800043c <I2C_Handle>
 80008b8:	0003      	movs	r3, r0
}
 80008ba:	0018      	movs	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	b004      	add	sp, #16
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <LED_Init>:
void LED_Init()
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	LED1_OFF();
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <LED_Init+0x20>)
 80008ca:	2140      	movs	r1, #64	; 0x40
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fda9 	bl	8000424 <LL_GPIO_ResetOutputPin>
	LED2_OFF();
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <LED_Init+0x20>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fda4 	bl	8000424 <LL_GPIO_ResetOutputPin>
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	48000800 	.word	0x48000800

080008e8 <IIC_Start>:
void IIC_Start()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	LL_I2C_SetSlaveAddr(I2C2,LCD_SLAVE_ADD);
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <IIC_Start+0x3c>)
 80008ee:	2178      	movs	r1, #120	; 0x78
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff fd2f 	bl	8000354 <LL_I2C_SetSlaveAddr>
	LL_I2C_SetTransferRequest(I2C2, LL_I2C_REQUEST_WRITE);
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <IIC_Start+0x3c>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff fd16 	bl	800032c <LL_I2C_SetTransferRequest>
	LL_I2C_SetTransferSize(I2C2, 50);
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <IIC_Start+0x3c>)
 8000902:	2132      	movs	r1, #50	; 0x32
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff fcd9 	bl	80002bc <LL_I2C_SetTransferSize>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <IIC_Start+0x3c>)
 800090c:	2100      	movs	r1, #0
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fce8 	bl	80002e4 <LL_I2C_AcknowledgeNextData>
	LL_I2C_Enable(I2C2);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <IIC_Start+0x3c>)
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fc8c 	bl	8000234 <LL_I2C_Enable>
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40005800 	.word	0x40005800

08000928 <ssd1306_UpdateScreen>:
  * @brief   Write the screenbuffer with changed to the screen
  * @param  ------
  * @retval none
  */
void ssd1306_UpdateScreen()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
    uint8_t i;
    int sum = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]

    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e02f      	b.n	800099a <ssd1306_UpdateScreen+0x72>
    	sum+= ssd1306_WriteCommand( 0xB0 + i);
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	3b50      	subs	r3, #80	; 0x50
 8000940:	b2db      	uxtb	r3, r3
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff ffa2 	bl	800088c <ssd1306_WriteCommand>
 8000948:	0003      	movs	r3, r0
 800094a:	001a      	movs	r2, r3
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	189b      	adds	r3, r3, r2
 8000950:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x00);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ff9a 	bl	800088c <ssd1306_WriteCommand>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	189b      	adds	r3, r3, r2
 8000960:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x10);
 8000962:	2010      	movs	r0, #16
 8000964:	f7ff ff92 	bl	800088c <ssd1306_WriteCommand>
 8000968:	0003      	movs	r3, r0
 800096a:	001a      	movs	r2, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	189b      	adds	r3, r3, r2
 8000970:	603b      	str	r3, [r7, #0]
    	sum+= I2C_Handle(0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	01da      	lsls	r2, r3, #7
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <ssd1306_UpdateScreen+0xa0>)
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0019      	movs	r1, r3
 8000980:	2040      	movs	r0, #64	; 0x40
 8000982:	f7ff fd5b 	bl	800043c <I2C_Handle>
 8000986:	0003      	movs	r3, r0
 8000988:	001a      	movs	r2, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	189b      	adds	r3, r3, r2
 800098e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	3201      	adds	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9cb      	bls.n	800093a <ssd1306_UpdateScreen+0x12>
    }
    if(sum != 0)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <ssd1306_UpdateScreen+0x8c>
    {
    	LED1_ON();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <ssd1306_UpdateScreen+0xa4>)
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fd2d 	bl	800040c <LL_GPIO_SetOutputPin>
    }
    else
    {
    	LED2_ON();
    }
}
 80009b2:	e004      	b.n	80009be <ssd1306_UpdateScreen+0x96>
    	LED2_ON();
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <ssd1306_UpdateScreen+0xa4>)
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fd27 	bl	800040c <LL_GPIO_SetOutputPin>
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	200000b0 	.word	0x200000b0
 80009cc:	48000800 	.word	0x48000800

080009d0 <ssd1306_Fill>:
  * @brief   Fill the whole screen with the given color
  * @param  ------
  * @retval none
  */
void ssd1306_Fill(SSD1306_COLOR color)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	0002      	movs	r2, r0
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	701a      	strb	r2, [r3, #0]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e00e      	b.n	8000a00 <ssd1306_Fill+0x30>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <ssd1306_Fill+0x1e>
 80009ea:	2100      	movs	r1, #0
 80009ec:	e000      	b.n	80009f0 <ssd1306_Fill+0x20>
 80009ee:	21ff      	movs	r1, #255	; 0xff
 80009f0:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <ssd1306_Fill+0x44>)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	1c0a      	adds	r2, r1, #0
 80009f8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3301      	adds	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d3eb      	bcc.n	80009e2 <ssd1306_Fill+0x12>
    }
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b004      	add	sp, #16
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000b0 	.word	0x200000b0

08000a18 <ssd1306_WriteString>:
  * @brief   Write full string to screenbuffer
  * @param  ------
  * @retval none
  */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	1d38      	adds	r0, r7, #4
 8000a22:	6001      	str	r1, [r0, #0]
 8000a24:	6042      	str	r2, [r0, #4]
 8000a26:	001a      	movs	r2, r3
 8000a28:	1cfb      	adds	r3, r7, #3
 8000a2a:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str)
 8000a2c:	e014      	b.n	8000a58 <ssd1306_WriteString+0x40>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	7818      	ldrb	r0, [r3, #0]
 8000a32:	1cfb      	adds	r3, r7, #3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	1d3a      	adds	r2, r7, #4
 8000a38:	6811      	ldr	r1, [r2, #0]
 8000a3a:	6852      	ldr	r2, [r2, #4]
 8000a3c:	f000 f8a0 	bl	8000b80 <ssd1306_WriteChar>
 8000a40:	0003      	movs	r3, r0
 8000a42:	001a      	movs	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d002      	beq.n	8000a52 <ssd1306_WriteString+0x3a>
        {
            // Char could not be written
            return *str;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	e008      	b.n	8000a64 <ssd1306_WriteString+0x4c>
        }

        // Next char
        str++;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1e6      	bne.n	8000a2e <ssd1306_WriteString+0x16>
    }

    // Everything ok
    return *str;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	781b      	ldrb	r3, [r3, #0]
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b004      	add	sp, #16
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ssd1306_DrawPixel>:
  * 		Y => Y Coordinate
  * 		color => Pixel color
  * @retval none
  */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	0004      	movs	r4, r0
 8000a74:	0008      	movs	r0, r1
 8000a76:	0011      	movs	r1, r2
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	1c22      	adds	r2, r4, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	1dbb      	adds	r3, r7, #6
 8000a80:	1c02      	adds	r2, r0, #0
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	1d7b      	adds	r3, r7, #5
 8000a86:	1c0a      	adds	r2, r1, #0
 8000a88:	701a      	strb	r2, [r3, #0]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db52      	blt.n	8000b3a <ssd1306_DrawPixel+0xce>
 8000a94:	1dbb      	adds	r3, r7, #6
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b1f      	cmp	r3, #31
 8000a9a:	d84e      	bhi.n	8000b3a <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <ssd1306_DrawPixel+0xd8>)
 8000a9e:	791b      	ldrb	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <ssd1306_DrawPixel+0x46>
    {
        color = (SSD1306_COLOR)!color;
 8000aa4:	1d7b      	adds	r3, r7, #5
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	425a      	negs	r2, r3
 8000aaa:	4153      	adcs	r3, r2
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	1d7b      	adds	r3, r7, #5
 8000ab0:	701a      	strb	r2, [r3, #0]
    }

    // Draw in the correct color
    if (color == White)
 8000ab2:	1d7b      	adds	r3, r7, #5
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d11e      	bne.n	8000af8 <ssd1306_DrawPixel+0x8c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	1dbb      	adds	r3, r7, #6
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	b2d8      	uxtb	r0, r3
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	01db      	lsls	r3, r3, #7
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <ssd1306_DrawPixel+0xdc>)
 8000ace:	5cd3      	ldrb	r3, [r2, r3]
 8000ad0:	b25a      	sxtb	r2, r3
 8000ad2:	1dbb      	adds	r3, r7, #6
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	400b      	ands	r3, r1
 8000ada:	2101      	movs	r1, #1
 8000adc:	4099      	lsls	r1, r3
 8000ade:	000b      	movs	r3, r1
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b259      	sxtb	r1, r3
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	0003      	movs	r3, r0
 8000aec:	01db      	lsls	r3, r3, #7
 8000aee:	18d3      	adds	r3, r2, r3
 8000af0:	b2c9      	uxtb	r1, r1
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <ssd1306_DrawPixel+0xdc>)
 8000af4:	54d1      	strb	r1, [r2, r3]
 8000af6:	e021      	b.n	8000b3c <ssd1306_DrawPixel+0xd0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	b2d8      	uxtb	r0, r3
 8000b04:	0003      	movs	r3, r0
 8000b06:	01db      	lsls	r3, r3, #7
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <ssd1306_DrawPixel+0xdc>)
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	1dba      	adds	r2, r7, #6
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	2107      	movs	r1, #7
 8000b16:	400a      	ands	r2, r1
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	000a      	movs	r2, r1
 8000b1e:	b252      	sxtb	r2, r2
 8000b20:	43d2      	mvns	r2, r2
 8000b22:	b252      	sxtb	r2, r2
 8000b24:	4013      	ands	r3, r2
 8000b26:	b259      	sxtb	r1, r3
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	18d3      	adds	r3, r2, r3
 8000b32:	b2c9      	uxtb	r1, r1
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <ssd1306_DrawPixel+0xdc>)
 8000b36:	54d1      	strb	r1, [r2, r3]
 8000b38:	e000      	b.n	8000b3c <ssd1306_DrawPixel+0xd0>
        return;
 8000b3a:	46c0      	nop			; (mov r8, r8)
    }
}
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b003      	add	sp, #12
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	200000a8 	.word	0x200000a8
 8000b48:	200000b0 	.word	0x200000b0

08000b4c <ssd1306_SetCursor>:
  * @param  x      => axis
  * 		y      => axis
  * @retval none
  */
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	1c0a      	adds	r2, r1, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <ssd1306_SetCursor+0x30>)
 8000b66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000b68:	1dbb      	adds	r3, r7, #6
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <ssd1306_SetCursor+0x30>)
 8000b70:	805a      	strh	r2, [r3, #2]
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	200000a8 	.word	0x200000a8

08000b80 <ssd1306_WriteChar>:
  * 		Font    => Font to use
  * 		color   => Black or White
  * @retval char
  */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	0004      	movs	r4, r0
 8000b88:	1d38      	adds	r0, r7, #4
 8000b8a:	6001      	str	r1, [r0, #0]
 8000b8c:	6042      	str	r2, [r0, #4]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	1c22      	adds	r2, r4, #0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	230e      	movs	r3, #14
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	1c0a      	adds	r2, r1, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	18d3      	adds	r3, r2, r3
 8000bac:	2b7f      	cmp	r3, #127	; 0x7f
 8000bae:	dc07      	bgt.n	8000bc0 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000bb0:	4b3a      	ldr	r3, [pc, #232]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000bb2:	885b      	ldrh	r3, [r3, #2]
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000bbc:	2b1f      	cmp	r3, #31
 8000bbe:	dd01      	ble.n	8000bc4 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e066      	b.n	8000c92 <ssd1306_WriteChar+0x112>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	e051      	b.n	8000c6e <ssd1306_WriteChar+0xee>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	230f      	movs	r3, #15
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3b20      	subs	r3, #32
 8000bd6:	1d39      	adds	r1, r7, #4
 8000bd8:	7849      	ldrb	r1, [r1, #1]
 8000bda:	434b      	muls	r3, r1
 8000bdc:	0019      	movs	r1, r3
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	18cb      	adds	r3, r1, r3
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	e035      	b.n	8000c5c <ssd1306_WriteChar+0xdc>
        {
            if ((b << j) & 0x8000)
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d014      	beq.n	8000c28 <ssd1306_WriteChar+0xa8>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000bfe:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	18d3      	adds	r3, r2, r3
 8000c0a:	b2d8      	uxtb	r0, r3
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000c0e:	885b      	ldrh	r3, [r3, #2]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	18d3      	adds	r3, r2, r3
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	230e      	movs	r3, #14
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	f7ff ff23 	bl	8000a6c <ssd1306_DrawPixel>
 8000c26:	e016      	b.n	8000c56 <ssd1306_WriteChar+0xd6>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	b2d8      	uxtb	r0, r3
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000c38:	885b      	ldrh	r3, [r3, #2]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	b2d9      	uxtb	r1, r3
 8000c44:	230e      	movs	r3, #14
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	425a      	negs	r2, r3
 8000c4c:	4153      	adcs	r3, r2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	001a      	movs	r2, r3
 8000c52:	f7ff ff0b 	bl	8000a6c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	001a      	movs	r2, r3
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d3c3      	bcc.n	8000bf0 <ssd1306_WriteChar+0x70>
    for (i = 0; i < Font.FontHeight; i++)
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	001a      	movs	r2, r3
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d3a7      	bcc.n	8000bca <ssd1306_WriteChar+0x4a>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	18d3      	adds	r3, r2, r3
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <ssd1306_WriteChar+0x11c>)
 8000c8a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	781b      	ldrb	r3, [r3, #0]
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b009      	add	sp, #36	; 0x24
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	200000a8 	.word	0x200000a8

08000ca0 <BSL_Tick>:
    LL_GPIO_TogglePin(LE_DC6_GPIO_Port, LE_DC6_Pin);
    LL_mDelay(Period);
  }
}
void BSL_Tick()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	static __IO uint32_t cntr_ms_50 = 0;
	static __IO uint32_t cntr_ms_500 = 0;
	static __IO uint32_t cntr_ms_3000 = 0;

	if(++cntr_ms_50 >49)
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <BSL_Tick+0x60>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <BSL_Tick+0x60>)
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	2b31      	cmp	r3, #49	; 0x31
 8000cb0:	d905      	bls.n	8000cbe <BSL_Tick+0x1e>
	{
		ms50ms = true;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <BSL_Tick+0x64>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
		cntr_ms_50 = 0;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <BSL_Tick+0x60>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
	}
	if(++cntr_ms_500 >499)
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <BSL_Tick+0x68>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <BSL_Tick+0x68>)
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	22fa      	movs	r2, #250	; 0xfa
 8000cca:	0052      	lsls	r2, r2, #1
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d305      	bcc.n	8000cdc <BSL_Tick+0x3c>
		{
			ms500ms = true;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <BSL_Tick+0x6c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
			cntr_ms_500 = 0;
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <BSL_Tick+0x68>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
		}
	if(++cntr_ms_3000 > 2999)
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <BSL_Tick+0x70>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <BSL_Tick+0x70>)
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <BSL_Tick+0x74>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d905      	bls.n	8000cf8 <BSL_Tick+0x58>
	{
		ms3000ms = true;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <BSL_Tick+0x78>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
		cntr_ms_3000 = 0;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <BSL_Tick+0x70>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	}
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000090 	.word	0x20000090
 8000d04:	2000008c 	.word	0x2000008c
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	2000008e 	.word	0x2000008e
 8000d10:	20000098 	.word	0x20000098
 8000d14:	00000bb7 	.word	0x00000bb7
 8000d18:	2000008d 	.word	0x2000008d

08000d1c <LL_I2C_Disable>:
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4393      	bics	r3, r2
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <LL_I2C_EnableClockStretching>:
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <LL_I2C_EnableClockStretching+0x1c>)
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	fffdffff 	.word	0xfffdffff

08000d5c <LL_I2C_DisableGeneralCall>:
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <LL_I2C_DisableGeneralCall+0x1c>)
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	fff7ffff 	.word	0xfff7ffff

08000d7c <LL_I2C_SetOwnAddress2>:
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <LL_I2C_SetOwnAddress2+0x28>)
 8000d8e:	401a      	ands	r2, r3
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	430b      	orrs	r3, r1
 8000d96:	431a      	orrs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b004      	add	sp, #16
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	fffff801 	.word	0xfffff801

08000da8 <LL_I2C_DisableOwnAddress2>:
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <LL_I2C_DisableOwnAddress2+0x1c>)
 8000db6:	401a      	ands	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60da      	str	r2, [r3, #12]
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	ffff7fff 	.word	0xffff7fff

08000dc8 <LL_I2C_EnableAutoEndMode>:
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	0492      	lsls	r2, r2, #18
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	605a      	str	r2, [r3, #4]
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <LL_RCC_HSI_Enable+0x18>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <LL_RCC_HSI_Enable+0x18>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	40021000 	.word	0x40021000

08000e04 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <LL_RCC_HSI_IsReady+0x1c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	4013      	ands	r3, r2
 8000e10:	3b02      	subs	r3, #2
 8000e12:	425a      	negs	r2, r3
 8000e14:	4153      	adcs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	40021000 	.word	0x40021000

08000e24 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	22f8      	movs	r2, #248	; 0xf8
 8000e32:	4393      	bics	r3, r2
 8000e34:	0019      	movs	r1, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	00da      	lsls	r2, r3, #3
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <LL_RCC_SetSysClkSource+0x24>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	4393      	bics	r3, r2
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <LL_RCC_SetSysClkSource+0x24>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	605a      	str	r2, [r3, #4]
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	40021000 	.word	0x40021000

08000e74 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <LL_RCC_GetSysClkSource+0x14>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	4013      	ands	r3, r2
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40021000 	.word	0x40021000

08000e8c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	22f0      	movs	r2, #240	; 0xf0
 8000e9a:	4393      	bics	r3, r2
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	605a      	str	r2, [r3, #4]
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <LL_RCC_SetAPB1Prescaler+0x28>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	fffff8ff 	.word	0xfffff8ff

08000ee0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <LL_RCC_PLL_Enable+0x18>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <LL_RCC_PLL_Enable+0x18>)
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	0449      	lsls	r1, r1, #17
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000

08000efc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <LL_RCC_PLL_IsReady+0x24>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	049b      	lsls	r3, r3, #18
 8000f08:	4013      	ands	r3, r2
 8000f0a:	22fe      	movs	r2, #254	; 0xfe
 8000f0c:	0612      	lsls	r2, r2, #24
 8000f0e:	4694      	mov	ip, r2
 8000f10:	4463      	add	r3, ip
 8000f12:	425a      	negs	r2, r3
 8000f14:	4153      	adcs	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40021000 	.word	0x40021000

08000f24 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	0019      	movs	r1, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	4393      	bics	r3, r2
 8000f4e:	0019      	movs	r1, r3
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b004      	add	sp, #16
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40021000 	.word	0x40021000
 8000f64:	ffc27fff 	.word	0xffc27fff

08000f68 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f72:	6959      	ldr	r1, [r3, #20]
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000f9e:	69d9      	ldr	r1, [r3, #28]
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <LL_APB1_GRP2_EnableClock+0x28>)
 8000fca:	6999      	ldr	r1, [r3, #24]
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <LL_APB1_GRP2_EnableClock+0x28>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LL_APB1_GRP2_EnableClock+0x28>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <LL_FLASH_SetLatency+0x24>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4393      	bics	r3, r2
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <LL_FLASH_SetLatency+0x24>)
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40022000 	.word	0x40022000

08001014 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <LL_FLASH_GetLatency+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2201      	movs	r2, #1
 800101e:	4013      	ands	r3, r2
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40022000 	.word	0x40022000

0800102c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <LL_SYSTICK_EnableIT+0x18>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <LL_SYSTICK_EnableIT+0x18>)
 8001036:	2102      	movs	r1, #2
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	e000e010 	.word	0xe000e010

08001048 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	4393      	bics	r3, r2
 8001058:	001a      	movs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d01e      	beq.n	80010b6 <LL_TIM_OC_DisableFast+0x4e>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d019      	beq.n	80010b2 <LL_TIM_OC_DisableFast+0x4a>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b10      	cmp	r3, #16
 8001082:	d014      	beq.n	80010ae <LL_TIM_OC_DisableFast+0x46>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b40      	cmp	r3, #64	; 0x40
 8001088:	d00f      	beq.n	80010aa <LL_TIM_OC_DisableFast+0x42>
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	429a      	cmp	r2, r3
 8001092:	d008      	beq.n	80010a6 <LL_TIM_OC_DisableFast+0x3e>
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	429a      	cmp	r2, r3
 800109c:	d101      	bne.n	80010a2 <LL_TIM_OC_DisableFast+0x3a>
 800109e:	2305      	movs	r3, #5
 80010a0:	e00a      	b.n	80010b8 <LL_TIM_OC_DisableFast+0x50>
 80010a2:	2306      	movs	r3, #6
 80010a4:	e008      	b.n	80010b8 <LL_TIM_OC_DisableFast+0x50>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e006      	b.n	80010b8 <LL_TIM_OC_DisableFast+0x50>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <LL_TIM_OC_DisableFast+0x50>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <LL_TIM_OC_DisableFast+0x50>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <LL_TIM_OC_DisableFast+0x50>
 80010b6:	2300      	movs	r3, #0
 80010b8:	200f      	movs	r0, #15
 80010ba:	183a      	adds	r2, r7, r0
 80010bc:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3318      	adds	r3, #24
 80010c2:	0019      	movs	r1, r3
 80010c4:	183b      	adds	r3, r7, r0
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LL_TIM_OC_DisableFast+0x8c>)
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	18cb      	adds	r3, r1, r3
 80010ce:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	183a      	adds	r2, r7, r0
 80010d6:	7812      	ldrb	r2, [r2, #0]
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <LL_TIM_OC_DisableFast+0x90>)
 80010da:	5c8a      	ldrb	r2, [r1, r2]
 80010dc:	0011      	movs	r1, r2
 80010de:	2204      	movs	r2, #4
 80010e0:	408a      	lsls	r2, r1
 80010e2:	43d2      	mvns	r2, r2
 80010e4:	401a      	ands	r2, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	601a      	str	r2, [r3, #0]

}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	08003384 	.word	0x08003384
 80010f8:	0800338c 	.word	0x0800338c

080010fc <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d01e      	beq.n	800114a <LL_TIM_OC_EnablePreload+0x4e>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d019      	beq.n	8001146 <LL_TIM_OC_EnablePreload+0x4a>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b10      	cmp	r3, #16
 8001116:	d014      	beq.n	8001142 <LL_TIM_OC_EnablePreload+0x46>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b40      	cmp	r3, #64	; 0x40
 800111c:	d00f      	beq.n	800113e <LL_TIM_OC_EnablePreload+0x42>
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	429a      	cmp	r2, r3
 8001126:	d008      	beq.n	800113a <LL_TIM_OC_EnablePreload+0x3e>
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	429a      	cmp	r2, r3
 8001130:	d101      	bne.n	8001136 <LL_TIM_OC_EnablePreload+0x3a>
 8001132:	2305      	movs	r3, #5
 8001134:	e00a      	b.n	800114c <LL_TIM_OC_EnablePreload+0x50>
 8001136:	2306      	movs	r3, #6
 8001138:	e008      	b.n	800114c <LL_TIM_OC_EnablePreload+0x50>
 800113a:	2304      	movs	r3, #4
 800113c:	e006      	b.n	800114c <LL_TIM_OC_EnablePreload+0x50>
 800113e:	2303      	movs	r3, #3
 8001140:	e004      	b.n	800114c <LL_TIM_OC_EnablePreload+0x50>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <LL_TIM_OC_EnablePreload+0x50>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_TIM_OC_EnablePreload+0x50>
 800114a:	2300      	movs	r3, #0
 800114c:	200f      	movs	r0, #15
 800114e:	183a      	adds	r2, r7, r0
 8001150:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3318      	adds	r3, #24
 8001156:	0019      	movs	r1, r3
 8001158:	183b      	adds	r3, r7, r0
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <LL_TIM_OC_EnablePreload+0x88>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	18cb      	adds	r3, r1, r3
 8001162:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	183b      	adds	r3, r7, r0
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4906      	ldr	r1, [pc, #24]	; (8001188 <LL_TIM_OC_EnablePreload+0x8c>)
 800116e:	5ccb      	ldrb	r3, [r1, r3]
 8001170:	0019      	movs	r1, r3
 8001172:	2308      	movs	r3, #8
 8001174:	408b      	lsls	r3, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b004      	add	sp, #16
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08003384 	.word	0x08003384
 8001188:	0800338c 	.word	0x0800338c

0800118c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <LL_TIM_SetClockSource+0x24>)
 800119c:	401a      	ands	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	609a      	str	r2, [r3, #8]
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b002      	add	sp, #8
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	ffffbff8 	.word	0xffffbff8

080011b4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2270      	movs	r2, #112	; 0x70
 80011c4:	4393      	bics	r3, r2
 80011c6:	001a      	movs	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	605a      	str	r2, [r3, #4]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	4393      	bics	r3, r2
 80011e8:	001a      	movs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	609a      	str	r2, [r3, #8]
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <LL_GPIO_ResetOutputPin>:
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}

0800120e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff fed4 	bl	8000fc0 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	055b      	lsls	r3, r3, #21
 800121c:	0018      	movs	r0, r3
 800121e:	f7ff feb9 	bl	8000f94 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f80d 	bl	8001240 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_SYSTICK_EnableIT();
 8001226:	f7ff ff01 	bl	800102c <LL_SYSTICK_EnableIT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f000 f997 	bl	800155c <MX_GPIO_Init>
  MX_TIM1_Init();
 800122e:	f000 f8d7 	bl	80013e0 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001232:	f000 f847 	bl	80012c4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BSL_Startup();
 8001236:	f7ff f99d 	bl	8000574 <BSL_Startup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSL_Control();
 800123a:	f7ff f9a7 	bl	800058c <BSL_Control>
 800123e:	e7fc      	b.n	800123a <main+0x2c>

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fed1 	bl	8000fec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	f7ff fee2 	bl	8001014 <LL_FLASH_GetLatency>
 8001250:	0003      	movs	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d1fa      	bne.n	800124c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001256:	f7ff fdc7 	bl	8000de8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	f7ff fdd2 	bl	8000e04 <LL_RCC_HSI_IsReady>
 8001260:	0003      	movs	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d1fa      	bne.n	800125c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001266:	2010      	movs	r0, #16
 8001268:	f7ff fddc 	bl	8000e24 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PREDIV_DIV_1);
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	0359      	lsls	r1, r3, #13
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	2200      	movs	r2, #0
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff fe54 	bl	8000f24 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800127c:	f7ff fe30 	bl	8000ee0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	f7ff fe3b 	bl	8000efc <LL_RCC_PLL_IsReady>
 8001286:	0003      	movs	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d1fa      	bne.n	8001282 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fdfd 	bl	8000e8c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fe0e 	bl	8000eb4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001298:	2002      	movs	r0, #2
 800129a:	f7ff fdd7 	bl	8000e4c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	f7ff fde8 	bl	8000e74 <LL_RCC_GetSysClkSource>
 80012a4:	0003      	movs	r3, r0
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d1fa      	bne.n	80012a0 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SystemClock_Config+0x80>)
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 f809 	bl	80022c4 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 80012b2:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <SystemClock_Config+0x80>)
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 f837 	bl	8002328 <LL_SetSystemCoreClock>
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	02dc6c00 	.word	0x02dc6c00

080012c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b08f      	sub	sp, #60	; 0x3c
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80012ca:	241c      	movs	r4, #28
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	0018      	movs	r0, r3
 80012d0:	231c      	movs	r3, #28
 80012d2:	001a      	movs	r2, r3
 80012d4:	2100      	movs	r1, #0
 80012d6:	f001 f85f 	bl	8002398 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	0018      	movs	r0, r3
 80012de:	2318      	movs	r3, #24
 80012e0:	001a      	movs	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f001 f858 	bl	8002398 <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	02db      	lsls	r3, r3, #11
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff fe3b 	bl	8000f68 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	00d2      	lsls	r2, r2, #3
 80012f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2202      	movs	r2, #2
 80012fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2203      	movs	r2, #3
 8001304:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2201      	movs	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2201      	movs	r2, #1
 8001316:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <MX_I2C2_Init+0x110>)
 800131c:	0019      	movs	r1, r3
 800131e:	0010      	movs	r0, r2
 8001320:	f000 fadc 	bl	80018dc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2202      	movs	r2, #2
 8001330:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2203      	movs	r2, #3
 8001336:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2201      	movs	r2, #1
 800133c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2201      	movs	r2, #1
 8001348:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <MX_I2C2_Init+0x110>)
 800134e:	0019      	movs	r1, r3
 8001350:	0010      	movs	r0, r2
 8001352:	f000 fac3 	bl	80018dc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	03db      	lsls	r3, r3, #15
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff fe1a 	bl	8000f94 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN I2C2_Init 1 */
  LL_I2C_Disable(I2C2);
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_I2C2_Init+0x114>)
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff fcda 	bl	8000d1c <LL_I2C_Disable>
  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_I2C2_Init+0x114>)
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff fd1c 	bl	8000da8 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_I2C2_Init+0x114>)
 8001372:	0018      	movs	r0, r3
 8001374:	f7ff fcf2 	bl	8000d5c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_I2C2_Init+0x114>)
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fcde 	bl	8000d3c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001380:	0021      	movs	r1, r4
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x00701853;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <MX_I2C2_Init+0x118>)
 800138c:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <MX_I2C2_Init+0x114>)
 80013b0:	0019      	movs	r1, r3
 80013b2:	0010      	movs	r0, r2
 80013b4:	f000 fb8c 	bl	8001ad0 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_I2C2_Init+0x114>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff fd04 	bl	8000dc8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <MX_I2C2_Init+0x114>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff fcd8 	bl	8000d7c <LL_I2C_SetOwnAddress2>


//  LL_I2C_EnableIT_STOP(I2C2);
  /* USER CODE END I2C2_Init 2 */

}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b00f      	add	sp, #60	; 0x3c
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	48000400 	.word	0x48000400
 80013d8:	40005800 	.word	0x40005800
 80013dc:	00701853 	.word	0x00701853

080013e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	b09b      	sub	sp, #108	; 0x6c
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80013e6:	2654      	movs	r6, #84	; 0x54
 80013e8:	19bb      	adds	r3, r7, r6
 80013ea:	0018      	movs	r0, r3
 80013ec:	2314      	movs	r3, #20
 80013ee:	001a      	movs	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f000 ffd1 	bl	8002398 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80013f6:	2434      	movs	r4, #52	; 0x34
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	0018      	movs	r0, r3
 80013fc:	2320      	movs	r3, #32
 80013fe:	001a      	movs	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	f000 ffc9 	bl	8002398 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001406:	251c      	movs	r5, #28
 8001408:	197b      	adds	r3, r7, r5
 800140a:	0018      	movs	r0, r3
 800140c:	2318      	movs	r3, #24
 800140e:	001a      	movs	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	f000 ffc1 	bl	8002398 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	0018      	movs	r0, r3
 800141a:	2318      	movs	r3, #24
 800141c:	001a      	movs	r2, r3
 800141e:	2100      	movs	r1, #0
 8001420:	f000 ffba 	bl	8002398 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM1);
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff fdc9 	bl	8000fc0 <LL_APB1_GRP2_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 800142e:	19bb      	adds	r3, r7, r6
 8001430:	222f      	movs	r2, #47	; 0x2f
 8001432:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001434:	0031      	movs	r1, r6
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 999;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	4a45      	ldr	r2, [pc, #276]	; (8001554 <MX_TIM1_Init+0x174>)
 8001440:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800144e:	187b      	adds	r3, r7, r1
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <MX_TIM1_Init+0x178>)
 8001452:	0019      	movs	r1, r3
 8001454:	0010      	movs	r0, r2
 8001456:	f000 fbe1 	bl	8001c1c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <MX_TIM1_Init+0x178>)
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fdf3 	bl	8001048 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <MX_TIM1_Init+0x178>)
 8001464:	2100      	movs	r1, #0
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff fe90 	bl	800118c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <MX_TIM1_Init+0x178>)
 800146e:	2101      	movs	r1, #1
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff fe43 	bl	80010fc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001476:	0021      	movs	r1, r4
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2260      	movs	r2, #96	; 0x60
 800147c:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 500;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	22fa      	movs	r2, #250	; 0xfa
 800148e:	0052      	lsls	r2, r2, #1
 8001490:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	482a      	ldr	r0, [pc, #168]	; (8001558 <MX_TIM1_Init+0x178>)
 80014ae:	001a      	movs	r2, r3
 80014b0:	2101      	movs	r1, #1
 80014b2:	f000 fc35 	bl	8001d20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_TIM1_Init+0x178>)
 80014b8:	2101      	movs	r1, #1
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7ff fdd4 	bl	8001068 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_TIM1_Init+0x178>)
 80014c2:	2100      	movs	r1, #0
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fe75 	bl	80011b4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <MX_TIM1_Init+0x178>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fe83 	bl	80011d8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80014d2:	0029      	movs	r1, r5
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  TIM_BDTRInitStruct.DeadTime = 0;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	731a      	strb	r2, [r3, #12]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	81da      	strh	r2, [r3, #14]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	0192      	lsls	r2, r2, #6
 80014f8:	611a      	str	r2, [r3, #16]
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80014fa:	187b      	adds	r3, r7, r1
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001500:	187b      	adds	r3, r7, r1
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <MX_TIM1_Init+0x178>)
 8001504:	0019      	movs	r1, r3
 8001506:	0010      	movs	r0, r2
 8001508:	f000 fc64 	bl	8001dd4 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	029b      	lsls	r3, r3, #10
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fd29 	bl	8000f68 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	0052      	lsls	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2202      	movs	r2, #2
 8001522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2202      	movs	r2, #2
 800153a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	1d3a      	adds	r2, r7, #4
 800153e:	2390      	movs	r3, #144	; 0x90
 8001540:	05db      	lsls	r3, r3, #23
 8001542:	0011      	movs	r1, r2
 8001544:	0018      	movs	r0, r3
 8001546:	f000 f9c9 	bl	80018dc <LL_GPIO_Init>

}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b01b      	add	sp, #108	; 0x6c
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	000003e7 	.word	0x000003e7
 8001558:	40012c00 	.word	0x40012c00

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	003b      	movs	r3, r7
 8001564:	0018      	movs	r0, r3
 8001566:	2318      	movs	r3, #24
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f000 ff14 	bl	8002398 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	031b      	lsls	r3, r3, #12
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fcf7 	bl	8000f68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	02db      	lsls	r3, r3, #11
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff fcf2 	bl	8000f68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff fced 	bl	8000f68 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_5);
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <MX_GPIO_Init+0x110>)
 8001590:	2120      	movs	r1, #32
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff fe2f 	bl	80011f6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LE_DC6_GPIO_Port, LE_DC6_Pin);
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <MX_GPIO_Init+0x110>)
 800159a:	2140      	movs	r1, #64	; 0x40
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff fe2a 	bl	80011f6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LE_DC7_GPIO_Port, LE_DC7_Pin);
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <MX_GPIO_Init+0x110>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff fe25 	bl	80011f6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LE_DC8_GPIO_Port, LE_DC8_Pin);
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4a2e      	ldr	r2, [pc, #184]	; (800166c <MX_GPIO_Init+0x110>)
 80015b2:	0019      	movs	r1, r3
 80015b4:	0010      	movs	r0, r2
 80015b6:	f7ff fe1e 	bl	80011f6 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80015ba:	003b      	movs	r3, r7
 80015bc:	2220      	movs	r2, #32
 80015be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015c0:	003b      	movs	r3, r7
 80015c2:	2201      	movs	r2, #1
 80015c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015c6:	003b      	movs	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015cc:	003b      	movs	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015d2:	003b      	movs	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	003b      	movs	r3, r7
 80015da:	4a24      	ldr	r2, [pc, #144]	; (800166c <MX_GPIO_Init+0x110>)
 80015dc:	0019      	movs	r1, r3
 80015de:	0010      	movs	r0, r2
 80015e0:	f000 f97c 	bl	80018dc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LE_DC6_Pin;
 80015e4:	003b      	movs	r3, r7
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ea:	003b      	movs	r3, r7
 80015ec:	2201      	movs	r2, #1
 80015ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015f0:	003b      	movs	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015f6:	003b      	movs	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015fc:	003b      	movs	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LE_DC6_GPIO_Port, &GPIO_InitStruct);
 8001602:	003b      	movs	r3, r7
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <MX_GPIO_Init+0x110>)
 8001606:	0019      	movs	r1, r3
 8001608:	0010      	movs	r0, r2
 800160a:	f000 f967 	bl	80018dc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LE_DC7_Pin;
 800160e:	003b      	movs	r3, r7
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001614:	003b      	movs	r3, r7
 8001616:	2201      	movs	r2, #1
 8001618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800161a:	003b      	movs	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001620:	003b      	movs	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001626:	003b      	movs	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LE_DC7_GPIO_Port, &GPIO_InitStruct);
 800162c:	003b      	movs	r3, r7
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <MX_GPIO_Init+0x110>)
 8001630:	0019      	movs	r1, r3
 8001632:	0010      	movs	r0, r2
 8001634:	f000 f952 	bl	80018dc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LE_DC8_Pin;
 8001638:	003b      	movs	r3, r7
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001640:	003b      	movs	r3, r7
 8001642:	2201      	movs	r2, #1
 8001644:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001646:	003b      	movs	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800164c:	003b      	movs	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001652:	003b      	movs	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LE_DC8_GPIO_Port, &GPIO_InitStruct);
 8001658:	003b      	movs	r3, r7
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <MX_GPIO_Init+0x110>)
 800165c:	0019      	movs	r1, r3
 800165e:	0010      	movs	r0, r2
 8001660:	f000 f93c 	bl	80018dc <LL_GPIO_Init>

}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b006      	add	sp, #24
 800166a:	bd80      	pop	{r7, pc}
 800166c:	48000800 	.word	0x48000800

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler+0x4>

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	BSL_Tick();
 8001694:	f7ff fb04 	bl	8000ca0 <BSL_Tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	18d3      	adds	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f000 fe38 	bl	8002344 <__errno>
 80016d4:	0003      	movs	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	2301      	movs	r3, #1
 80016dc:	425b      	negs	r3, r3
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	18d2      	adds	r2, r2, r3
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <_sbrk+0x64>)
 80016f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b006      	add	sp, #24
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20004000 	.word	0x20004000
 8001700:	00000400 	.word	0x00000400
 8001704:	2000009c 	.word	0x2000009c
 8001708:	200004c0 	.word	0x200004c0

0800170c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490e      	ldr	r1, [pc, #56]	; (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0b      	ldr	r4, [pc, #44]	; (8001764 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001742:	f7ff ffe3 	bl	800170c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001746:	f000 fe03 	bl	8002350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7ff fd60 	bl	800120e <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   r0, =_estack
 8001750:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800175c:	080033d0 	.word	0x080033d0
  ldr r2, =_sbss
 8001760:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001764:	200004c0 	.word	0x200004c0

08001768 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_COMP_IRQHandler>

0800176a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	435b      	muls	r3, r3
 800177e:	001a      	movs	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	189b      	adds	r3, r3, r2
 8001786:	43db      	mvns	r3, r3
 8001788:	400b      	ands	r3, r1
 800178a:	001a      	movs	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	435b      	muls	r3, r3
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	434b      	muls	r3, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	401a      	ands	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	434b      	muls	r3, r1
 80017be:	431a      	orrs	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}

080017cc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6899      	ldr	r1, [r3, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	435b      	muls	r3, r3
 80017e0:	001a      	movs	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	189b      	adds	r3, r3, r2
 80017e8:	43db      	mvns	r3, r3
 80017ea:	400b      	ands	r3, r1
 80017ec:	001a      	movs	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	435b      	muls	r3, r3
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	434b      	muls	r3, r1
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b004      	add	sp, #16
 8001802:	bd80      	pop	{r7, pc}

08001804 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68d9      	ldr	r1, [r3, #12]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	435b      	muls	r3, r3
 8001818:	001a      	movs	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	189b      	adds	r3, r3, r2
 8001820:	43db      	mvns	r3, r3
 8001822:	400b      	ands	r3, r1
 8001824:	001a      	movs	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	435b      	muls	r3, r3
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	434b      	muls	r3, r1
 800182e:	431a      	orrs	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	60da      	str	r2, [r3, #12]
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}

0800183c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	435b      	muls	r3, r3
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4353      	muls	r3, r2
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	435a      	muls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	43db      	mvns	r3, r3
 8001860:	400b      	ands	r3, r1
 8001862:	001a      	movs	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	435b      	muls	r3, r3
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	434b      	muls	r3, r1
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	434b      	muls	r3, r1
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	434b      	muls	r3, r1
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b004      	add	sp, #16
 8001880:	bd80      	pop	{r7, pc}

08001882 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	0a12      	lsrs	r2, r2, #8
 800189a:	4353      	muls	r3, r2
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	0a12      	lsrs	r2, r2, #8
 80018a0:	4353      	muls	r3, r2
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	0a12      	lsrs	r2, r2, #8
 80018a6:	435a      	muls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	43db      	mvns	r3, r3
 80018b0:	400b      	ands	r3, r1
 80018b2:	001a      	movs	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	0a09      	lsrs	r1, r1, #8
 80018bc:	434b      	muls	r3, r1
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	0a09      	lsrs	r1, r1, #8
 80018c2:	434b      	muls	r3, r1
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	0a09      	lsrs	r1, r1, #8
 80018c8:	434b      	muls	r3, r1
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	434b      	muls	r3, r1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bd80      	pop	{r7, pc}

080018dc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80018ea:	e048      	b.n	800197e <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03a      	beq.n	8001978 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d003      	beq.n	8001912 <LL_GPIO_Init+0x36>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d10e      	bne.n	8001930 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff ff56 	bl	80017cc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6819      	ldr	r1, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff ff39 	bl	80017a2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff ff63 	bl	8001804 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d111      	bne.n	800196a <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2bff      	cmp	r3, #255	; 0xff
 800194a:	d807      	bhi.n	800195c <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff ff71 	bl	800183c <LL_GPIO_SetAFPin_0_7>
 800195a:	e006      	b.n	800196a <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ff8c 	bl	8001882 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff fef9 	bl	800176a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	40da      	lsrs	r2, r3
 8001986:	1e13      	subs	r3, r2, #0
 8001988:	d1b0      	bne.n	80018ec <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}

08001994 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	4393      	bics	r3, r2
 80019c0:	001a      	movs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <LL_I2C_ConfigFilters+0x2c>)
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0219      	lsls	r1, r3, #8
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	ffffe0ff 	.word	0xffffe0ff

08001a00 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	0adb      	lsrs	r3, r3, #11
 8001a12:	02da      	lsls	r2, r3, #11
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	609a      	str	r2, [r3, #8]
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0212      	lsls	r2, r2, #8
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <LL_I2C_DisableOwnAddress1+0x1c>)
 8001a56:	401a      	ands	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b002      	add	sp, #8
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	ffff7fff 	.word	0xffff7fff

08001a68 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	611a      	str	r2, [r3, #16]
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <LL_I2C_SetMode+0x24>)
 8001a90:	401a      	ands	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b002      	add	sp, #8
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	ffcfffff 	.word	0xffcfffff

08001aa8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <LL_I2C_AcknowledgeNextData+0x24>)
 8001ab8:	401a      	ands	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	605a      	str	r2, [r3, #4]
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	ffff7fff 	.word	0xffff7fff

08001ad0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff ff67 	bl	80019b0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff ff6f 	bl	80019d0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	0011      	movs	r1, r2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff ffb4 	bl	8001a68 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff ff46 	bl	8001994 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff ff9c 	bl	8001a48 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6919      	ldr	r1, [r3, #16]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff ff70 	bl	8001a00 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7ff ff7c 	bl	8001a28 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0011      	movs	r1, r2
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff ffa1 	bl	8001a80 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	0011      	movs	r1, r2
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff ffae 	bl	8001aa8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b002      	add	sp, #8
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	615a      	str	r2, [r3, #20]
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a35      	ldr	r2, [pc, #212]	; (8001d04 <LL_TIM_Init+0xe8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d008      	beq.n	8001c46 <LL_TIM_Init+0x2a>
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d003      	beq.n	8001c46 <LL_TIM_Init+0x2a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a31      	ldr	r2, [pc, #196]	; (8001d08 <LL_TIM_Init+0xec>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d107      	bne.n	8001c56 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2270      	movs	r2, #112	; 0x70
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <LL_TIM_Init+0xe8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <LL_TIM_Init+0x74>
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	05db      	lsls	r3, r3, #23
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d013      	beq.n	8001c90 <LL_TIM_Init+0x74>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <LL_TIM_Init+0xec>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00f      	beq.n	8001c90 <LL_TIM_Init+0x74>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <LL_TIM_Init+0xf0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d00b      	beq.n	8001c90 <LL_TIM_Init+0x74>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <LL_TIM_Init+0xf4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d007      	beq.n	8001c90 <LL_TIM_Init+0x74>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <LL_TIM_Init+0xf8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d003      	beq.n	8001c90 <LL_TIM_Init+0x74>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <LL_TIM_Init+0xfc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d106      	bne.n	8001c9e <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a22      	ldr	r2, [pc, #136]	; (8001d1c <LL_TIM_Init+0x100>)
 8001c94:	401a      	ands	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	0011      	movs	r1, r2
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff ff5e 	bl	8001b6e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	0011      	movs	r1, r2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ff4a 	bl	8001b56 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <LL_TIM_Init+0xe8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00b      	beq.n	8001ce2 <LL_TIM_Init+0xc6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <LL_TIM_Init+0xf4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <LL_TIM_Init+0xc6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <LL_TIM_Init+0xf8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d003      	beq.n	8001ce2 <LL_TIM_Init+0xc6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <LL_TIM_Init+0xfc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d106      	bne.n	8001cf0 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0011      	movs	r1, r2
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff ff4b 	bl	8001b86 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff ff83 	bl	8001bfe <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40002000 	.word	0x40002000
 8001d10:	40014000 	.word	0x40014000
 8001d14:	40014400 	.word	0x40014400
 8001d18:	40014800 	.word	0x40014800
 8001d1c:	fffffcff 	.word	0xfffffcff

08001d20 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001d2c:	2317      	movs	r3, #23
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d036      	beq.n	8001dac <LL_TIM_OC_Init+0x8c>
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	015b      	lsls	r3, r3, #5
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d83c      	bhi.n	8001dc2 <LL_TIM_OC_Init+0xa2>
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d021      	beq.n	8001d96 <LL_TIM_OC_Init+0x76>
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d832      	bhi.n	8001dc2 <LL_TIM_OC_Init+0xa2>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d003      	beq.n	8001d6a <LL_TIM_OC_Init+0x4a>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d00b      	beq.n	8001d80 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001d68:	e02b      	b.n	8001dc2 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001d6a:	2317      	movs	r3, #23
 8001d6c:	18fc      	adds	r4, r7, r3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 f883 	bl	8001e80 <OC1Config>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	7023      	strb	r3, [r4, #0]
      break;
 8001d7e:	e021      	b.n	8001dc4 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001d80:	2317      	movs	r3, #23
 8001d82:	18fc      	adds	r4, r7, r3
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	0011      	movs	r1, r2
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 f8fc 	bl	8001f88 <OC2Config>
 8001d90:	0003      	movs	r3, r0
 8001d92:	7023      	strb	r3, [r4, #0]
      break;
 8001d94:	e016      	b.n	8001dc4 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001d96:	2317      	movs	r3, #23
 8001d98:	18fc      	adds	r4, r7, r3
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 f97b 	bl	800209c <OC3Config>
 8001da6:	0003      	movs	r3, r0
 8001da8:	7023      	strb	r3, [r4, #0]
      break;
 8001daa:	e00b      	b.n	8001dc4 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001dac:	2317      	movs	r3, #23
 8001dae:	18fc      	adds	r4, r7, r3
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 f9fa 	bl	80021b0 <OC4Config>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	7023      	strb	r3, [r4, #0]
      break;
 8001dc0:	e000      	b.n	8001dc4 <LL_TIM_OC_Init+0xa4>
      break;
 8001dc2:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8001dc4:	2317      	movs	r3, #23
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b007      	add	sp, #28
 8001dd0:	bd90      	pop	{r4, r7, pc}
	...

08001dd4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	22ff      	movs	r2, #255	; 0xff
 8001de6:	4393      	bics	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	7b12      	ldrb	r2, [r2, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <LL_TIM_BDTR_Init+0x90>)
 8001df4:	401a      	ands	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <LL_TIM_BDTR_Init+0x94>)
 8001e02:	401a      	ands	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <LL_TIM_BDTR_Init+0x98>)
 8001e10:	401a      	ands	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <LL_TIM_BDTR_Init+0x9c>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	89d2      	ldrh	r2, [r2, #14]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <LL_TIM_BDTR_Init+0xa0>)
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <LL_TIM_BDTR_Init+0xa4>)
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <LL_TIM_BDTR_Init+0xa8>)
 8001e48:	401a      	ands	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	fffffcff 	.word	0xfffffcff
 8001e68:	fffffbff 	.word	0xfffffbff
 8001e6c:	fffff7ff 	.word	0xfffff7ff
 8001e70:	ffffefff 	.word	0xffffefff
 8001e74:	ffffdfff 	.word	0xffffdfff
 8001e78:	ffffbfff 	.word	0xffffbfff
 8001e7c:	ffff7fff 	.word	0xffff7fff

08001e80 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4393      	bics	r3, r2
 8001e92:	001a      	movs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2203      	movs	r2, #3
 8001eae:	4393      	bics	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2270      	movs	r2, #112	; 0x70
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	001a      	movs	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4393      	bics	r3, r2
 8001ec8:	001a      	movs	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	001a      	movs	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <OC1Config+0xf0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <OC1Config+0x82>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <OC1Config+0xf4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <OC1Config+0x82>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <OC1Config+0xf8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <OC1Config+0x82>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <OC1Config+0xfc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d120      	bne.n	8001f44 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2208      	movs	r2, #8
 8001f06:	4393      	bics	r3, r2
 8001f08:	001a      	movs	r2, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4393      	bics	r3, r2
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <OC1Config+0x100>)
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <OC1Config+0x104>)
 8001f38:	401a      	ands	r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0011      	movs	r1, r2
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fe20 	bl	8001b9e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b006      	add	sp, #24
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40014000 	.word	0x40014000
 8001f78:	40014400 	.word	0x40014400
 8001f7c:	40014800 	.word	0x40014800
 8001f80:	fffffeff 	.word	0xfffffeff
 8001f84:	fffffdff 	.word	0xfffffdff

08001f88 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2210      	movs	r2, #16
 8001f98:	4393      	bics	r3, r2
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4a31      	ldr	r2, [pc, #196]	; (800207c <OC2Config+0xf4>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a30      	ldr	r2, [pc, #192]	; (8002080 <OC2Config+0xf8>)
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	4393      	bics	r3, r2
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2210      	movs	r2, #16
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a24      	ldr	r2, [pc, #144]	; (8002084 <OC2Config+0xfc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00b      	beq.n	800200e <OC2Config+0x86>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a23      	ldr	r2, [pc, #140]	; (8002088 <OC2Config+0x100>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <OC2Config+0x86>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <OC2Config+0x104>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d003      	beq.n	800200e <OC2Config+0x86>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <OC2Config+0x108>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d121      	bne.n	8002052 <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	4393      	bics	r3, r2
 8002014:	001a      	movs	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	019b      	lsls	r3, r3, #6
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	4393      	bics	r3, r2
 8002026:	001a      	movs	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <OC2Config+0x10c>)
 8002036:	401a      	ands	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <OC2Config+0x110>)
 8002046:	401a      	ands	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0011      	movs	r1, r2
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff fda5 	bl	8001bb6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002072:	2300      	movs	r3, #0
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b006      	add	sp, #24
 800207a:	bd80      	pop	{r7, pc}
 800207c:	fffffcff 	.word	0xfffffcff
 8002080:	ffff8fff 	.word	0xffff8fff
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40014000 	.word	0x40014000
 800208c:	40014400 	.word	0x40014400
 8002090:	40014800 	.word	0x40014800
 8002094:	fffffbff 	.word	0xfffffbff
 8002098:	fffff7ff 	.word	0xfffff7ff

0800209c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a37      	ldr	r2, [pc, #220]	; (8002188 <OC3Config+0xec>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2203      	movs	r2, #3
 80020c8:	4393      	bics	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2270      	movs	r2, #112	; 0x70
 80020d0:	4393      	bics	r3, r2
 80020d2:	001a      	movs	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4a2b      	ldr	r2, [pc, #172]	; (800218c <OC3Config+0xf0>)
 80020e0:	401a      	ands	r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4a26      	ldr	r2, [pc, #152]	; (8002188 <OC3Config+0xec>)
 80020f0:	401a      	ands	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a24      	ldr	r2, [pc, #144]	; (8002190 <OC3Config+0xf4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00b      	beq.n	800211c <OC3Config+0x80>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <OC3Config+0xf8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <OC3Config+0x80>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <OC3Config+0xfc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <OC3Config+0x80>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a21      	ldr	r2, [pc, #132]	; (800219c <OC3Config+0x100>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d11f      	bne.n	800215c <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <OC3Config+0x104>)
 8002120:	401a      	ands	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <OC3Config+0x108>)
 8002130:	401a      	ands	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	029b      	lsls	r3, r3, #10
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <OC3Config+0x10c>)
 8002140:	401a      	ands	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <OC3Config+0x110>)
 8002150:	401a      	ands	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0011      	movs	r1, r2
 8002170:	0018      	movs	r0, r3
 8002172:	f7ff fd2c 	bl	8001bce <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800217c:	2300      	movs	r3, #0
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	fffffeff 	.word	0xfffffeff
 800218c:	fffffdff 	.word	0xfffffdff
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40014000 	.word	0x40014000
 8002198:	40014400 	.word	0x40014400
 800219c:	40014800 	.word	0x40014800
 80021a0:	fffff7ff 	.word	0xfffff7ff
 80021a4:	fffffbff 	.word	0xfffffbff
 80021a8:	ffffefff 	.word	0xffffefff
 80021ac:	ffffdfff 	.word	0xffffdfff

080021b0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a2b      	ldr	r2, [pc, #172]	; (800226c <OC4Config+0xbc>)
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <OC4Config+0xc0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a24      	ldr	r2, [pc, #144]	; (8002274 <OC4Config+0xc4>)
 80021e4:	401a      	ands	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <OC4Config+0xc8>)
 80021f4:	401a      	ands	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	031b      	lsls	r3, r3, #12
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4a1a      	ldr	r2, [pc, #104]	; (800226c <OC4Config+0xbc>)
 8002204:	401a      	ands	r2, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	031b      	lsls	r3, r3, #12
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a1a      	ldr	r2, [pc, #104]	; (800227c <OC4Config+0xcc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00b      	beq.n	8002230 <OC4Config+0x80>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a19      	ldr	r2, [pc, #100]	; (8002280 <OC4Config+0xd0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <OC4Config+0x80>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a18      	ldr	r2, [pc, #96]	; (8002284 <OC4Config+0xd4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <OC4Config+0x80>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <OC4Config+0xd8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d107      	bne.n	8002240 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <OC4Config+0xdc>)
 8002234:	401a      	ands	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	019b      	lsls	r3, r3, #6
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0011      	movs	r1, r2
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fcc6 	bl	8001be6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002260:	2300      	movs	r3, #0
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	ffffefff 	.word	0xffffefff
 8002270:	fffffcff 	.word	0xfffffcff
 8002274:	ffff8fff 	.word	0xffff8fff
 8002278:	ffffdfff 	.word	0xffffdfff
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800
 800228c:	ffffbfff 	.word	0xffffbfff

08002290 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7fd ff3d 	bl	800011c <__udivsi3>
 80022a2:	0003      	movs	r3, r0
 80022a4:	001a      	movs	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <LL_InitTick+0x30>)
 80022a8:	3a01      	subs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <LL_InitTick+0x30>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <LL_InitTick+0x30>)
 80022b4:	2205      	movs	r2, #5
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80022cc:	23fa      	movs	r3, #250	; 0xfa
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0011      	movs	r1, r2
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff ffdb 	bl	8002290 <LL_InitTick>
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <LL_mDelay+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80022f2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3301      	adds	r3, #1
 80022f8:	d00c      	beq.n	8002314 <LL_mDelay+0x30>
  {
    Delay++;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3301      	adds	r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002300:	e008      	b.n	8002314 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <LL_mDelay+0x40>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	025b      	lsls	r3, r3, #9
 800230a:	4013      	ands	r3, r2
 800230c:	d002      	beq.n	8002314 <LL_mDelay+0x30>
    {
      Delay--;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3b01      	subs	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f3      	bne.n	8002302 <LL_mDelay+0x1e>
    }
  }
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	e000e010 	.word	0xe000e010

08002328 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <LL_SetSystemCoreClock+0x18>)
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000008 	.word	0x20000008

08002344 <__errno>:
 8002344:	4b01      	ldr	r3, [pc, #4]	; (800234c <__errno+0x8>)
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	4770      	bx	lr
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	2000000c 	.word	0x2000000c

08002350 <__libc_init_array>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2600      	movs	r6, #0
 8002354:	4d0c      	ldr	r5, [pc, #48]	; (8002388 <__libc_init_array+0x38>)
 8002356:	4c0d      	ldr	r4, [pc, #52]	; (800238c <__libc_init_array+0x3c>)
 8002358:	1b64      	subs	r4, r4, r5
 800235a:	10a4      	asrs	r4, r4, #2
 800235c:	42a6      	cmp	r6, r4
 800235e:	d109      	bne.n	8002374 <__libc_init_array+0x24>
 8002360:	2600      	movs	r6, #0
 8002362:	f000 fc47 	bl	8002bf4 <_init>
 8002366:	4d0a      	ldr	r5, [pc, #40]	; (8002390 <__libc_init_array+0x40>)
 8002368:	4c0a      	ldr	r4, [pc, #40]	; (8002394 <__libc_init_array+0x44>)
 800236a:	1b64      	subs	r4, r4, r5
 800236c:	10a4      	asrs	r4, r4, #2
 800236e:	42a6      	cmp	r6, r4
 8002370:	d105      	bne.n	800237e <__libc_init_array+0x2e>
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	00b3      	lsls	r3, r6, #2
 8002376:	58eb      	ldr	r3, [r5, r3]
 8002378:	4798      	blx	r3
 800237a:	3601      	adds	r6, #1
 800237c:	e7ee      	b.n	800235c <__libc_init_array+0xc>
 800237e:	00b3      	lsls	r3, r6, #2
 8002380:	58eb      	ldr	r3, [r5, r3]
 8002382:	4798      	blx	r3
 8002384:	3601      	adds	r6, #1
 8002386:	e7f2      	b.n	800236e <__libc_init_array+0x1e>
 8002388:	080033c8 	.word	0x080033c8
 800238c:	080033c8 	.word	0x080033c8
 8002390:	080033c8 	.word	0x080033c8
 8002394:	080033cc 	.word	0x080033cc

08002398 <memset>:
 8002398:	0003      	movs	r3, r0
 800239a:	1882      	adds	r2, r0, r2
 800239c:	4293      	cmp	r3, r2
 800239e:	d100      	bne.n	80023a2 <memset+0xa>
 80023a0:	4770      	bx	lr
 80023a2:	7019      	strb	r1, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	e7f9      	b.n	800239c <memset+0x4>

080023a8 <siprintf>:
 80023a8:	b40e      	push	{r1, r2, r3}
 80023aa:	b500      	push	{lr}
 80023ac:	490b      	ldr	r1, [pc, #44]	; (80023dc <siprintf+0x34>)
 80023ae:	b09c      	sub	sp, #112	; 0x70
 80023b0:	ab1d      	add	r3, sp, #116	; 0x74
 80023b2:	9002      	str	r0, [sp, #8]
 80023b4:	9006      	str	r0, [sp, #24]
 80023b6:	9107      	str	r1, [sp, #28]
 80023b8:	9104      	str	r1, [sp, #16]
 80023ba:	4809      	ldr	r0, [pc, #36]	; (80023e0 <siprintf+0x38>)
 80023bc:	4909      	ldr	r1, [pc, #36]	; (80023e4 <siprintf+0x3c>)
 80023be:	cb04      	ldmia	r3!, {r2}
 80023c0:	9105      	str	r1, [sp, #20]
 80023c2:	6800      	ldr	r0, [r0, #0]
 80023c4:	a902      	add	r1, sp, #8
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	f000 f870 	bl	80024ac <_svfiprintf_r>
 80023cc:	2300      	movs	r3, #0
 80023ce:	9a02      	ldr	r2, [sp, #8]
 80023d0:	7013      	strb	r3, [r2, #0]
 80023d2:	b01c      	add	sp, #112	; 0x70
 80023d4:	bc08      	pop	{r3}
 80023d6:	b003      	add	sp, #12
 80023d8:	4718      	bx	r3
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	7fffffff 	.word	0x7fffffff
 80023e0:	2000000c 	.word	0x2000000c
 80023e4:	ffff0208 	.word	0xffff0208

080023e8 <__ssputs_r>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	688e      	ldr	r6, [r1, #8]
 80023ec:	b085      	sub	sp, #20
 80023ee:	0007      	movs	r7, r0
 80023f0:	000c      	movs	r4, r1
 80023f2:	9203      	str	r2, [sp, #12]
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	429e      	cmp	r6, r3
 80023f8:	d83c      	bhi.n	8002474 <__ssputs_r+0x8c>
 80023fa:	2390      	movs	r3, #144	; 0x90
 80023fc:	898a      	ldrh	r2, [r1, #12]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	421a      	tst	r2, r3
 8002402:	d034      	beq.n	800246e <__ssputs_r+0x86>
 8002404:	2503      	movs	r5, #3
 8002406:	6909      	ldr	r1, [r1, #16]
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	1a5b      	subs	r3, r3, r1
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	6963      	ldr	r3, [r4, #20]
 8002410:	9802      	ldr	r0, [sp, #8]
 8002412:	435d      	muls	r5, r3
 8002414:	0feb      	lsrs	r3, r5, #31
 8002416:	195d      	adds	r5, r3, r5
 8002418:	9b01      	ldr	r3, [sp, #4]
 800241a:	106d      	asrs	r5, r5, #1
 800241c:	3301      	adds	r3, #1
 800241e:	181b      	adds	r3, r3, r0
 8002420:	42ab      	cmp	r3, r5
 8002422:	d900      	bls.n	8002426 <__ssputs_r+0x3e>
 8002424:	001d      	movs	r5, r3
 8002426:	0553      	lsls	r3, r2, #21
 8002428:	d532      	bpl.n	8002490 <__ssputs_r+0xa8>
 800242a:	0029      	movs	r1, r5
 800242c:	0038      	movs	r0, r7
 800242e:	f000 fb31 	bl	8002a94 <_malloc_r>
 8002432:	1e06      	subs	r6, r0, #0
 8002434:	d109      	bne.n	800244a <__ssputs_r+0x62>
 8002436:	230c      	movs	r3, #12
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	2340      	movs	r3, #64	; 0x40
 800243c:	2001      	movs	r0, #1
 800243e:	89a2      	ldrh	r2, [r4, #12]
 8002440:	4240      	negs	r0, r0
 8002442:	4313      	orrs	r3, r2
 8002444:	81a3      	strh	r3, [r4, #12]
 8002446:	b005      	add	sp, #20
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	9a02      	ldr	r2, [sp, #8]
 800244c:	6921      	ldr	r1, [r4, #16]
 800244e:	f000 faba 	bl	80029c6 <memcpy>
 8002452:	89a3      	ldrh	r3, [r4, #12]
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <__ssputs_r+0xc0>)
 8002456:	401a      	ands	r2, r3
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	4313      	orrs	r3, r2
 800245c:	81a3      	strh	r3, [r4, #12]
 800245e:	9b02      	ldr	r3, [sp, #8]
 8002460:	6126      	str	r6, [r4, #16]
 8002462:	18f6      	adds	r6, r6, r3
 8002464:	6026      	str	r6, [r4, #0]
 8002466:	6165      	str	r5, [r4, #20]
 8002468:	9e01      	ldr	r6, [sp, #4]
 800246a:	1aed      	subs	r5, r5, r3
 800246c:	60a5      	str	r5, [r4, #8]
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	429e      	cmp	r6, r3
 8002472:	d900      	bls.n	8002476 <__ssputs_r+0x8e>
 8002474:	9e01      	ldr	r6, [sp, #4]
 8002476:	0032      	movs	r2, r6
 8002478:	9903      	ldr	r1, [sp, #12]
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	f000 faac 	bl	80029d8 <memmove>
 8002480:	68a3      	ldr	r3, [r4, #8]
 8002482:	2000      	movs	r0, #0
 8002484:	1b9b      	subs	r3, r3, r6
 8002486:	60a3      	str	r3, [r4, #8]
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	199e      	adds	r6, r3, r6
 800248c:	6026      	str	r6, [r4, #0]
 800248e:	e7da      	b.n	8002446 <__ssputs_r+0x5e>
 8002490:	002a      	movs	r2, r5
 8002492:	0038      	movs	r0, r7
 8002494:	f000 fb5c 	bl	8002b50 <_realloc_r>
 8002498:	1e06      	subs	r6, r0, #0
 800249a:	d1e0      	bne.n	800245e <__ssputs_r+0x76>
 800249c:	0038      	movs	r0, r7
 800249e:	6921      	ldr	r1, [r4, #16]
 80024a0:	f000 faae 	bl	8002a00 <_free_r>
 80024a4:	e7c7      	b.n	8002436 <__ssputs_r+0x4e>
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	fffffb7f 	.word	0xfffffb7f

080024ac <_svfiprintf_r>:
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	b0a1      	sub	sp, #132	; 0x84
 80024b0:	9003      	str	r0, [sp, #12]
 80024b2:	001d      	movs	r5, r3
 80024b4:	898b      	ldrh	r3, [r1, #12]
 80024b6:	000f      	movs	r7, r1
 80024b8:	0016      	movs	r6, r2
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	d511      	bpl.n	80024e2 <_svfiprintf_r+0x36>
 80024be:	690b      	ldr	r3, [r1, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10e      	bne.n	80024e2 <_svfiprintf_r+0x36>
 80024c4:	2140      	movs	r1, #64	; 0x40
 80024c6:	f000 fae5 	bl	8002a94 <_malloc_r>
 80024ca:	6038      	str	r0, [r7, #0]
 80024cc:	6138      	str	r0, [r7, #16]
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d105      	bne.n	80024de <_svfiprintf_r+0x32>
 80024d2:	230c      	movs	r3, #12
 80024d4:	9a03      	ldr	r2, [sp, #12]
 80024d6:	3801      	subs	r0, #1
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	b021      	add	sp, #132	; 0x84
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024de:	2340      	movs	r3, #64	; 0x40
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	2300      	movs	r3, #0
 80024e4:	ac08      	add	r4, sp, #32
 80024e6:	6163      	str	r3, [r4, #20]
 80024e8:	3320      	adds	r3, #32
 80024ea:	7663      	strb	r3, [r4, #25]
 80024ec:	3310      	adds	r3, #16
 80024ee:	76a3      	strb	r3, [r4, #26]
 80024f0:	9507      	str	r5, [sp, #28]
 80024f2:	0035      	movs	r5, r6
 80024f4:	782b      	ldrb	r3, [r5, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <_svfiprintf_r+0x52>
 80024fa:	2b25      	cmp	r3, #37	; 0x25
 80024fc:	d147      	bne.n	800258e <_svfiprintf_r+0xe2>
 80024fe:	1bab      	subs	r3, r5, r6
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	42b5      	cmp	r5, r6
 8002504:	d00c      	beq.n	8002520 <_svfiprintf_r+0x74>
 8002506:	0032      	movs	r2, r6
 8002508:	0039      	movs	r1, r7
 800250a:	9803      	ldr	r0, [sp, #12]
 800250c:	f7ff ff6c 	bl	80023e8 <__ssputs_r>
 8002510:	1c43      	adds	r3, r0, #1
 8002512:	d100      	bne.n	8002516 <_svfiprintf_r+0x6a>
 8002514:	e0ae      	b.n	8002674 <_svfiprintf_r+0x1c8>
 8002516:	6962      	ldr	r2, [r4, #20]
 8002518:	9b05      	ldr	r3, [sp, #20]
 800251a:	4694      	mov	ip, r2
 800251c:	4463      	add	r3, ip
 800251e:	6163      	str	r3, [r4, #20]
 8002520:	782b      	ldrb	r3, [r5, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d100      	bne.n	8002528 <_svfiprintf_r+0x7c>
 8002526:	e0a5      	b.n	8002674 <_svfiprintf_r+0x1c8>
 8002528:	2201      	movs	r2, #1
 800252a:	2300      	movs	r3, #0
 800252c:	4252      	negs	r2, r2
 800252e:	6062      	str	r2, [r4, #4]
 8002530:	a904      	add	r1, sp, #16
 8002532:	3254      	adds	r2, #84	; 0x54
 8002534:	1852      	adds	r2, r2, r1
 8002536:	1c6e      	adds	r6, r5, #1
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	60e3      	str	r3, [r4, #12]
 800253c:	60a3      	str	r3, [r4, #8]
 800253e:	7013      	strb	r3, [r2, #0]
 8002540:	65a3      	str	r3, [r4, #88]	; 0x58
 8002542:	2205      	movs	r2, #5
 8002544:	7831      	ldrb	r1, [r6, #0]
 8002546:	4854      	ldr	r0, [pc, #336]	; (8002698 <_svfiprintf_r+0x1ec>)
 8002548:	f000 fa32 	bl	80029b0 <memchr>
 800254c:	1c75      	adds	r5, r6, #1
 800254e:	2800      	cmp	r0, #0
 8002550:	d11f      	bne.n	8002592 <_svfiprintf_r+0xe6>
 8002552:	6822      	ldr	r2, [r4, #0]
 8002554:	06d3      	lsls	r3, r2, #27
 8002556:	d504      	bpl.n	8002562 <_svfiprintf_r+0xb6>
 8002558:	2353      	movs	r3, #83	; 0x53
 800255a:	a904      	add	r1, sp, #16
 800255c:	185b      	adds	r3, r3, r1
 800255e:	2120      	movs	r1, #32
 8002560:	7019      	strb	r1, [r3, #0]
 8002562:	0713      	lsls	r3, r2, #28
 8002564:	d504      	bpl.n	8002570 <_svfiprintf_r+0xc4>
 8002566:	2353      	movs	r3, #83	; 0x53
 8002568:	a904      	add	r1, sp, #16
 800256a:	185b      	adds	r3, r3, r1
 800256c:	212b      	movs	r1, #43	; 0x2b
 800256e:	7019      	strb	r1, [r3, #0]
 8002570:	7833      	ldrb	r3, [r6, #0]
 8002572:	2b2a      	cmp	r3, #42	; 0x2a
 8002574:	d016      	beq.n	80025a4 <_svfiprintf_r+0xf8>
 8002576:	0035      	movs	r5, r6
 8002578:	2100      	movs	r1, #0
 800257a:	200a      	movs	r0, #10
 800257c:	68e3      	ldr	r3, [r4, #12]
 800257e:	782a      	ldrb	r2, [r5, #0]
 8002580:	1c6e      	adds	r6, r5, #1
 8002582:	3a30      	subs	r2, #48	; 0x30
 8002584:	2a09      	cmp	r2, #9
 8002586:	d94e      	bls.n	8002626 <_svfiprintf_r+0x17a>
 8002588:	2900      	cmp	r1, #0
 800258a:	d111      	bne.n	80025b0 <_svfiprintf_r+0x104>
 800258c:	e017      	b.n	80025be <_svfiprintf_r+0x112>
 800258e:	3501      	adds	r5, #1
 8002590:	e7b0      	b.n	80024f4 <_svfiprintf_r+0x48>
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <_svfiprintf_r+0x1ec>)
 8002594:	6822      	ldr	r2, [r4, #0]
 8002596:	1ac0      	subs	r0, r0, r3
 8002598:	2301      	movs	r3, #1
 800259a:	4083      	lsls	r3, r0
 800259c:	4313      	orrs	r3, r2
 800259e:	002e      	movs	r6, r5
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	e7ce      	b.n	8002542 <_svfiprintf_r+0x96>
 80025a4:	9b07      	ldr	r3, [sp, #28]
 80025a6:	1d19      	adds	r1, r3, #4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	9107      	str	r1, [sp, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db01      	blt.n	80025b4 <_svfiprintf_r+0x108>
 80025b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80025b2:	e004      	b.n	80025be <_svfiprintf_r+0x112>
 80025b4:	425b      	negs	r3, r3
 80025b6:	60e3      	str	r3, [r4, #12]
 80025b8:	2302      	movs	r3, #2
 80025ba:	4313      	orrs	r3, r2
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	782b      	ldrb	r3, [r5, #0]
 80025c0:	2b2e      	cmp	r3, #46	; 0x2e
 80025c2:	d10a      	bne.n	80025da <_svfiprintf_r+0x12e>
 80025c4:	786b      	ldrb	r3, [r5, #1]
 80025c6:	2b2a      	cmp	r3, #42	; 0x2a
 80025c8:	d135      	bne.n	8002636 <_svfiprintf_r+0x18a>
 80025ca:	9b07      	ldr	r3, [sp, #28]
 80025cc:	3502      	adds	r5, #2
 80025ce:	1d1a      	adds	r2, r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	9207      	str	r2, [sp, #28]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db2b      	blt.n	8002630 <_svfiprintf_r+0x184>
 80025d8:	9309      	str	r3, [sp, #36]	; 0x24
 80025da:	4e30      	ldr	r6, [pc, #192]	; (800269c <_svfiprintf_r+0x1f0>)
 80025dc:	2203      	movs	r2, #3
 80025de:	0030      	movs	r0, r6
 80025e0:	7829      	ldrb	r1, [r5, #0]
 80025e2:	f000 f9e5 	bl	80029b0 <memchr>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d006      	beq.n	80025f8 <_svfiprintf_r+0x14c>
 80025ea:	2340      	movs	r3, #64	; 0x40
 80025ec:	1b80      	subs	r0, r0, r6
 80025ee:	4083      	lsls	r3, r0
 80025f0:	6822      	ldr	r2, [r4, #0]
 80025f2:	3501      	adds	r5, #1
 80025f4:	4313      	orrs	r3, r2
 80025f6:	6023      	str	r3, [r4, #0]
 80025f8:	7829      	ldrb	r1, [r5, #0]
 80025fa:	2206      	movs	r2, #6
 80025fc:	4828      	ldr	r0, [pc, #160]	; (80026a0 <_svfiprintf_r+0x1f4>)
 80025fe:	1c6e      	adds	r6, r5, #1
 8002600:	7621      	strb	r1, [r4, #24]
 8002602:	f000 f9d5 	bl	80029b0 <memchr>
 8002606:	2800      	cmp	r0, #0
 8002608:	d03c      	beq.n	8002684 <_svfiprintf_r+0x1d8>
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <_svfiprintf_r+0x1f8>)
 800260c:	2b00      	cmp	r3, #0
 800260e:	d125      	bne.n	800265c <_svfiprintf_r+0x1b0>
 8002610:	2207      	movs	r2, #7
 8002612:	9b07      	ldr	r3, [sp, #28]
 8002614:	3307      	adds	r3, #7
 8002616:	4393      	bics	r3, r2
 8002618:	3308      	adds	r3, #8
 800261a:	9307      	str	r3, [sp, #28]
 800261c:	6963      	ldr	r3, [r4, #20]
 800261e:	9a04      	ldr	r2, [sp, #16]
 8002620:	189b      	adds	r3, r3, r2
 8002622:	6163      	str	r3, [r4, #20]
 8002624:	e765      	b.n	80024f2 <_svfiprintf_r+0x46>
 8002626:	4343      	muls	r3, r0
 8002628:	0035      	movs	r5, r6
 800262a:	2101      	movs	r1, #1
 800262c:	189b      	adds	r3, r3, r2
 800262e:	e7a6      	b.n	800257e <_svfiprintf_r+0xd2>
 8002630:	2301      	movs	r3, #1
 8002632:	425b      	negs	r3, r3
 8002634:	e7d0      	b.n	80025d8 <_svfiprintf_r+0x12c>
 8002636:	2300      	movs	r3, #0
 8002638:	200a      	movs	r0, #10
 800263a:	001a      	movs	r2, r3
 800263c:	3501      	adds	r5, #1
 800263e:	6063      	str	r3, [r4, #4]
 8002640:	7829      	ldrb	r1, [r5, #0]
 8002642:	1c6e      	adds	r6, r5, #1
 8002644:	3930      	subs	r1, #48	; 0x30
 8002646:	2909      	cmp	r1, #9
 8002648:	d903      	bls.n	8002652 <_svfiprintf_r+0x1a6>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0c5      	beq.n	80025da <_svfiprintf_r+0x12e>
 800264e:	9209      	str	r2, [sp, #36]	; 0x24
 8002650:	e7c3      	b.n	80025da <_svfiprintf_r+0x12e>
 8002652:	4342      	muls	r2, r0
 8002654:	0035      	movs	r5, r6
 8002656:	2301      	movs	r3, #1
 8002658:	1852      	adds	r2, r2, r1
 800265a:	e7f1      	b.n	8002640 <_svfiprintf_r+0x194>
 800265c:	ab07      	add	r3, sp, #28
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	003a      	movs	r2, r7
 8002662:	0021      	movs	r1, r4
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <_svfiprintf_r+0x1fc>)
 8002666:	9803      	ldr	r0, [sp, #12]
 8002668:	e000      	b.n	800266c <_svfiprintf_r+0x1c0>
 800266a:	bf00      	nop
 800266c:	9004      	str	r0, [sp, #16]
 800266e:	9b04      	ldr	r3, [sp, #16]
 8002670:	3301      	adds	r3, #1
 8002672:	d1d3      	bne.n	800261c <_svfiprintf_r+0x170>
 8002674:	89bb      	ldrh	r3, [r7, #12]
 8002676:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002678:	065b      	lsls	r3, r3, #25
 800267a:	d400      	bmi.n	800267e <_svfiprintf_r+0x1d2>
 800267c:	e72d      	b.n	80024da <_svfiprintf_r+0x2e>
 800267e:	2001      	movs	r0, #1
 8002680:	4240      	negs	r0, r0
 8002682:	e72a      	b.n	80024da <_svfiprintf_r+0x2e>
 8002684:	ab07      	add	r3, sp, #28
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	003a      	movs	r2, r7
 800268a:	0021      	movs	r1, r4
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <_svfiprintf_r+0x1fc>)
 800268e:	9803      	ldr	r0, [sp, #12]
 8002690:	f000 f87c 	bl	800278c <_printf_i>
 8002694:	e7ea      	b.n	800266c <_svfiprintf_r+0x1c0>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	08003393 	.word	0x08003393
 800269c:	08003399 	.word	0x08003399
 80026a0:	0800339d 	.word	0x0800339d
 80026a4:	00000000 	.word	0x00000000
 80026a8:	080023e9 	.word	0x080023e9

080026ac <_printf_common>:
 80026ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026ae:	0015      	movs	r5, r2
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	688a      	ldr	r2, [r1, #8]
 80026b4:	690b      	ldr	r3, [r1, #16]
 80026b6:	000c      	movs	r4, r1
 80026b8:	9000      	str	r0, [sp, #0]
 80026ba:	4293      	cmp	r3, r2
 80026bc:	da00      	bge.n	80026c0 <_printf_common+0x14>
 80026be:	0013      	movs	r3, r2
 80026c0:	0022      	movs	r2, r4
 80026c2:	602b      	str	r3, [r5, #0]
 80026c4:	3243      	adds	r2, #67	; 0x43
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	d001      	beq.n	80026d0 <_printf_common+0x24>
 80026cc:	3301      	adds	r3, #1
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	069b      	lsls	r3, r3, #26
 80026d4:	d502      	bpl.n	80026dc <_printf_common+0x30>
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	3302      	adds	r3, #2
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	2306      	movs	r3, #6
 80026e0:	0017      	movs	r7, r2
 80026e2:	401f      	ands	r7, r3
 80026e4:	421a      	tst	r2, r3
 80026e6:	d027      	beq.n	8002738 <_printf_common+0x8c>
 80026e8:	0023      	movs	r3, r4
 80026ea:	3343      	adds	r3, #67	; 0x43
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	4193      	sbcs	r3, r2
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	0692      	lsls	r2, r2, #26
 80026f6:	d430      	bmi.n	800275a <_printf_common+0xae>
 80026f8:	0022      	movs	r2, r4
 80026fa:	9901      	ldr	r1, [sp, #4]
 80026fc:	9800      	ldr	r0, [sp, #0]
 80026fe:	9e08      	ldr	r6, [sp, #32]
 8002700:	3243      	adds	r2, #67	; 0x43
 8002702:	47b0      	blx	r6
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d025      	beq.n	8002754 <_printf_common+0xa8>
 8002708:	2306      	movs	r3, #6
 800270a:	6820      	ldr	r0, [r4, #0]
 800270c:	682a      	ldr	r2, [r5, #0]
 800270e:	68e1      	ldr	r1, [r4, #12]
 8002710:	2500      	movs	r5, #0
 8002712:	4003      	ands	r3, r0
 8002714:	2b04      	cmp	r3, #4
 8002716:	d103      	bne.n	8002720 <_printf_common+0x74>
 8002718:	1a8d      	subs	r5, r1, r2
 800271a:	43eb      	mvns	r3, r5
 800271c:	17db      	asrs	r3, r3, #31
 800271e:	401d      	ands	r5, r3
 8002720:	68a3      	ldr	r3, [r4, #8]
 8002722:	6922      	ldr	r2, [r4, #16]
 8002724:	4293      	cmp	r3, r2
 8002726:	dd01      	ble.n	800272c <_printf_common+0x80>
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	18ed      	adds	r5, r5, r3
 800272c:	2700      	movs	r7, #0
 800272e:	42bd      	cmp	r5, r7
 8002730:	d120      	bne.n	8002774 <_printf_common+0xc8>
 8002732:	2000      	movs	r0, #0
 8002734:	e010      	b.n	8002758 <_printf_common+0xac>
 8002736:	3701      	adds	r7, #1
 8002738:	68e3      	ldr	r3, [r4, #12]
 800273a:	682a      	ldr	r2, [r5, #0]
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	42bb      	cmp	r3, r7
 8002740:	ddd2      	ble.n	80026e8 <_printf_common+0x3c>
 8002742:	0022      	movs	r2, r4
 8002744:	2301      	movs	r3, #1
 8002746:	9901      	ldr	r1, [sp, #4]
 8002748:	9800      	ldr	r0, [sp, #0]
 800274a:	9e08      	ldr	r6, [sp, #32]
 800274c:	3219      	adds	r2, #25
 800274e:	47b0      	blx	r6
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d1f0      	bne.n	8002736 <_printf_common+0x8a>
 8002754:	2001      	movs	r0, #1
 8002756:	4240      	negs	r0, r0
 8002758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800275a:	2030      	movs	r0, #48	; 0x30
 800275c:	18e1      	adds	r1, r4, r3
 800275e:	3143      	adds	r1, #67	; 0x43
 8002760:	7008      	strb	r0, [r1, #0]
 8002762:	0021      	movs	r1, r4
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	3145      	adds	r1, #69	; 0x45
 8002768:	7809      	ldrb	r1, [r1, #0]
 800276a:	18a2      	adds	r2, r4, r2
 800276c:	3243      	adds	r2, #67	; 0x43
 800276e:	3302      	adds	r3, #2
 8002770:	7011      	strb	r1, [r2, #0]
 8002772:	e7c1      	b.n	80026f8 <_printf_common+0x4c>
 8002774:	0022      	movs	r2, r4
 8002776:	2301      	movs	r3, #1
 8002778:	9901      	ldr	r1, [sp, #4]
 800277a:	9800      	ldr	r0, [sp, #0]
 800277c:	9e08      	ldr	r6, [sp, #32]
 800277e:	321a      	adds	r2, #26
 8002780:	47b0      	blx	r6
 8002782:	1c43      	adds	r3, r0, #1
 8002784:	d0e6      	beq.n	8002754 <_printf_common+0xa8>
 8002786:	3701      	adds	r7, #1
 8002788:	e7d1      	b.n	800272e <_printf_common+0x82>
	...

0800278c <_printf_i>:
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	b08b      	sub	sp, #44	; 0x2c
 8002790:	9206      	str	r2, [sp, #24]
 8002792:	000a      	movs	r2, r1
 8002794:	3243      	adds	r2, #67	; 0x43
 8002796:	9307      	str	r3, [sp, #28]
 8002798:	9005      	str	r0, [sp, #20]
 800279a:	9204      	str	r2, [sp, #16]
 800279c:	7e0a      	ldrb	r2, [r1, #24]
 800279e:	000c      	movs	r4, r1
 80027a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80027a2:	2a78      	cmp	r2, #120	; 0x78
 80027a4:	d806      	bhi.n	80027b4 <_printf_i+0x28>
 80027a6:	2a62      	cmp	r2, #98	; 0x62
 80027a8:	d808      	bhi.n	80027bc <_printf_i+0x30>
 80027aa:	2a00      	cmp	r2, #0
 80027ac:	d100      	bne.n	80027b0 <_printf_i+0x24>
 80027ae:	e0c0      	b.n	8002932 <_printf_i+0x1a6>
 80027b0:	2a58      	cmp	r2, #88	; 0x58
 80027b2:	d052      	beq.n	800285a <_printf_i+0xce>
 80027b4:	0026      	movs	r6, r4
 80027b6:	3642      	adds	r6, #66	; 0x42
 80027b8:	7032      	strb	r2, [r6, #0]
 80027ba:	e022      	b.n	8002802 <_printf_i+0x76>
 80027bc:	0010      	movs	r0, r2
 80027be:	3863      	subs	r0, #99	; 0x63
 80027c0:	2815      	cmp	r0, #21
 80027c2:	d8f7      	bhi.n	80027b4 <_printf_i+0x28>
 80027c4:	f7fd fca0 	bl	8000108 <__gnu_thumb1_case_shi>
 80027c8:	001f0016 	.word	0x001f0016
 80027cc:	fff6fff6 	.word	0xfff6fff6
 80027d0:	fff6fff6 	.word	0xfff6fff6
 80027d4:	fff6001f 	.word	0xfff6001f
 80027d8:	fff6fff6 	.word	0xfff6fff6
 80027dc:	00a8fff6 	.word	0x00a8fff6
 80027e0:	009a0036 	.word	0x009a0036
 80027e4:	fff6fff6 	.word	0xfff6fff6
 80027e8:	fff600b9 	.word	0xfff600b9
 80027ec:	fff60036 	.word	0xfff60036
 80027f0:	009efff6 	.word	0x009efff6
 80027f4:	0026      	movs	r6, r4
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	3642      	adds	r6, #66	; 0x42
 80027fa:	1d11      	adds	r1, r2, #4
 80027fc:	6019      	str	r1, [r3, #0]
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	7033      	strb	r3, [r6, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	e0a7      	b.n	8002956 <_printf_i+0x1ca>
 8002806:	6808      	ldr	r0, [r1, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	1d0a      	adds	r2, r1, #4
 800280c:	0605      	lsls	r5, r0, #24
 800280e:	d50b      	bpl.n	8002828 <_printf_i+0x9c>
 8002810:	680d      	ldr	r5, [r1, #0]
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	2d00      	cmp	r5, #0
 8002816:	da03      	bge.n	8002820 <_printf_i+0x94>
 8002818:	232d      	movs	r3, #45	; 0x2d
 800281a:	9a04      	ldr	r2, [sp, #16]
 800281c:	426d      	negs	r5, r5
 800281e:	7013      	strb	r3, [r2, #0]
 8002820:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <_printf_i+0x21c>)
 8002822:	270a      	movs	r7, #10
 8002824:	9303      	str	r3, [sp, #12]
 8002826:	e032      	b.n	800288e <_printf_i+0x102>
 8002828:	680d      	ldr	r5, [r1, #0]
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	0641      	lsls	r1, r0, #25
 800282e:	d5f1      	bpl.n	8002814 <_printf_i+0x88>
 8002830:	b22d      	sxth	r5, r5
 8002832:	e7ef      	b.n	8002814 <_printf_i+0x88>
 8002834:	680d      	ldr	r5, [r1, #0]
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	1d08      	adds	r0, r1, #4
 800283a:	6018      	str	r0, [r3, #0]
 800283c:	062e      	lsls	r6, r5, #24
 800283e:	d501      	bpl.n	8002844 <_printf_i+0xb8>
 8002840:	680d      	ldr	r5, [r1, #0]
 8002842:	e003      	b.n	800284c <_printf_i+0xc0>
 8002844:	066d      	lsls	r5, r5, #25
 8002846:	d5fb      	bpl.n	8002840 <_printf_i+0xb4>
 8002848:	680d      	ldr	r5, [r1, #0]
 800284a:	b2ad      	uxth	r5, r5
 800284c:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <_printf_i+0x21c>)
 800284e:	270a      	movs	r7, #10
 8002850:	9303      	str	r3, [sp, #12]
 8002852:	2a6f      	cmp	r2, #111	; 0x6f
 8002854:	d117      	bne.n	8002886 <_printf_i+0xfa>
 8002856:	2708      	movs	r7, #8
 8002858:	e015      	b.n	8002886 <_printf_i+0xfa>
 800285a:	3145      	adds	r1, #69	; 0x45
 800285c:	700a      	strb	r2, [r1, #0]
 800285e:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <_printf_i+0x21c>)
 8002860:	9203      	str	r2, [sp, #12]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	ca20      	ldmia	r2!, {r5}
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	0608      	lsls	r0, r1, #24
 800286c:	d550      	bpl.n	8002910 <_printf_i+0x184>
 800286e:	07cb      	lsls	r3, r1, #31
 8002870:	d502      	bpl.n	8002878 <_printf_i+0xec>
 8002872:	2320      	movs	r3, #32
 8002874:	4319      	orrs	r1, r3
 8002876:	6021      	str	r1, [r4, #0]
 8002878:	2710      	movs	r7, #16
 800287a:	2d00      	cmp	r5, #0
 800287c:	d103      	bne.n	8002886 <_printf_i+0xfa>
 800287e:	2320      	movs	r3, #32
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	439a      	bics	r2, r3
 8002884:	6022      	str	r2, [r4, #0]
 8002886:	0023      	movs	r3, r4
 8002888:	2200      	movs	r2, #0
 800288a:	3343      	adds	r3, #67	; 0x43
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	6863      	ldr	r3, [r4, #4]
 8002890:	60a3      	str	r3, [r4, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db03      	blt.n	800289e <_printf_i+0x112>
 8002896:	2204      	movs	r2, #4
 8002898:	6821      	ldr	r1, [r4, #0]
 800289a:	4391      	bics	r1, r2
 800289c:	6021      	str	r1, [r4, #0]
 800289e:	2d00      	cmp	r5, #0
 80028a0:	d102      	bne.n	80028a8 <_printf_i+0x11c>
 80028a2:	9e04      	ldr	r6, [sp, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00c      	beq.n	80028c2 <_printf_i+0x136>
 80028a8:	9e04      	ldr	r6, [sp, #16]
 80028aa:	0028      	movs	r0, r5
 80028ac:	0039      	movs	r1, r7
 80028ae:	f7fd fcbb 	bl	8000228 <__aeabi_uidivmod>
 80028b2:	9b03      	ldr	r3, [sp, #12]
 80028b4:	3e01      	subs	r6, #1
 80028b6:	5c5b      	ldrb	r3, [r3, r1]
 80028b8:	7033      	strb	r3, [r6, #0]
 80028ba:	002b      	movs	r3, r5
 80028bc:	0005      	movs	r5, r0
 80028be:	429f      	cmp	r7, r3
 80028c0:	d9f3      	bls.n	80028aa <_printf_i+0x11e>
 80028c2:	2f08      	cmp	r7, #8
 80028c4:	d109      	bne.n	80028da <_printf_i+0x14e>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	07db      	lsls	r3, r3, #31
 80028ca:	d506      	bpl.n	80028da <_printf_i+0x14e>
 80028cc:	6863      	ldr	r3, [r4, #4]
 80028ce:	6922      	ldr	r2, [r4, #16]
 80028d0:	4293      	cmp	r3, r2
 80028d2:	dc02      	bgt.n	80028da <_printf_i+0x14e>
 80028d4:	2330      	movs	r3, #48	; 0x30
 80028d6:	3e01      	subs	r6, #1
 80028d8:	7033      	strb	r3, [r6, #0]
 80028da:	9b04      	ldr	r3, [sp, #16]
 80028dc:	1b9b      	subs	r3, r3, r6
 80028de:	6123      	str	r3, [r4, #16]
 80028e0:	9b07      	ldr	r3, [sp, #28]
 80028e2:	0021      	movs	r1, r4
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	9805      	ldr	r0, [sp, #20]
 80028e8:	9b06      	ldr	r3, [sp, #24]
 80028ea:	aa09      	add	r2, sp, #36	; 0x24
 80028ec:	f7ff fede 	bl	80026ac <_printf_common>
 80028f0:	1c43      	adds	r3, r0, #1
 80028f2:	d135      	bne.n	8002960 <_printf_i+0x1d4>
 80028f4:	2001      	movs	r0, #1
 80028f6:	4240      	negs	r0, r0
 80028f8:	b00b      	add	sp, #44	; 0x2c
 80028fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028fc:	2220      	movs	r2, #32
 80028fe:	6809      	ldr	r1, [r1, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	6022      	str	r2, [r4, #0]
 8002904:	0022      	movs	r2, r4
 8002906:	2178      	movs	r1, #120	; 0x78
 8002908:	3245      	adds	r2, #69	; 0x45
 800290a:	7011      	strb	r1, [r2, #0]
 800290c:	4a27      	ldr	r2, [pc, #156]	; (80029ac <_printf_i+0x220>)
 800290e:	e7a7      	b.n	8002860 <_printf_i+0xd4>
 8002910:	0648      	lsls	r0, r1, #25
 8002912:	d5ac      	bpl.n	800286e <_printf_i+0xe2>
 8002914:	b2ad      	uxth	r5, r5
 8002916:	e7aa      	b.n	800286e <_printf_i+0xe2>
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	680d      	ldr	r5, [r1, #0]
 800291c:	1d10      	adds	r0, r2, #4
 800291e:	6949      	ldr	r1, [r1, #20]
 8002920:	6018      	str	r0, [r3, #0]
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	062e      	lsls	r6, r5, #24
 8002926:	d501      	bpl.n	800292c <_printf_i+0x1a0>
 8002928:	6019      	str	r1, [r3, #0]
 800292a:	e002      	b.n	8002932 <_printf_i+0x1a6>
 800292c:	066d      	lsls	r5, r5, #25
 800292e:	d5fb      	bpl.n	8002928 <_printf_i+0x19c>
 8002930:	8019      	strh	r1, [r3, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	9e04      	ldr	r6, [sp, #16]
 8002936:	6123      	str	r3, [r4, #16]
 8002938:	e7d2      	b.n	80028e0 <_printf_i+0x154>
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	1d11      	adds	r1, r2, #4
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	6816      	ldr	r6, [r2, #0]
 8002942:	2100      	movs	r1, #0
 8002944:	0030      	movs	r0, r6
 8002946:	6862      	ldr	r2, [r4, #4]
 8002948:	f000 f832 	bl	80029b0 <memchr>
 800294c:	2800      	cmp	r0, #0
 800294e:	d001      	beq.n	8002954 <_printf_i+0x1c8>
 8002950:	1b80      	subs	r0, r0, r6
 8002952:	6060      	str	r0, [r4, #4]
 8002954:	6863      	ldr	r3, [r4, #4]
 8002956:	6123      	str	r3, [r4, #16]
 8002958:	2300      	movs	r3, #0
 800295a:	9a04      	ldr	r2, [sp, #16]
 800295c:	7013      	strb	r3, [r2, #0]
 800295e:	e7bf      	b.n	80028e0 <_printf_i+0x154>
 8002960:	6923      	ldr	r3, [r4, #16]
 8002962:	0032      	movs	r2, r6
 8002964:	9906      	ldr	r1, [sp, #24]
 8002966:	9805      	ldr	r0, [sp, #20]
 8002968:	9d07      	ldr	r5, [sp, #28]
 800296a:	47a8      	blx	r5
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d0c1      	beq.n	80028f4 <_printf_i+0x168>
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	079b      	lsls	r3, r3, #30
 8002974:	d415      	bmi.n	80029a2 <_printf_i+0x216>
 8002976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002978:	68e0      	ldr	r0, [r4, #12]
 800297a:	4298      	cmp	r0, r3
 800297c:	dabc      	bge.n	80028f8 <_printf_i+0x16c>
 800297e:	0018      	movs	r0, r3
 8002980:	e7ba      	b.n	80028f8 <_printf_i+0x16c>
 8002982:	0022      	movs	r2, r4
 8002984:	2301      	movs	r3, #1
 8002986:	9906      	ldr	r1, [sp, #24]
 8002988:	9805      	ldr	r0, [sp, #20]
 800298a:	9e07      	ldr	r6, [sp, #28]
 800298c:	3219      	adds	r2, #25
 800298e:	47b0      	blx	r6
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	d0af      	beq.n	80028f4 <_printf_i+0x168>
 8002994:	3501      	adds	r5, #1
 8002996:	68e3      	ldr	r3, [r4, #12]
 8002998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	42ab      	cmp	r3, r5
 800299e:	dcf0      	bgt.n	8002982 <_printf_i+0x1f6>
 80029a0:	e7e9      	b.n	8002976 <_printf_i+0x1ea>
 80029a2:	2500      	movs	r5, #0
 80029a4:	e7f7      	b.n	8002996 <_printf_i+0x20a>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	080033a4 	.word	0x080033a4
 80029ac:	080033b5 	.word	0x080033b5

080029b0 <memchr>:
 80029b0:	b2c9      	uxtb	r1, r1
 80029b2:	1882      	adds	r2, r0, r2
 80029b4:	4290      	cmp	r0, r2
 80029b6:	d101      	bne.n	80029bc <memchr+0xc>
 80029b8:	2000      	movs	r0, #0
 80029ba:	4770      	bx	lr
 80029bc:	7803      	ldrb	r3, [r0, #0]
 80029be:	428b      	cmp	r3, r1
 80029c0:	d0fb      	beq.n	80029ba <memchr+0xa>
 80029c2:	3001      	adds	r0, #1
 80029c4:	e7f6      	b.n	80029b4 <memchr+0x4>

080029c6 <memcpy>:
 80029c6:	2300      	movs	r3, #0
 80029c8:	b510      	push	{r4, lr}
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d100      	bne.n	80029d0 <memcpy+0xa>
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	5ccc      	ldrb	r4, [r1, r3]
 80029d2:	54c4      	strb	r4, [r0, r3]
 80029d4:	3301      	adds	r3, #1
 80029d6:	e7f8      	b.n	80029ca <memcpy+0x4>

080029d8 <memmove>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	4288      	cmp	r0, r1
 80029dc:	d902      	bls.n	80029e4 <memmove+0xc>
 80029de:	188b      	adds	r3, r1, r2
 80029e0:	4298      	cmp	r0, r3
 80029e2:	d303      	bcc.n	80029ec <memmove+0x14>
 80029e4:	2300      	movs	r3, #0
 80029e6:	e007      	b.n	80029f8 <memmove+0x20>
 80029e8:	5c8b      	ldrb	r3, [r1, r2]
 80029ea:	5483      	strb	r3, [r0, r2]
 80029ec:	3a01      	subs	r2, #1
 80029ee:	d2fb      	bcs.n	80029e8 <memmove+0x10>
 80029f0:	bd10      	pop	{r4, pc}
 80029f2:	5ccc      	ldrb	r4, [r1, r3]
 80029f4:	54c4      	strb	r4, [r0, r3]
 80029f6:	3301      	adds	r3, #1
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1fa      	bne.n	80029f2 <memmove+0x1a>
 80029fc:	e7f8      	b.n	80029f0 <memmove+0x18>
	...

08002a00 <_free_r>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	0005      	movs	r5, r0
 8002a04:	2900      	cmp	r1, #0
 8002a06:	d010      	beq.n	8002a2a <_free_r+0x2a>
 8002a08:	1f0c      	subs	r4, r1, #4
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da00      	bge.n	8002a12 <_free_r+0x12>
 8002a10:	18e4      	adds	r4, r4, r3
 8002a12:	0028      	movs	r0, r5
 8002a14:	f000 f8d4 	bl	8002bc0 <__malloc_lock>
 8002a18:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <_free_r+0x90>)
 8002a1a:	6813      	ldr	r3, [r2, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <_free_r+0x2c>
 8002a20:	6063      	str	r3, [r4, #4]
 8002a22:	6014      	str	r4, [r2, #0]
 8002a24:	0028      	movs	r0, r5
 8002a26:	f000 f8d3 	bl	8002bd0 <__malloc_unlock>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	d908      	bls.n	8002a42 <_free_r+0x42>
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	1860      	adds	r0, r4, r1
 8002a34:	4283      	cmp	r3, r0
 8002a36:	d1f3      	bne.n	8002a20 <_free_r+0x20>
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	1841      	adds	r1, r0, r1
 8002a3e:	6021      	str	r1, [r4, #0]
 8002a40:	e7ee      	b.n	8002a20 <_free_r+0x20>
 8002a42:	001a      	movs	r2, r3
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <_free_r+0x4e>
 8002a4a:	42a3      	cmp	r3, r4
 8002a4c:	d9f9      	bls.n	8002a42 <_free_r+0x42>
 8002a4e:	6811      	ldr	r1, [r2, #0]
 8002a50:	1850      	adds	r0, r2, r1
 8002a52:	42a0      	cmp	r0, r4
 8002a54:	d10b      	bne.n	8002a6e <_free_r+0x6e>
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	1809      	adds	r1, r1, r0
 8002a5a:	1850      	adds	r0, r2, r1
 8002a5c:	6011      	str	r1, [r2, #0]
 8002a5e:	4283      	cmp	r3, r0
 8002a60:	d1e0      	bne.n	8002a24 <_free_r+0x24>
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	1841      	adds	r1, r0, r1
 8002a68:	6011      	str	r1, [r2, #0]
 8002a6a:	6053      	str	r3, [r2, #4]
 8002a6c:	e7da      	b.n	8002a24 <_free_r+0x24>
 8002a6e:	42a0      	cmp	r0, r4
 8002a70:	d902      	bls.n	8002a78 <_free_r+0x78>
 8002a72:	230c      	movs	r3, #12
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	e7d5      	b.n	8002a24 <_free_r+0x24>
 8002a78:	6821      	ldr	r1, [r4, #0]
 8002a7a:	1860      	adds	r0, r4, r1
 8002a7c:	4283      	cmp	r3, r0
 8002a7e:	d103      	bne.n	8002a88 <_free_r+0x88>
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	1841      	adds	r1, r0, r1
 8002a86:	6021      	str	r1, [r4, #0]
 8002a88:	6063      	str	r3, [r4, #4]
 8002a8a:	6054      	str	r4, [r2, #4]
 8002a8c:	e7ca      	b.n	8002a24 <_free_r+0x24>
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	200000a0 	.word	0x200000a0

08002a94 <_malloc_r>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	2303      	movs	r3, #3
 8002a98:	1ccd      	adds	r5, r1, #3
 8002a9a:	439d      	bics	r5, r3
 8002a9c:	3508      	adds	r5, #8
 8002a9e:	0006      	movs	r6, r0
 8002aa0:	2d0c      	cmp	r5, #12
 8002aa2:	d21f      	bcs.n	8002ae4 <_malloc_r+0x50>
 8002aa4:	250c      	movs	r5, #12
 8002aa6:	42a9      	cmp	r1, r5
 8002aa8:	d81e      	bhi.n	8002ae8 <_malloc_r+0x54>
 8002aaa:	0030      	movs	r0, r6
 8002aac:	f000 f888 	bl	8002bc0 <__malloc_lock>
 8002ab0:	4925      	ldr	r1, [pc, #148]	; (8002b48 <_malloc_r+0xb4>)
 8002ab2:	680a      	ldr	r2, [r1, #0]
 8002ab4:	0014      	movs	r4, r2
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	d11a      	bne.n	8002af0 <_malloc_r+0x5c>
 8002aba:	4f24      	ldr	r7, [pc, #144]	; (8002b4c <_malloc_r+0xb8>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <_malloc_r+0x38>
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	0030      	movs	r0, r6
 8002ac6:	f000 f869 	bl	8002b9c <_sbrk_r>
 8002aca:	6038      	str	r0, [r7, #0]
 8002acc:	0029      	movs	r1, r5
 8002ace:	0030      	movs	r0, r6
 8002ad0:	f000 f864 	bl	8002b9c <_sbrk_r>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d12b      	bne.n	8002b30 <_malloc_r+0x9c>
 8002ad8:	230c      	movs	r3, #12
 8002ada:	0030      	movs	r0, r6
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	f000 f877 	bl	8002bd0 <__malloc_unlock>
 8002ae2:	e003      	b.n	8002aec <_malloc_r+0x58>
 8002ae4:	2d00      	cmp	r5, #0
 8002ae6:	dade      	bge.n	8002aa6 <_malloc_r+0x12>
 8002ae8:	230c      	movs	r3, #12
 8002aea:	6033      	str	r3, [r6, #0]
 8002aec:	2000      	movs	r0, #0
 8002aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	1b5b      	subs	r3, r3, r5
 8002af4:	d419      	bmi.n	8002b2a <_malloc_r+0x96>
 8002af6:	2b0b      	cmp	r3, #11
 8002af8:	d903      	bls.n	8002b02 <_malloc_r+0x6e>
 8002afa:	6023      	str	r3, [r4, #0]
 8002afc:	18e4      	adds	r4, r4, r3
 8002afe:	6025      	str	r5, [r4, #0]
 8002b00:	e003      	b.n	8002b0a <_malloc_r+0x76>
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	42a2      	cmp	r2, r4
 8002b06:	d10e      	bne.n	8002b26 <_malloc_r+0x92>
 8002b08:	600b      	str	r3, [r1, #0]
 8002b0a:	0030      	movs	r0, r6
 8002b0c:	f000 f860 	bl	8002bd0 <__malloc_unlock>
 8002b10:	0020      	movs	r0, r4
 8002b12:	2207      	movs	r2, #7
 8002b14:	300b      	adds	r0, #11
 8002b16:	1d23      	adds	r3, r4, #4
 8002b18:	4390      	bics	r0, r2
 8002b1a:	1ac2      	subs	r2, r0, r3
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	d0e6      	beq.n	8002aee <_malloc_r+0x5a>
 8002b20:	1a1b      	subs	r3, r3, r0
 8002b22:	50a3      	str	r3, [r4, r2]
 8002b24:	e7e3      	b.n	8002aee <_malloc_r+0x5a>
 8002b26:	6053      	str	r3, [r2, #4]
 8002b28:	e7ef      	b.n	8002b0a <_malloc_r+0x76>
 8002b2a:	0022      	movs	r2, r4
 8002b2c:	6864      	ldr	r4, [r4, #4]
 8002b2e:	e7c2      	b.n	8002ab6 <_malloc_r+0x22>
 8002b30:	2303      	movs	r3, #3
 8002b32:	1cc4      	adds	r4, r0, #3
 8002b34:	439c      	bics	r4, r3
 8002b36:	42a0      	cmp	r0, r4
 8002b38:	d0e1      	beq.n	8002afe <_malloc_r+0x6a>
 8002b3a:	1a21      	subs	r1, r4, r0
 8002b3c:	0030      	movs	r0, r6
 8002b3e:	f000 f82d 	bl	8002b9c <_sbrk_r>
 8002b42:	1c43      	adds	r3, r0, #1
 8002b44:	d1db      	bne.n	8002afe <_malloc_r+0x6a>
 8002b46:	e7c7      	b.n	8002ad8 <_malloc_r+0x44>
 8002b48:	200000a0 	.word	0x200000a0
 8002b4c:	200000a4 	.word	0x200000a4

08002b50 <_realloc_r>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	0007      	movs	r7, r0
 8002b54:	000d      	movs	r5, r1
 8002b56:	0016      	movs	r6, r2
 8002b58:	2900      	cmp	r1, #0
 8002b5a:	d105      	bne.n	8002b68 <_realloc_r+0x18>
 8002b5c:	0011      	movs	r1, r2
 8002b5e:	f7ff ff99 	bl	8002a94 <_malloc_r>
 8002b62:	0004      	movs	r4, r0
 8002b64:	0020      	movs	r0, r4
 8002b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d103      	bne.n	8002b74 <_realloc_r+0x24>
 8002b6c:	f7ff ff48 	bl	8002a00 <_free_r>
 8002b70:	0034      	movs	r4, r6
 8002b72:	e7f7      	b.n	8002b64 <_realloc_r+0x14>
 8002b74:	f000 f834 	bl	8002be0 <_malloc_usable_size_r>
 8002b78:	002c      	movs	r4, r5
 8002b7a:	42b0      	cmp	r0, r6
 8002b7c:	d2f2      	bcs.n	8002b64 <_realloc_r+0x14>
 8002b7e:	0031      	movs	r1, r6
 8002b80:	0038      	movs	r0, r7
 8002b82:	f7ff ff87 	bl	8002a94 <_malloc_r>
 8002b86:	1e04      	subs	r4, r0, #0
 8002b88:	d0ec      	beq.n	8002b64 <_realloc_r+0x14>
 8002b8a:	0029      	movs	r1, r5
 8002b8c:	0032      	movs	r2, r6
 8002b8e:	f7ff ff1a 	bl	80029c6 <memcpy>
 8002b92:	0029      	movs	r1, r5
 8002b94:	0038      	movs	r0, r7
 8002b96:	f7ff ff33 	bl	8002a00 <_free_r>
 8002b9a:	e7e3      	b.n	8002b64 <_realloc_r+0x14>

08002b9c <_sbrk_r>:
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	b570      	push	{r4, r5, r6, lr}
 8002ba0:	4d06      	ldr	r5, [pc, #24]	; (8002bbc <_sbrk_r+0x20>)
 8002ba2:	0004      	movs	r4, r0
 8002ba4:	0008      	movs	r0, r1
 8002ba6:	602b      	str	r3, [r5, #0]
 8002ba8:	f7fe fd7a 	bl	80016a0 <_sbrk>
 8002bac:	1c43      	adds	r3, r0, #1
 8002bae:	d103      	bne.n	8002bb8 <_sbrk_r+0x1c>
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d000      	beq.n	8002bb8 <_sbrk_r+0x1c>
 8002bb6:	6023      	str	r3, [r4, #0]
 8002bb8:	bd70      	pop	{r4, r5, r6, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	200004b0 	.word	0x200004b0

08002bc0 <__malloc_lock>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	4802      	ldr	r0, [pc, #8]	; (8002bcc <__malloc_lock+0xc>)
 8002bc4:	f000 f814 	bl	8002bf0 <__retarget_lock_acquire_recursive>
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	200004b8 	.word	0x200004b8

08002bd0 <__malloc_unlock>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4802      	ldr	r0, [pc, #8]	; (8002bdc <__malloc_unlock+0xc>)
 8002bd4:	f000 f80d 	bl	8002bf2 <__retarget_lock_release_recursive>
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	200004b8 	.word	0x200004b8

08002be0 <_malloc_usable_size_r>:
 8002be0:	1f0b      	subs	r3, r1, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1f18      	subs	r0, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da01      	bge.n	8002bee <_malloc_usable_size_r+0xe>
 8002bea:	580b      	ldr	r3, [r1, r0]
 8002bec:	18c0      	adds	r0, r0, r3
 8002bee:	4770      	bx	lr

08002bf0 <__retarget_lock_acquire_recursive>:
 8002bf0:	4770      	bx	lr

08002bf2 <__retarget_lock_release_recursive>:
 8002bf2:	4770      	bx	lr

08002bf4 <_init>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr

08002c00 <_fini>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr
