
LL_EX_I2C_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db4  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004144  08004144  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004144  08004144  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004144  08004144  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800414c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000070  080041bc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  080041bc  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006946  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a3  00000000  00000000  000269de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00028188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  00028a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a15  00000000  00000000  00029268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000061ff  00000000  00000000  0003dc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c732  00000000  00000000  00043e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b05ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002278  00000000  00000000  000b0604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003378 	.word	0x08003378

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003378 	.word	0x08003378

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_d2iz>:
 8000234:	000a      	movs	r2, r1
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	4c13      	ldr	r4, [pc, #76]	; (8000288 <__aeabi_d2iz+0x54>)
 800023a:	0053      	lsls	r3, r2, #1
 800023c:	0309      	lsls	r1, r1, #12
 800023e:	0005      	movs	r5, r0
 8000240:	0b09      	lsrs	r1, r1, #12
 8000242:	2000      	movs	r0, #0
 8000244:	0d5b      	lsrs	r3, r3, #21
 8000246:	0fd2      	lsrs	r2, r2, #31
 8000248:	42a3      	cmp	r3, r4
 800024a:	dd04      	ble.n	8000256 <__aeabi_d2iz+0x22>
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <__aeabi_d2iz+0x58>)
 800024e:	4283      	cmp	r3, r0
 8000250:	dd02      	ble.n	8000258 <__aeabi_d2iz+0x24>
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <__aeabi_d2iz+0x5c>)
 8000254:	18d0      	adds	r0, r2, r3
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	2080      	movs	r0, #128	; 0x80
 800025a:	0340      	lsls	r0, r0, #13
 800025c:	4301      	orrs	r1, r0
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <__aeabi_d2iz+0x60>)
 8000260:	1ac0      	subs	r0, r0, r3
 8000262:	281f      	cmp	r0, #31
 8000264:	dd08      	ble.n	8000278 <__aeabi_d2iz+0x44>
 8000266:	480c      	ldr	r0, [pc, #48]	; (8000298 <__aeabi_d2iz+0x64>)
 8000268:	1ac3      	subs	r3, r0, r3
 800026a:	40d9      	lsrs	r1, r3
 800026c:	000b      	movs	r3, r1
 800026e:	4258      	negs	r0, r3
 8000270:	2a00      	cmp	r2, #0
 8000272:	d1f0      	bne.n	8000256 <__aeabi_d2iz+0x22>
 8000274:	0018      	movs	r0, r3
 8000276:	e7ee      	b.n	8000256 <__aeabi_d2iz+0x22>
 8000278:	4c08      	ldr	r4, [pc, #32]	; (800029c <__aeabi_d2iz+0x68>)
 800027a:	40c5      	lsrs	r5, r0
 800027c:	46a4      	mov	ip, r4
 800027e:	4463      	add	r3, ip
 8000280:	4099      	lsls	r1, r3
 8000282:	000b      	movs	r3, r1
 8000284:	432b      	orrs	r3, r5
 8000286:	e7f2      	b.n	800026e <__aeabi_d2iz+0x3a>
 8000288:	000003fe 	.word	0x000003fe
 800028c:	0000041d 	.word	0x0000041d
 8000290:	7fffffff 	.word	0x7fffffff
 8000294:	00000433 	.word	0x00000433
 8000298:	00000413 	.word	0x00000413
 800029c:	fffffbed 	.word	0xfffffbed

080002a0 <__aeabi_ui2d>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	1e04      	subs	r4, r0, #0
 80002a4:	d010      	beq.n	80002c8 <__aeabi_ui2d+0x28>
 80002a6:	f000 f821 	bl	80002ec <__clzsi2>
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <__aeabi_ui2d+0x48>)
 80002ac:	1a1b      	subs	r3, r3, r0
 80002ae:	280a      	cmp	r0, #10
 80002b0:	dc11      	bgt.n	80002d6 <__aeabi_ui2d+0x36>
 80002b2:	220b      	movs	r2, #11
 80002b4:	0021      	movs	r1, r4
 80002b6:	1a12      	subs	r2, r2, r0
 80002b8:	40d1      	lsrs	r1, r2
 80002ba:	3015      	adds	r0, #21
 80002bc:	030a      	lsls	r2, r1, #12
 80002be:	055b      	lsls	r3, r3, #21
 80002c0:	4084      	lsls	r4, r0
 80002c2:	0b12      	lsrs	r2, r2, #12
 80002c4:	0d5b      	lsrs	r3, r3, #21
 80002c6:	e001      	b.n	80002cc <__aeabi_ui2d+0x2c>
 80002c8:	2300      	movs	r3, #0
 80002ca:	2200      	movs	r2, #0
 80002cc:	051b      	lsls	r3, r3, #20
 80002ce:	4313      	orrs	r3, r2
 80002d0:	0020      	movs	r0, r4
 80002d2:	0019      	movs	r1, r3
 80002d4:	bd10      	pop	{r4, pc}
 80002d6:	0022      	movs	r2, r4
 80002d8:	380b      	subs	r0, #11
 80002da:	4082      	lsls	r2, r0
 80002dc:	055b      	lsls	r3, r3, #21
 80002de:	0312      	lsls	r2, r2, #12
 80002e0:	2400      	movs	r4, #0
 80002e2:	0b12      	lsrs	r2, r2, #12
 80002e4:	0d5b      	lsrs	r3, r3, #21
 80002e6:	e7f1      	b.n	80002cc <__aeabi_ui2d+0x2c>
 80002e8:	0000041e 	.word	0x0000041e

080002ec <__clzsi2>:
 80002ec:	211c      	movs	r1, #28
 80002ee:	2301      	movs	r3, #1
 80002f0:	041b      	lsls	r3, r3, #16
 80002f2:	4298      	cmp	r0, r3
 80002f4:	d301      	bcc.n	80002fa <__clzsi2+0xe>
 80002f6:	0c00      	lsrs	r0, r0, #16
 80002f8:	3910      	subs	r1, #16
 80002fa:	0a1b      	lsrs	r3, r3, #8
 80002fc:	4298      	cmp	r0, r3
 80002fe:	d301      	bcc.n	8000304 <__clzsi2+0x18>
 8000300:	0a00      	lsrs	r0, r0, #8
 8000302:	3908      	subs	r1, #8
 8000304:	091b      	lsrs	r3, r3, #4
 8000306:	4298      	cmp	r0, r3
 8000308:	d301      	bcc.n	800030e <__clzsi2+0x22>
 800030a:	0900      	lsrs	r0, r0, #4
 800030c:	3904      	subs	r1, #4
 800030e:	a202      	add	r2, pc, #8	; (adr r2, 8000318 <__clzsi2+0x2c>)
 8000310:	5c10      	ldrb	r0, [r2, r0]
 8000312:	1840      	adds	r0, r0, r1
 8000314:	4770      	bx	lr
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	02020304 	.word	0x02020304
 800031c:	01010101 	.word	0x01010101
	...

08000328 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2201      	movs	r2, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}

08000344 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	2201      	movs	r2, #1
 8000352:	4013      	ands	r3, r2
 8000354:	2b01      	cmp	r3, #1
 8000356:	d101      	bne.n	800035c <LL_I2C_IsActiveFlag_TXE+0x18>
 8000358:	2301      	movs	r3, #1
 800035a:	e000      	b.n	800035e <LL_I2C_IsActiveFlag_TXE+0x1a>
 800035c:	2300      	movs	r3, #0
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}

08000366 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	2240      	movs	r2, #64	; 0x40
 8000374:	4013      	ands	r3, r2
 8000376:	2b40      	cmp	r3, #64	; 0x40
 8000378:	d101      	bne.n	800037e <LL_I2C_IsActiveFlag_TC+0x18>
 800037a:	2301      	movs	r3, #1
 800037c:	e000      	b.n	8000380 <LL_I2C_IsActiveFlag_TC+0x1a>
 800037e:	2300      	movs	r3, #0
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}

08000388 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	699a      	ldr	r2, [r3, #24]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	401a      	ands	r2, r3
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <LL_I2C_IsActiveFlag_BUSY+0x1e>
 80003a2:	2301      	movs	r3, #1
 80003a4:	e000      	b.n	80003a8 <LL_I2C_IsActiveFlag_BUSY+0x20>
 80003a6:	2300      	movs	r3, #0
}
 80003a8:	0018      	movs	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LL_I2C_SetTransferSize>:
  * @param  I2Cx I2C Instance.
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <LL_I2C_SetTransferSize+0x24>)
 80003c0:	401a      	ands	r2, r3
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	041b      	lsls	r3, r3, #16
 80003c6:	431a      	orrs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	605a      	str	r2, [r3, #4]
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b002      	add	sp, #8
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	ff00ffff 	.word	0xff00ffff

080003d8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <LL_I2C_AcknowledgeNextData+0x24>)
 80003e8:	401a      	ands	r2, r3
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	605a      	str	r2, [r3, #4]
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	ffff7fff 	.word	0xffff7fff

08000400 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	01d2      	lsls	r2, r2, #7
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <LL_I2C_SetTransferRequest>:
  *         @arg @ref LL_I2C_REQUEST_WRITE
  *         @arg @ref LL_I2C_REQUEST_READ
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <LL_I2C_SetTransferRequest+0x24>)
 8000430:	401a      	ands	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	431a      	orrs	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	605a      	str	r2, [r3, #4]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	fffffbff 	.word	0xfffffbff

08000448 <LL_I2C_SetSlaveAddr>:
  * @param  I2Cx I2C Instance.
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	0a9b      	lsrs	r3, r3, #10
 8000458:	029a      	lsls	r2, r3, #10
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	431a      	orrs	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	605a      	str	r2, [r3, #4]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	0d51      	lsrs	r1, r2, #21
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	00d2      	lsls	r2, r2, #3
 8000486:	400a      	ands	r2, r1
 8000488:	490a      	ldr	r1, [pc, #40]	; (80004b4 <LL_I2C_HandleTransfer+0x48>)
 800048a:	430a      	orrs	r2, r1
 800048c:	43d2      	mvns	r2, r2
 800048e:	401a      	ands	r2, r3
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4319      	orrs	r1, r3
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	4319      	orrs	r1, r3
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	4319      	orrs	r1, r3
 80004a0:	69fb      	ldr	r3, [r7, #28]
 80004a2:	430b      	orrs	r3, r1
 80004a4:	431a      	orrs	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b004      	add	sp, #16
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	03ff7bff 	.word	0x03ff7bff

080004b8 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	000a      	movs	r2, r1
 80004c2:	1cfb      	adds	r3, r7, #3
 80004c4:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80004c6:	1cfb      	adds	r3, r7, #3
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004e2:	6959      	ldr	r1, [r3, #20]
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	025b      	lsls	r3, r3, #9
 8000510:	4013      	ands	r3, r2
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000514:	4694      	mov	ip, r2
 8000516:	4463      	add	r3, ip
 8000518:	425a      	negs	r2, r3
 800051a:	4153      	adcs	r3, r2
 800051c:	b2db      	uxtb	r3, r3
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	e000e010 	.word	0xe000e010
 8000528:	ffff0000 	.word	0xffff0000

0800052c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <LL_SYSTICK_EnableIT+0x18>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <LL_SYSTICK_EnableIT+0x18>)
 8000536:	2102      	movs	r1, #2
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	e000e010 	.word	0xe000e010

08000548 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	431a      	orrs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}

0800057c <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000588:	0018      	movs	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	b002      	add	sp, #8
 800058e:	bd80      	pop	{r7, pc}

08000590 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2202      	movs	r2, #2
 800059c:	4252      	negs	r2, r2
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	2201      	movs	r2, #1
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	615a      	str	r2, [r3, #20]
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	2240      	movs	r2, #64	; 0x40
 80005d2:	4013      	ands	r3, r2
 80005d4:	2b40      	cmp	r3, #64	; 0x40
 80005d6:	d101      	bne.n	80005dc <LL_USART_IsActiveFlag_TC+0x18>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <LL_USART_IsActiveFlag_TC+0x1a>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2208      	movs	r2, #8
 80005f2:	621a      	str	r2, [r3, #32]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000604:	f3ef 8310 	mrs	r3, PRIMASK
 8000608:	60bb      	str	r3, [r7, #8]
  return(result);
 800060a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f383 8810 	msr	PRIMASK, r3
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2220      	movs	r2, #32
 8000620:	431a      	orrs	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	f383 8810 	msr	PRIMASK, r3
}
 8000630:	46c0      	nop			; (mov r8, r8)
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b006      	add	sp, #24
 8000638:	bd80      	pop	{r7, pc}

0800063a <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b086      	sub	sp, #24
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000642:	f3ef 8310 	mrs	r3, PRIMASK
 8000646:	60bb      	str	r3, [r7, #8]
  return(result);
 8000648:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	2301      	movs	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f383 8810 	msr	PRIMASK, r3
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2201      	movs	r2, #1
 800065e:	431a      	orrs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	f383 8810 	msr	PRIMASK, r3
}
 800066e:	46c0      	nop			; (mov r8, r8)
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b006      	add	sp, #24
 8000676:	bd80      	pop	{r7, pc}

08000678 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}

08000690 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	000a      	movs	r2, r1
 800069a:	1cfb      	adds	r3, r7, #3
 800069c:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800069e:	1cfb      	adds	r3, r7, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	435b      	muls	r3, r3
 80006c4:	001a      	movs	r2, r3
 80006c6:	0013      	movs	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	189b      	adds	r3, r3, r2
 80006cc:	43db      	mvns	r3, r3
 80006ce:	400b      	ands	r3, r1
 80006d0:	001a      	movs	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	435b      	muls	r3, r3
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	434b      	muls	r3, r1
 80006da:	431a      	orrs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	43d2      	mvns	r2, r2
 80006fc:	401a      	ands	r2, r3
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	434b      	muls	r3, r1
 8000704:	431a      	orrs	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	605a      	str	r2, [r3, #4]
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b004      	add	sp, #16
 8000710:	bd80      	pop	{r7, pc}

08000712 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	60f8      	str	r0, [r7, #12]
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6899      	ldr	r1, [r3, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	435b      	muls	r3, r3
 8000726:	001a      	movs	r2, r3
 8000728:	0013      	movs	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	189b      	adds	r3, r3, r2
 800072e:	43db      	mvns	r3, r3
 8000730:	400b      	ands	r3, r1
 8000732:	001a      	movs	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	435b      	muls	r3, r3
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	434b      	muls	r3, r1
 800073c:	431a      	orrs	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	609a      	str	r2, [r3, #8]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}

0800074a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b084      	sub	sp, #16
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	68d9      	ldr	r1, [r3, #12]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	435b      	muls	r3, r3
 800075e:	001a      	movs	r2, r3
 8000760:	0013      	movs	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	189b      	adds	r3, r3, r2
 8000766:	43db      	mvns	r3, r3
 8000768:	400b      	ands	r3, r1
 800076a:	001a      	movs	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	435b      	muls	r3, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	434b      	muls	r3, r1
 8000774:	431a      	orrs	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	60da      	str	r2, [r3, #12]
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bd80      	pop	{r7, pc}

08000782 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	691b      	ldr	r3, [r3, #16]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	4013      	ands	r3, r2
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	425a      	negs	r2, r3
 800079a:	4153      	adcs	r3, r2
 800079c:	b2db      	uxtb	r3, r3
}
 800079e:	0018      	movs	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	619a      	str	r2, [r3, #24]
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}

080007be <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	4013      	ands	r3, r2
 80007ec:	041a      	lsls	r2, r3, #16
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	43db      	mvns	r3, r3
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	400b      	ands	r3, r1
 80007f6:	431a      	orrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	619a      	str	r2, [r3, #24]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b004      	add	sp, #16
 8000802:	bd80      	pop	{r7, pc}

08000804 <I2C_Handle>:
void SPI_ReadData_MEMS();
void Calgulate_FreqTim14();
void USART_CharReception_Callback(void);

static inline uint8_t I2C_Handle(uint8_t memAddr, uint8_t* pData, uint16_t size)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af02      	add	r7, sp, #8
 800080a:	6039      	str	r1, [r7, #0]
 800080c:	0011      	movs	r1, r2
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	1c02      	adds	r2, r0, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	1c0a      	adds	r2, r1, #0
 8000818:	801a      	strh	r2, [r3, #0]

		int32_t to = 0, timeout = 10;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	230a      	movs	r3, #10
 8000820:	60bb      	str	r3, [r7, #8]
		to = timeout;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	60fb      	str	r3, [r7, #12]

		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 8000826:	e00a      	b.n	800083e <I2C_Handle+0x3a>
			if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000828:	f7ff fe6c 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d006      	beq.n	800083e <I2C_Handle+0x3a>
				if(to-- == 0) {
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	60fa      	str	r2, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <I2C_Handle+0x3a>
					return 1;
 800083a:	2301      	movs	r3, #1
 800083c:	e075      	b.n	800092a <I2C_Handle+0x126>
		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 800083e:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <I2C_Handle+0x130>)
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fda1 	bl	8000388 <LL_I2C_IsActiveFlag_BUSY>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d1ee      	bne.n	8000828 <I2C_Handle+0x24>
				}
			}
		}

		to = timeout;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	60fb      	str	r3, [r7, #12]
//	  /* Master Generate Start condition */
	  to = timeout;
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	60fb      	str	r3, [r7, #12]
	 LL_I2C_HandleTransfer(I2C2, LCD_SLAVE_ADD, LL_I2C_ADDRSLAVE_7BIT, size+1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	001a      	movs	r2, r3
 800085a:	4836      	ldr	r0, [pc, #216]	; (8000934 <I2C_Handle+0x130>)
 800085c:	4b36      	ldr	r3, [pc, #216]	; (8000938 <I2C_Handle+0x134>)
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2300      	movs	r3, #0
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	0013      	movs	r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	2178      	movs	r1, #120	; 0x78
 800086a:	f7ff fdff 	bl	800046c <LL_I2C_HandleTransfer>

	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 800086e:	e00a      	b.n	8000886 <I2C_Handle+0x82>
	  		if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000870:	f7ff fe48 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d006      	beq.n	8000886 <I2C_Handle+0x82>
	  			if(to-- == 0) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	60fa      	str	r2, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <I2C_Handle+0x82>
	  				return 1;
 8000882:	2301      	movs	r3, #1
 8000884:	e051      	b.n	800092a <I2C_Handle+0x126>
	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <I2C_Handle+0x130>)
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff fd5b 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d0ee      	beq.n	8000870 <I2C_Handle+0x6c>
	  			}
	  		}
	  	}
	  		to = timeout;
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	60fb      	str	r3, [r7, #12]
	  		LL_I2C_TransmitData8(I2C2, memAddr);
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4a26      	ldr	r2, [pc, #152]	; (8000934 <I2C_Handle+0x130>)
 800089c:	0019      	movs	r1, r3
 800089e:	0010      	movs	r0, r2
 80008a0:	f7ff fe0a 	bl	80004b8 <LL_I2C_TransmitData8>

	  		do {
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 80008a4:	e00a      	b.n	80008bc <I2C_Handle+0xb8>
	  				if (LL_SYSTICK_IsActiveCounterFlag()) {
 80008a6:	f7ff fe2d 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d006      	beq.n	80008bc <I2C_Handle+0xb8>
	  					if(to-- == 0) {
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	60fa      	str	r2, [r7, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <I2C_Handle+0xb8>
	  						return 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e036      	b.n	800092a <I2C_Handle+0x126>
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <I2C_Handle+0x130>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fd40 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d105      	bne.n	80008d4 <I2C_Handle+0xd0>
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <I2C_Handle+0x130>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fd4b 	bl	8000366 <LL_I2C_IsActiveFlag_TC>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d0e8      	beq.n	80008a6 <I2C_Handle+0xa2>
	  					}
	  				}
	  			}
	  			to = timeout;
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60fb      	str	r3, [r7, #12]
	  			LL_I2C_TransmitData8(I2C2, (*pData++));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	603a      	str	r2, [r7, #0]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <I2C_Handle+0x130>)
 80008e2:	0019      	movs	r1, r3
 80008e4:	0010      	movs	r0, r2
 80008e6:	f7ff fde7 	bl	80004b8 <LL_I2C_TransmitData8>
	  		} while (--size > 0);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	1d3a      	adds	r2, r7, #4
 80008ee:	8812      	ldrh	r2, [r2, #0]
 80008f0:	3a01      	subs	r2, #1
 80008f2:	801a      	strh	r2, [r3, #0]
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1df      	bne.n	80008bc <I2C_Handle+0xb8>

	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80008fc:	e00a      	b.n	8000914 <I2C_Handle+0x110>
	  			if (LL_SYSTICK_IsActiveCounterFlag()) {
 80008fe:	f7ff fe01 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d006      	beq.n	8000914 <I2C_Handle+0x110>
	  				if(to-- == 0) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	60fa      	str	r2, [r7, #12]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <I2C_Handle+0x110>
	  					return 1;
 8000910:	2301      	movs	r3, #1
 8000912:	e00a      	b.n	800092a <I2C_Handle+0x126>
	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <I2C_Handle+0x130>)
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fd14 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d0ee      	beq.n	80008fe <I2C_Handle+0xfa>
	  				}
	  			}
	  		}
	  		LL_I2C_GenerateStopCondition(I2C2);
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <I2C_Handle+0x130>)
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff fd6c 	bl	8000400 <LL_I2C_GenerateStopCondition>
	  		return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b004      	add	sp, #16
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40005800 	.word	0x40005800
 8000938:	80002000 	.word	0x80002000

0800093c <BSL_Startup>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Startup()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	LED_Init();
 8000940:	f000 f986 	bl	8000c50 <LED_Init>
	Init_TIM6();
 8000944:	f000 f998 	bl	8000c78 <Init_TIM6>
	IIC_Start();
 8000948:	f000 f9c8 	bl	8000cdc <IIC_Start>
	Display_Init();
 800094c:	f000 f820 	bl	8000990 <Display_Init>
	DHT11_Init();
 8000950:	f000 f9a6 	bl	8000ca0 <DHT11_Init>
	Init_UART1();
 8000954:	f000 fb06 	bl	8000f64 <Init_UART1>
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <BSL_Config>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Config()
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8000962:	f7ff fde3 	bl	800052c <LL_SYSTICK_EnableIT>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <BSL_Control>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Control()
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	while(1)
	{
		if(ms500ms)
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <BSL_Control+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0fa      	beq.n	8000970 <BSL_Control+0x4>
		{
			ms500ms = false;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <BSL_Control+0x20>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

			Display_Test();
 8000980:	f000 f916 	bl	8000bb0 <Display_Test>

			ReadDHT_Data();
 8000984:	f000 f9ca 	bl	8000d1c <ReadDHT_Data>
		if(ms500ms)
 8000988:	e7f2      	b.n	8000970 <BSL_Control+0x4>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	2000008e 	.word	0x2000008e

08000990 <Display_Init>:
  * @brief   init func. for display.
  * @param  ------
  * @retval none
  */
void Display_Init()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
		int status = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]

			LL_I2C_SetTransferSize(I2C2, 50);
 800099a:	4b83      	ldr	r3, [pc, #524]	; (8000ba8 <Display_Init+0x218>)
 800099c:	2132      	movs	r1, #50	; 0x32
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff fd06 	bl	80003b0 <LL_I2C_SetTransferSize>
		// Init LCD
			status += ssd1306_WriteCommand(0xAE);   // Display off
 80009a4:	20ae      	movs	r0, #174	; 0xae
 80009a6:	f000 f937 	bl	8000c18 <ssd1306_WriteCommand>
 80009aa:	0003      	movs	r3, r0
 80009ac:	001a      	movs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	189b      	adds	r3, r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
		if (status != 0) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d000      	beq.n	80009bc <Display_Init+0x2c>
 80009ba:	e0ef      	b.n	8000b9c <Display_Init+0x20c>
			return ;
		}
			status += ssd1306_WriteCommand( 0x20);   // Set Memory Addressing Mode
 80009bc:	2020      	movs	r0, #32
 80009be:	f000 f92b 	bl	8000c18 <ssd1306_WriteCommand>
 80009c2:	0003      	movs	r3, r0
 80009c4:	001a      	movs	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	189b      	adds	r3, r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f923 	bl	8000c18 <ssd1306_WriteCommand>
 80009d2:	0003      	movs	r3, r0
 80009d4:	001a      	movs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	189b      	adds	r3, r3, r2
 80009da:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80009dc:	20b0      	movs	r0, #176	; 0xb0
 80009de:	f000 f91b 	bl	8000c18 <ssd1306_WriteCommand>
 80009e2:	0003      	movs	r3, r0
 80009e4:	001a      	movs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	189b      	adds	r3, r3, r2
 80009ea:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xC8);   // Set COM Output Scan Direction
 80009ec:	20c8      	movs	r0, #200	; 0xc8
 80009ee:	f000 f913 	bl	8000c18 <ssd1306_WriteCommand>
 80009f2:	0003      	movs	r3, r0
 80009f4:	001a      	movs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	189b      	adds	r3, r3, r2
 80009fa:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // Set low column address
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 f90b 	bl	8000c18 <ssd1306_WriteCommand>
 8000a02:	0003      	movs	r3, r0
 8000a04:	001a      	movs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	189b      	adds	r3, r3, r2
 8000a0a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x10);   // Set high column address
 8000a0c:	2010      	movs	r0, #16
 8000a0e:	f000 f903 	bl	8000c18 <ssd1306_WriteCommand>
 8000a12:	0003      	movs	r3, r0
 8000a14:	001a      	movs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	189b      	adds	r3, r3, r2
 8000a1a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x40);   // Set start line address
 8000a1c:	2040      	movs	r0, #64	; 0x40
 8000a1e:	f000 f8fb 	bl	8000c18 <ssd1306_WriteCommand>
 8000a22:	0003      	movs	r3, r0
 8000a24:	001a      	movs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	189b      	adds	r3, r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x81);   // set contrast control register
 8000a2c:	2081      	movs	r0, #129	; 0x81
 8000a2e:	f000 f8f3 	bl	8000c18 <ssd1306_WriteCommand>
 8000a32:	0003      	movs	r3, r0
 8000a34:	001a      	movs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xFF);
 8000a3c:	20ff      	movs	r0, #255	; 0xff
 8000a3e:	f000 f8eb 	bl	8000c18 <ssd1306_WriteCommand>
 8000a42:	0003      	movs	r3, r0
 8000a44:	001a      	movs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	189b      	adds	r3, r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA1);   // Set segment re-map 0 to 127
 8000a4c:	20a1      	movs	r0, #161	; 0xa1
 8000a4e:	f000 f8e3 	bl	8000c18 <ssd1306_WriteCommand>
 8000a52:	0003      	movs	r3, r0
 8000a54:	001a      	movs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA6);   // Set normal display
 8000a5c:	20a6      	movs	r0, #166	; 0xa6
 8000a5e:	f000 f8db 	bl	8000c18 <ssd1306_WriteCommand>
 8000a62:	0003      	movs	r3, r0
 8000a64:	001a      	movs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	189b      	adds	r3, r3, r2
 8000a6a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA8);   // Set multiplex ratio(1 to 64)
 8000a6c:	20a8      	movs	r0, #168	; 0xa8
 8000a6e:	f000 f8d3 	bl	8000c18 <ssd1306_WriteCommand>
 8000a72:	0003      	movs	r3, r0
 8000a74:	001a      	movs	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x1F);	// ( SSD1306_HEIGHT == 32)
 8000a7c:	201f      	movs	r0, #31
 8000a7e:	f000 f8cb 	bl	8000c18 <ssd1306_WriteCommand>
 8000a82:	0003      	movs	r3, r0
 8000a84:	001a      	movs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	189b      	adds	r3, r3, r2
 8000a8a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a8c:	20a4      	movs	r0, #164	; 0xa4
 8000a8e:	f000 f8c3 	bl	8000c18 <ssd1306_WriteCommand>
 8000a92:	0003      	movs	r3, r0
 8000a94:	001a      	movs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD3);   // Set display offset
 8000a9c:	20d3      	movs	r0, #211	; 0xd3
 8000a9e:	f000 f8bb 	bl	8000c18 <ssd1306_WriteCommand>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	189b      	adds	r3, r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // No offset
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8b3 	bl	8000c18 <ssd1306_WriteCommand>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	189b      	adds	r3, r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000abc:	20d5      	movs	r0, #213	; 0xd5
 8000abe:	f000 f8ab 	bl	8000c18 <ssd1306_WriteCommand>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	189b      	adds	r3, r3, r2
 8000aca:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xF0);   // Set divide ratio
 8000acc:	20f0      	movs	r0, #240	; 0xf0
 8000ace:	f000 f8a3 	bl	8000c18 <ssd1306_WriteCommand>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	189b      	adds	r3, r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD9);   // Set pre-charge period
 8000adc:	20d9      	movs	r0, #217	; 0xd9
 8000ade:	f000 f89b 	bl	8000c18 <ssd1306_WriteCommand>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	189b      	adds	r3, r3, r2
 8000aea:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x22);
 8000aec:	2022      	movs	r0, #34	; 0x22
 8000aee:	f000 f893 	bl	8000c18 <ssd1306_WriteCommand>
 8000af2:	0003      	movs	r3, r0
 8000af4:	001a      	movs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	189b      	adds	r3, r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xDA);   // Set com pins hardware configuration
 8000afc:	20da      	movs	r0, #218	; 0xda
 8000afe:	f000 f88b 	bl	8000c18 <ssd1306_WriteCommand>
 8000b02:	0003      	movs	r3, r0
 8000b04:	001a      	movs	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	189b      	adds	r3, r3, r2
 8000b0a:	607b      	str	r3, [r7, #4]
		#ifdef SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0x32);   // Enable COM left/right remap
		#else
		    status += ssd1306_WriteCommand( 0x02);   // Do not use COM left/right remap
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 f883 	bl	8000c18 <ssd1306_WriteCommand>
 8000b12:	0003      	movs	r3, r0
 8000b14:	001a      	movs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	189b      	adds	r3, r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
		#endif // SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0xDB);   // Set vcomh
 8000b1c:	20db      	movs	r0, #219	; 0xdb
 8000b1e:	f000 f87b 	bl	8000c18 <ssd1306_WriteCommand>
 8000b22:	0003      	movs	r3, r0
 8000b24:	001a      	movs	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	189b      	adds	r3, r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x20);   // 0x20,0.77xVcc
 8000b2c:	2020      	movs	r0, #32
 8000b2e:	f000 f873 	bl	8000c18 <ssd1306_WriteCommand>
 8000b32:	0003      	movs	r3, r0
 8000b34:	001a      	movs	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	189b      	adds	r3, r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x8D);   // Set DC-DC enable
 8000b3c:	208d      	movs	r0, #141	; 0x8d
 8000b3e:	f000 f86b 	bl	8000c18 <ssd1306_WriteCommand>
 8000b42:	0003      	movs	r3, r0
 8000b44:	001a      	movs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	189b      	adds	r3, r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x14);   //
 8000b4c:	2014      	movs	r0, #20
 8000b4e:	f000 f863 	bl	8000c18 <ssd1306_WriteCommand>
 8000b52:	0003      	movs	r3, r0
 8000b54:	001a      	movs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xAF);   // Turn on SSD1306 panel
 8000b5c:	20af      	movs	r0, #175	; 0xaf
 8000b5e:	f000 f85b 	bl	8000c18 <ssd1306_WriteCommand>
 8000b62:	0003      	movs	r3, r0
 8000b64:	001a      	movs	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	607b      	str	r3, [r7, #4]

		    if (status != 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d116      	bne.n	8000ba0 <Display_Init+0x210>
		        return ;
		    }
		    LL_mDelay(100);
 8000b72:	2064      	movs	r0, #100	; 0x64
 8000b74:	f001 ff78 	bl	8002a68 <LL_mDelay>
			ssd1306_Fill(White);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 faaf 	bl	80010dc <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8000b7e:	f000 fa57 	bl	8001030 <ssd1306_UpdateScreen>
			  // Set default values for screen object
			SSD1306.CurrentX = 0;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <Display_Init+0x21c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	801a      	strh	r2, [r3, #0]
			SSD1306.CurrentY = 0;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <Display_Init+0x21c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	805a      	strh	r2, [r3, #2]

			SSD1306.Initialized = 1;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Display_Init+0x21c>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	715a      	strb	r2, [r3, #5]
			LL_mDelay(100);
 8000b94:	2064      	movs	r0, #100	; 0x64
 8000b96:	f001 ff67 	bl	8002a68 <LL_mDelay>
 8000b9a:	e002      	b.n	8000ba2 <Display_Init+0x212>
			return ;
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	e000      	b.n	8000ba2 <Display_Init+0x212>
		        return ;
 8000ba0:	46c0      	nop			; (mov r8, r8)

}
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	20000158 	.word	0x20000158

08000bb0 <Display_Test>:


void Display_Test()
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b0c1      	sub	sp, #260	; 0x104
 8000bb4:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fa90 	bl	80010dc <ssd1306_Fill>
	char tBuf[255];
	sprintf(tBuf,"T: %d H: %d",(int)temperature,(int)humidity);
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <Display_Test+0x58>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	f7ff fb35 	bl	8000234 <__aeabi_d2iz>
 8000bca:	0004      	movs	r4, r0
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <Display_Test+0x5c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	f7ff fb2d 	bl	8000234 <__aeabi_d2iz>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <Display_Test+0x60>)
 8000bde:	0038      	movs	r0, r7
 8000be0:	0022      	movs	r2, r4
 8000be2:	f001 ffa3 	bl	8002b2c <siprintf>
	ssd1306_SetCursor(0, 10);
 8000be6:	210a      	movs	r1, #10
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 fb35 	bl	8001258 <ssd1306_SetCursor>
	ssd1306_WriteString(tBuf, Font_11x18, White);
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <Display_Test+0x64>)
 8000bf0:	0038      	movs	r0, r7
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	6811      	ldr	r1, [r2, #0]
 8000bf6:	6852      	ldr	r2, [r2, #4]
 8000bf8:	f000 fa94 	bl	8001124 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000bfc:	f000 fa18 	bl	8001030 <ssd1306_UpdateScreen>
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b041      	add	sp, #260	; 0x104
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	20000090 	.word	0x20000090
 8000c0c:	20000098 	.word	0x20000098
 8000c10:	08003390 	.word	0x08003390
 8000c14:	20000000 	.word	0x20000000

08000c18 <ssd1306_WriteCommand>:
static uint8_t ssd1306_WriteCommand(uint8_t command)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0002      	movs	r2, r0
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	701a      	strb	r2, [r3, #0]
	uint8_t memAdd= 0x00;
 8000c24:	200f      	movs	r0, #15
 8000c26:	183b      	adds	r3, r7, r0
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
	uint16_t size = 1;
 8000c2c:	210c      	movs	r1, #12
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2201      	movs	r2, #1
 8000c32:	801a      	strh	r2, [r3, #0]
	return I2C_Handle(memAdd,&command,size);
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	881a      	ldrh	r2, [r3, #0]
 8000c38:	1df9      	adds	r1, r7, #7
 8000c3a:	183b      	adds	r3, r7, r0
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff fde0 	bl	8000804 <I2C_Handle>
 8000c44:	0003      	movs	r3, r0
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <LED_Init>:
void LED_Init()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	LED1_OFF();
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <LED_Init+0x24>)
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fdb0 	bl	80007be <LL_GPIO_ResetOutputPin>
	LED2_OFF();
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <LED_Init+0x24>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f7ff fda9 	bl	80007be <LL_GPIO_ResetOutputPin>
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	48000800 	.word	0x48000800

08000c78 <Init_TIM6>:
void Init_TIM6(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <Init_TIM6+0x24>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fc86 	bl	8000590 <LL_TIM_ClearFlag_UPDATE>
	/* Enable counter */
	LL_TIM_EnableCounter(TIM6);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <Init_TIM6+0x24>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff fc5e 	bl	8000548 <LL_TIM_EnableCounter>

	/* Force update generation */
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <Init_TIM6+0x24>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff fc8a 	bl	80005a8 <LL_TIM_GenerateEvent_UPDATE>
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40001000 	.word	0x40001000

08000ca0 <DHT11_Init>:
void DHT11_Init()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
		/* Enable the LED Clock */
		DHT11_GPIO_CLK_ENABLE();
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	02db      	lsls	r3, r3, #11
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fc15 	bl	80004d8 <LL_AHB1_GRP1_EnableClock>

		LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_OUTPUT);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <DHT11_Init+0x38>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fcfb 	bl	80006b0 <LL_GPIO_SetPinMode>
		/* Reset value is LL_GPIO_OUTPUT_PUSHPULL */
		LL_GPIO_SetPinOutputType(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <DHT11_Init+0x38>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fd11 	bl	80006e8 <LL_GPIO_SetPinOutputType>
		/* Reset value is LL_GPIO_SPEED_FREQ_LOW */
		LL_GPIO_SetPinSpeed(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <DHT11_Init+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fd20 	bl	8000712 <LL_GPIO_SetPinSpeed>
		/* Reset value is LL_GPIO_PULL_NO */
		//LL_GPIO_SetPinPull(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	48000400 	.word	0x48000400

08000cdc <IIC_Start>:
void IIC_Start()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	LL_I2C_SetSlaveAddr(I2C2,LCD_SLAVE_ADD);
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <IIC_Start+0x3c>)
 8000ce2:	2178      	movs	r1, #120	; 0x78
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fbaf 	bl	8000448 <LL_I2C_SetSlaveAddr>
	LL_I2C_SetTransferRequest(I2C2, LL_I2C_REQUEST_WRITE);
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <IIC_Start+0x3c>)
 8000cec:	2100      	movs	r1, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fb96 	bl	8000420 <LL_I2C_SetTransferRequest>
	LL_I2C_SetTransferSize(I2C2, 50);
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <IIC_Start+0x3c>)
 8000cf6:	2132      	movs	r1, #50	; 0x32
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff fb59 	bl	80003b0 <LL_I2C_SetTransferSize>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <IIC_Start+0x3c>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fb68 	bl	80003d8 <LL_I2C_AcknowledgeNextData>
	LL_I2C_Enable(I2C2);
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <IIC_Start+0x3c>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fb0c 	bl	8000328 <LL_I2C_Enable>
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40005800 	.word	0x40005800

08000d1c <ReadDHT_Data>:
#define DHT_BIT_SET_DATA_DETECT_TIME_US 50
char dht11_byte[DHT_DATA_BYTE_COUNT];
uint32_t dht11_byte_t[DHT_DATA_BYTE_COUNT][8];

int ReadDHT_Data()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
		int rv = ReadRawDHTData();
 8000d22:	f000 f84b 	bl	8000dbc <ReadRawDHTData>
 8000d26:	0003      	movs	r3, r0
 8000d28:	607b      	str	r3, [r7, #4]
		if (rv != 0)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <ReadDHT_Data+0x18>
		{
			return rv;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	e037      	b.n	8000da4 <ReadDHT_Data+0x88>
		}

		// CONVERT AND STORE
		humidity    = dht11_byte[0];  // bit[1] == 0;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <ReadDHT_Data+0x90>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fab1 	bl	80002a0 <__aeabi_ui2d>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	000b      	movs	r3, r1
 8000d42:	491b      	ldr	r1, [pc, #108]	; (8000db0 <ReadDHT_Data+0x94>)
 8000d44:	600a      	str	r2, [r1, #0]
 8000d46:	604b      	str	r3, [r1, #4]
		temperature = dht11_byte[2];  // bits[3] == 0;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <ReadDHT_Data+0x90>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff faa7 	bl	80002a0 <__aeabi_ui2d>
 8000d52:	0002      	movs	r2, r0
 8000d54:	000b      	movs	r3, r1
 8000d56:	4917      	ldr	r1, [pc, #92]	; (8000db4 <ReadDHT_Data+0x98>)
 8000d58:	600a      	str	r2, [r1, #0]
 8000d5a:	604b      	str	r3, [r1, #4]

		// TEST CHECKSUM
		uint8_t sum = dht11_byte[0] + dht11_byte[1] + dht11_byte[2] + dht11_byte[3]; // bits[1] && bits[3] both 0
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <ReadDHT_Data+0x90>)
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <ReadDHT_Data+0x90>)
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <ReadDHT_Data+0x90>)
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	b2d9      	uxtb	r1, r3
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <ReadDHT_Data+0x90>)
 8000d72:	78da      	ldrb	r2, [r3, #3]
 8000d74:	1cfb      	adds	r3, r7, #3
 8000d76:	188a      	adds	r2, r1, r2
 8000d78:	701a      	strb	r2, [r3, #0]
		if (dht11_byte[4] != sum)
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <ReadDHT_Data+0x90>)
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	1cfa      	adds	r2, r7, #3
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d00d      	beq.n	8000da2 <ReadDHT_Data+0x86>
		{
			temperature = humidity = -1;
 8000d86:	490a      	ldr	r1, [pc, #40]	; (8000db0 <ReadDHT_Data+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <ReadDHT_Data+0x9c>)
 8000d8c:	600a      	str	r2, [r1, #0]
 8000d8e:	604b      	str	r3, [r1, #4]
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <ReadDHT_Data+0x94>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4907      	ldr	r1, [pc, #28]	; (8000db4 <ReadDHT_Data+0x98>)
 8000d98:	600a      	str	r2, [r1, #0]
 8000d9a:	604b      	str	r3, [r1, #4]
			return -1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	e000      	b.n	8000da4 <ReadDHT_Data+0x88>
		}
		return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000560 	.word	0x20000560
 8000db0:	20000098 	.word	0x20000098
 8000db4:	20000090 	.word	0x20000090
 8000db8:	bff00000 	.word	0xbff00000

08000dbc <ReadRawDHTData>:
  * @retval :
  *  0 : OK
  *  -2 : timeout
  */
int ReadRawDHTData()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	//we notified that we want to start com.
	LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_OUTPUT);
 8000dc2:	4b65      	ldr	r3, [pc, #404]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff fc71 	bl	80006b0 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinOutputType(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000dce:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinSpeed(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000dda:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2104      	movs	r1, #4
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fc96 	bl	8000712 <LL_GPIO_SetPinSpeed>

	LL_GPIO_ResetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8000de6:	4b5c      	ldr	r3, [pc, #368]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000de8:	2104      	movs	r1, #4
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fce7 	bl	80007be <LL_GPIO_ResetOutputPin>
	LL_mDelay(19);
 8000df0:	2013      	movs	r0, #19
 8000df2:	f001 fe39 	bl	8002a68 <LL_mDelay>
	LL_GPIO_SetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8000df6:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000df8:	2104      	movs	r1, #4
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff fcd3 	bl	80007a6 <LL_GPIO_SetOutputPin>
	DelayUs(30);
 8000e00:	201e      	movs	r0, #30
 8000e02:	f000 f8fb 	bl	8000ffc <DelayUs>
	//********************************

	/*****************low(80us) => high (80us) ***************** response */
	LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_INPUT);
 8000e06:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fc4f 	bl	80006b0 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_PULL_NO);
 8000e12:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	2104      	movs	r1, #4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fc96 	bl	800074a <LL_GPIO_SetPinPull>

	LL_TIM_SetCounter(TIM6, 0);
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fb9e 	bl	8000564 <LL_TIM_SetCounter>
	while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000e28:	e009      	b.n	8000e3e <ReadRawDHTData+0x82>
	{
		if(LL_TIM_GetCounter(TIM6) > DHT_BEGIN_RESPONSE_TIMEOUT_US)
 8000e2a:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fba5 	bl	800057c <LL_TIM_GetCounter>
 8000e32:	0003      	movs	r3, r0
 8000e34:	2b5a      	cmp	r3, #90	; 0x5a
 8000e36:	d902      	bls.n	8000e3e <ReadRawDHTData+0x82>
		{
			return -2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	e088      	b.n	8000f50 <ReadRawDHTData+0x194>
	while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000e3e:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000e40:	2104      	movs	r1, #4
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff fc9d 	bl	8000782 <LL_GPIO_IsInputPinSet>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d0ee      	beq.n	8000e2a <ReadRawDHTData+0x6e>
		}
	}
	LL_TIM_SetCounter(TIM6, 0);
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff fb87 	bl	8000564 <LL_TIM_SetCounter>
	while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000e56:	e009      	b.n	8000e6c <ReadRawDHTData+0xb0>
	{
		if(LL_TIM_GetCounter(TIM6) > DHT_BEGIN_RESPONSE_TIMEOUT_US)
 8000e58:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fb8e 	bl	800057c <LL_TIM_GetCounter>
 8000e60:	0003      	movs	r3, r0
 8000e62:	2b5a      	cmp	r3, #90	; 0x5a
 8000e64:	d902      	bls.n	8000e6c <ReadRawDHTData+0xb0>
		{
			return -2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	425b      	negs	r3, r3
 8000e6a:	e071      	b.n	8000f50 <ReadRawDHTData+0x194>
	while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000e6e:	2104      	movs	r1, #4
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fc86 	bl	8000782 <LL_GPIO_IsInputPinSet>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d1ee      	bne.n	8000e58 <ReadRawDHTData+0x9c>
		}
	}
	//********************************************************* Start reading data bit by low level (50us) ***************************
	for (int i = 0; i < DHT_DATA_BYTE_COUNT ; i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e063      	b.n	8000f48 <ReadRawDHTData+0x18c>
	{
		for (int J = 7; J > -1; J--)
 8000e80:	2307      	movs	r3, #7
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	e05a      	b.n	8000f3c <ReadRawDHTData+0x180>
		{
			LL_TIM_SetCounter(TIM6, 0);
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fb6a 	bl	8000564 <LL_TIM_SetCounter>
			while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000e90:	e009      	b.n	8000ea6 <ReadRawDHTData+0xea>
			{
				if(LL_TIM_GetCounter(TIM6) > DHT_START_BIT_TIMEOUT_US)
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff fb71 	bl	800057c <LL_TIM_GetCounter>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	2b3c      	cmp	r3, #60	; 0x3c
 8000e9e:	d902      	bls.n	8000ea6 <ReadRawDHTData+0xea>
				{
					return -2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	e054      	b.n	8000f50 <ReadRawDHTData+0x194>
			while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff fc69 	bl	8000782 <LL_GPIO_IsInputPinSet>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d0ee      	beq.n	8000e92 <ReadRawDHTData+0xd6>
				}
			}

			LL_TIM_SetCounter(TIM6, 0);
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff fb53 	bl	8000564 <LL_TIM_SetCounter>
			while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000ebe:	e009      	b.n	8000ed4 <ReadRawDHTData+0x118>
			{
				if(LL_TIM_GetCounter(TIM6) > DHT_BEGIN_RESPONSE_TIMEOUT_US)
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff fb5a 	bl	800057c <LL_TIM_GetCounter>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	2b5a      	cmp	r3, #90	; 0x5a
 8000ecc:	d902      	bls.n	8000ed4 <ReadRawDHTData+0x118>
				{
					return -2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	e03d      	b.n	8000f50 <ReadRawDHTData+0x194>
			while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <ReadRawDHTData+0x19c>)
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fc52 	bl	8000782 <LL_GPIO_IsInputPinSet>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d1ee      	bne.n	8000ec0 <ReadRawDHTData+0x104>
				}
			}
			(LL_TIM_GetCounter(TIM6) > DHT_BIT_SET_DATA_DETECT_TIME_US) ? bitWrite(dht11_byte[i],J,1) : bitWrite(dht11_byte[i],J,0);
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <ReadRawDHTData+0x1a0>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fb49 	bl	800057c <LL_TIM_GetCounter>
 8000eea:	0003      	movs	r3, r0
 8000eec:	2b32      	cmp	r3, #50	; 0x32
 8000eee:	d910      	bls.n	8000f12 <ReadRawDHTData+0x156>
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <ReadRawDHTData+0x1a4>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	4099      	lsls	r1, r3
 8000efe:	000b      	movs	r3, r1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b2d9      	uxtb	r1, r3
 8000f06:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <ReadRawDHTData+0x1a4>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	18d3      	adds	r3, r2, r3
 8000f0c:	1c0a      	adds	r2, r1, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e011      	b.n	8000f36 <ReadRawDHTData+0x17a>
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <ReadRawDHTData+0x1a4>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	18d3      	adds	r3, r2, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	4091      	lsls	r1, r2
 8000f20:	000a      	movs	r2, r1
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b2d9      	uxtb	r1, r3
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <ReadRawDHTData+0x1a4>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	18d3      	adds	r3, r2, r3
 8000f32:	1c0a      	adds	r2, r1, #0
 8000f34:	701a      	strb	r2, [r3, #0]
		for (int J = 7; J > -1; J--)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	daa1      	bge.n	8000e86 <ReadRawDHTData+0xca>
	for (int i = 0; i < DHT_DATA_BYTE_COUNT ; i++)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	dd98      	ble.n	8000e80 <ReadRawDHTData+0xc4>
		}
	}

	return 0;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	40001000 	.word	0x40001000
 8000f60:	20000560 	.word	0x20000560

08000f64 <Init_UART1>:

void Init_UART1()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	/* Clear Overrun flag, in case characters have already been sent to USART */
	  LL_USART_ClearFlag_ORE(USART1);
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <Init_UART1+0x24>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff fb3b 	bl	80005e6 <LL_USART_ClearFlag_ORE>
	LL_USART_EnableIT_RXNE(USART1);
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <Init_UART1+0x24>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff fb42 	bl	80005fc <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(USART1);
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <Init_UART1+0x24>)
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff fb5d 	bl	800063a <LL_USART_EnableIT_ERROR>
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	40013800 	.word	0x40013800

08000f8c <USART_CharReception_Callback>:
  *         Function is in charge of reading character received on USART RX line.
  * @param  None
  * @retval None
  */
void USART_CharReception_Callback(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
__IO uint32_t received_char;

  /* Read Received character. RXNE flag is cleared by reading of DR register */
  received_char = LL_USART_ReceiveData8(USART1);
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <USART_CharReception_Callback+0x64>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff fb6f 	bl	8000678 <LL_USART_ReceiveData8>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	603b      	str	r3, [r7, #0]

  /* Check if received value is corresponding to specific one : S or s */
  if ((received_char == 'S') || (received_char == 's'))
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b53      	cmp	r3, #83	; 0x53
 8000fa2:	d002      	beq.n	8000faa <USART_CharReception_Callback+0x1e>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b73      	cmp	r3, #115	; 0x73
 8000fa8:	d104      	bne.n	8000fb4 <USART_CharReception_Callback+0x28>
  {
    /* Turn LED2 On : Expected character has been received */
	  LED3_TOGGLE();
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <USART_CharReception_Callback+0x68>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff fc11 	bl	80007d6 <LL_GPIO_TogglePin>
  }

  /* Echo received character on TX */
  for(int i = 0; i < DHT_DATA_BYTE_COUNT; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	e012      	b.n	8000fe0 <USART_CharReception_Callback+0x54>
  {
	  LL_USART_TransmitData8(USART1, dht11_byte[i]);
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <USART_CharReception_Callback+0x6c>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	18d3      	adds	r3, r2, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <USART_CharReception_Callback+0x64>)
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	0010      	movs	r0, r2
 8000fc8:	f7ff fb62 	bl	8000690 <LL_USART_TransmitData8>
	  while(!LL_USART_IsActiveFlag_TC(USART1));
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <USART_CharReception_Callback+0x64>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff faf7 	bl	80005c4 <LL_USART_IsActiveFlag_TC>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d0f9      	beq.n	8000fce <USART_CharReception_Callback+0x42>
  for(int i = 0; i < DHT_DATA_BYTE_COUNT; i++)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	dde9      	ble.n	8000fba <USART_CharReception_Callback+0x2e>
  }
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	20000560 	.word	0x20000560

08000ffc <DelayUs>:


void DelayUs(uint32_t us)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	LL_TIM_SetCounter(TIM6, 0);
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <DelayUs+0x30>)
 8001006:	2100      	movs	r1, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f7ff faab 	bl	8000564 <LL_TIM_SetCounter>
	while(LL_TIM_GetCounter(TIM6) < us);
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <DelayUs+0x30>)
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff fab2 	bl	800057c <LL_TIM_GetCounter>
 8001018:	0002      	movs	r2, r0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4293      	cmp	r3, r2
 800101e:	d8f7      	bhi.n	8001010 <DelayUs+0x14>
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40001000 	.word	0x40001000

08001030 <ssd1306_UpdateScreen>:
  * @brief   Write the screenbuffer with changed to the screen
  * @param  ------
  * @retval none
  */
void ssd1306_UpdateScreen()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
    uint8_t i;
    int sum = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]

    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e02f      	b.n	80010a2 <ssd1306_UpdateScreen+0x72>
    	sum+= ssd1306_WriteCommand( 0xB0 + i);
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3b50      	subs	r3, #80	; 0x50
 8001048:	b2db      	uxtb	r3, r3
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff fde4 	bl	8000c18 <ssd1306_WriteCommand>
 8001050:	0003      	movs	r3, r0
 8001052:	001a      	movs	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	189b      	adds	r3, r3, r2
 8001058:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x00);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fddc 	bl	8000c18 <ssd1306_WriteCommand>
 8001060:	0003      	movs	r3, r0
 8001062:	001a      	movs	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	189b      	adds	r3, r3, r2
 8001068:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x10);
 800106a:	2010      	movs	r0, #16
 800106c:	f7ff fdd4 	bl	8000c18 <ssd1306_WriteCommand>
 8001070:	0003      	movs	r3, r0
 8001072:	001a      	movs	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	189b      	adds	r3, r3, r2
 8001078:	603b      	str	r3, [r7, #0]
    	sum+= I2C_Handle(0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	01da      	lsls	r2, r3, #7
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <ssd1306_UpdateScreen+0xa4>)
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0019      	movs	r1, r3
 8001088:	2040      	movs	r0, #64	; 0x40
 800108a:	f7ff fbbb 	bl	8000804 <I2C_Handle>
 800108e:	0003      	movs	r3, r0
 8001090:	001a      	movs	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	189b      	adds	r3, r3, r2
 8001096:	603b      	str	r3, [r7, #0]
    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	3201      	adds	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	d9cb      	bls.n	8001042 <ssd1306_UpdateScreen+0x12>
    }
    if(sum != 0)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <ssd1306_UpdateScreen+0x8c>
    {
    	LED1_ON();
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <ssd1306_UpdateScreen+0xa8>)
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fb76 	bl	80007a6 <LL_GPIO_SetOutputPin>
    }
    else
    {
    	LED2_ON();
    }
}
 80010ba:	e006      	b.n	80010ca <ssd1306_UpdateScreen+0x9a>
    	LED2_ON();
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <ssd1306_UpdateScreen+0xa8>)
 80010c2:	0019      	movs	r1, r3
 80010c4:	0010      	movs	r0, r2
 80010c6:	f7ff fb6e 	bl	80007a6 <LL_GPIO_SetOutputPin>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000160 	.word	0x20000160
 80010d8:	48000800 	.word	0x48000800

080010dc <ssd1306_Fill>:
  * @brief   Fill the whole screen with the given color
  * @param  ------
  * @retval none
  */
void ssd1306_Fill(SSD1306_COLOR color)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	0002      	movs	r2, r0
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	701a      	strb	r2, [r3, #0]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e00e      	b.n	800110c <ssd1306_Fill+0x30>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <ssd1306_Fill+0x1e>
 80010f6:	2100      	movs	r1, #0
 80010f8:	e000      	b.n	80010fc <ssd1306_Fill+0x20>
 80010fa:	21ff      	movs	r1, #255	; 0xff
 80010fc:	4a08      	ldr	r2, [pc, #32]	; (8001120 <ssd1306_Fill+0x44>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	1c0a      	adds	r2, r1, #0
 8001104:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	429a      	cmp	r2, r3
 8001114:	d3eb      	bcc.n	80010ee <ssd1306_Fill+0x12>
    }
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b004      	add	sp, #16
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000160 	.word	0x20000160

08001124 <ssd1306_WriteString>:
  * @brief   Write full string to screenbuffer
  * @param  ------
  * @retval none
  */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	1d38      	adds	r0, r7, #4
 800112e:	6001      	str	r1, [r0, #0]
 8001130:	6042      	str	r2, [r0, #4]
 8001132:	001a      	movs	r2, r3
 8001134:	1cfb      	adds	r3, r7, #3
 8001136:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str)
 8001138:	e014      	b.n	8001164 <ssd1306_WriteString+0x40>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	7818      	ldrb	r0, [r3, #0]
 800113e:	1cfb      	adds	r3, r7, #3
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	1d3a      	adds	r2, r7, #4
 8001144:	6811      	ldr	r1, [r2, #0]
 8001146:	6852      	ldr	r2, [r2, #4]
 8001148:	f000 f8a0 	bl	800128c <ssd1306_WriteChar>
 800114c:	0003      	movs	r3, r0
 800114e:	001a      	movs	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d002      	beq.n	800115e <ssd1306_WriteString+0x3a>
        {
            // Char could not be written
            return *str;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	e008      	b.n	8001170 <ssd1306_WriteString+0x4c>
        }

        // Next char
        str++;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3301      	adds	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e6      	bne.n	800113a <ssd1306_WriteString+0x16>
    }

    // Everything ok
    return *str;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b004      	add	sp, #16
 8001176:	bd80      	pop	{r7, pc}

08001178 <ssd1306_DrawPixel>:
  * 		Y => Y Coordinate
  * 		color => Pixel color
  * @retval none
  */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	0004      	movs	r4, r0
 8001180:	0008      	movs	r0, r1
 8001182:	0011      	movs	r1, r2
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	1c22      	adds	r2, r4, #0
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	1c02      	adds	r2, r0, #0
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	1d7b      	adds	r3, r7, #5
 8001192:	1c0a      	adds	r2, r1, #0
 8001194:	701a      	strb	r2, [r3, #0]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b25b      	sxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	db52      	blt.n	8001246 <ssd1306_DrawPixel+0xce>
 80011a0:	1dbb      	adds	r3, r7, #6
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b1f      	cmp	r3, #31
 80011a6:	d84e      	bhi.n	8001246 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <ssd1306_DrawPixel+0xd8>)
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <ssd1306_DrawPixel+0x46>
    {
        color = (SSD1306_COLOR)!color;
 80011b0:	1d7b      	adds	r3, r7, #5
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	425a      	negs	r2, r3
 80011b6:	4153      	adcs	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	1d7b      	adds	r3, r7, #5
 80011bc:	701a      	strb	r2, [r3, #0]
    }

    // Draw in the correct color
    if (color == White)
 80011be:	1d7b      	adds	r3, r7, #5
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d11e      	bne.n	8001204 <ssd1306_DrawPixel+0x8c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	b2d8      	uxtb	r0, r3
 80011d2:	0003      	movs	r3, r0
 80011d4:	01db      	lsls	r3, r3, #7
 80011d6:	18d3      	adds	r3, r2, r3
 80011d8:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <ssd1306_DrawPixel+0xdc>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	1dbb      	adds	r3, r7, #6
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2107      	movs	r1, #7
 80011e4:	400b      	ands	r3, r1
 80011e6:	2101      	movs	r1, #1
 80011e8:	4099      	lsls	r1, r3
 80011ea:	000b      	movs	r3, r1
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b259      	sxtb	r1, r3
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	0003      	movs	r3, r0
 80011f8:	01db      	lsls	r3, r3, #7
 80011fa:	18d3      	adds	r3, r2, r3
 80011fc:	b2c9      	uxtb	r1, r1
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <ssd1306_DrawPixel+0xdc>)
 8001200:	54d1      	strb	r1, [r2, r3]
 8001202:	e021      	b.n	8001248 <ssd1306_DrawPixel+0xd0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	b2d8      	uxtb	r0, r3
 8001210:	0003      	movs	r3, r0
 8001212:	01db      	lsls	r3, r3, #7
 8001214:	18d3      	adds	r3, r2, r3
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <ssd1306_DrawPixel+0xdc>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	b25b      	sxtb	r3, r3
 800121c:	1dba      	adds	r2, r7, #6
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	2107      	movs	r1, #7
 8001222:	400a      	ands	r2, r1
 8001224:	2101      	movs	r1, #1
 8001226:	4091      	lsls	r1, r2
 8001228:	000a      	movs	r2, r1
 800122a:	b252      	sxtb	r2, r2
 800122c:	43d2      	mvns	r2, r2
 800122e:	b252      	sxtb	r2, r2
 8001230:	4013      	ands	r3, r2
 8001232:	b259      	sxtb	r1, r3
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	0003      	movs	r3, r0
 800123a:	01db      	lsls	r3, r3, #7
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	b2c9      	uxtb	r1, r1
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <ssd1306_DrawPixel+0xdc>)
 8001242:	54d1      	strb	r1, [r2, r3]
 8001244:	e000      	b.n	8001248 <ssd1306_DrawPixel+0xd0>
        return;
 8001246:	46c0      	nop			; (mov r8, r8)
    }
}
 8001248:	46bd      	mov	sp, r7
 800124a:	b003      	add	sp, #12
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	20000158 	.word	0x20000158
 8001254:	20000160 	.word	0x20000160

08001258 <ssd1306_SetCursor>:
  * @param  x      => axis
  * 		y      => axis
  * @retval none
  */
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	0002      	movs	r2, r0
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	1dbb      	adds	r3, r7, #6
 8001266:	1c0a      	adds	r2, r1, #0
 8001268:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <ssd1306_SetCursor+0x30>)
 8001272:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b03      	ldr	r3, [pc, #12]	; (8001288 <ssd1306_SetCursor+0x30>)
 800127c:	805a      	strh	r2, [r3, #2]
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000158 	.word	0x20000158

0800128c <ssd1306_WriteChar>:
  * 		Font    => Font to use
  * 		color   => Black or White
  * @retval char
  */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	0004      	movs	r4, r0
 8001294:	1d38      	adds	r0, r7, #4
 8001296:	6001      	str	r1, [r0, #0]
 8001298:	6042      	str	r2, [r0, #4]
 800129a:	0019      	movs	r1, r3
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	1c22      	adds	r2, r4, #0
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	230e      	movs	r3, #14
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	1c0a      	adds	r2, r1, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012ac:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	001a      	movs	r2, r3
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	18d3      	adds	r3, r2, r3
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	dc07      	bgt.n	80012cc <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 80012be:	885b      	ldrh	r3, [r3, #2]
 80012c0:	001a      	movs	r2, r3
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012c8:	2b1f      	cmp	r3, #31
 80012ca:	dd01      	ble.n	80012d0 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e066      	b.n	800139e <ssd1306_WriteChar+0x112>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	e051      	b.n	800137a <ssd1306_WriteChar+0xee>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	230f      	movs	r3, #15
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3b20      	subs	r3, #32
 80012e2:	1d39      	adds	r1, r7, #4
 80012e4:	7849      	ldrb	r1, [r1, #1]
 80012e6:	434b      	muls	r3, r1
 80012e8:	0019      	movs	r1, r3
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	18cb      	adds	r3, r1, r3
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	e035      	b.n	8001368 <ssd1306_WriteChar+0xdc>
        {
            if ((b << j) & 0x8000)
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	409a      	lsls	r2, r3
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	4013      	ands	r3, r2
 8001308:	d014      	beq.n	8001334 <ssd1306_WriteChar+0xa8>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 800131a:	885b      	ldrh	r3, [r3, #2]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	18d3      	adds	r3, r2, r3
 8001324:	b2d9      	uxtb	r1, r3
 8001326:	230e      	movs	r3, #14
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	f7ff ff23 	bl	8001178 <ssd1306_DrawPixel>
 8001332:	e016      	b.n	8001362 <ssd1306_WriteChar+0xd6>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	18d3      	adds	r3, r2, r3
 8001340:	b2d8      	uxtb	r0, r3
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 8001344:	885b      	ldrh	r3, [r3, #2]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	18d3      	adds	r3, r2, r3
 800134e:	b2d9      	uxtb	r1, r3
 8001350:	230e      	movs	r3, #14
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	425a      	negs	r2, r3
 8001358:	4153      	adcs	r3, r2
 800135a:	b2db      	uxtb	r3, r3
 800135c:	001a      	movs	r2, r3
 800135e:	f7ff ff0b 	bl	8001178 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3301      	adds	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	001a      	movs	r2, r3
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4293      	cmp	r3, r2
 8001372:	d3c3      	bcc.n	80012fc <ssd1306_WriteChar+0x70>
    for (i = 0; i < Font.FontHeight; i++)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	001a      	movs	r2, r3
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	4293      	cmp	r3, r2
 8001384:	d3a7      	bcc.n	80012d6 <ssd1306_WriteChar+0x4a>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 8001388:	881a      	ldrh	r2, [r3, #0]
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <ssd1306_WriteChar+0x11c>)
 8001396:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781b      	ldrb	r3, [r3, #0]
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b009      	add	sp, #36	; 0x24
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	20000158 	.word	0x20000158

080013ac <BSL_Tick>:
    LL_mDelay(Period);
  }
}

void BSL_Tick()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	static __IO uint32_t cntr_ms_50 = 0;
	static __IO uint32_t cntr_ms_500 = 0;
	static __IO uint32_t cntr_ms_3000 = 0;

	if(++cntr_ms_50 >49)
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <BSL_Tick+0x60>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <BSL_Tick+0x60>)
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	2b31      	cmp	r3, #49	; 0x31
 80013bc:	d905      	bls.n	80013ca <BSL_Tick+0x1e>
	{
		ms50ms = true;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <BSL_Tick+0x64>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
		cntr_ms_50 = 0;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <BSL_Tick+0x60>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
	}
	if(++cntr_ms_500 >499)
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <BSL_Tick+0x68>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a10      	ldr	r2, [pc, #64]	; (8001414 <BSL_Tick+0x68>)
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	22fa      	movs	r2, #250	; 0xfa
 80013d6:	0052      	lsls	r2, r2, #1
 80013d8:	4293      	cmp	r3, r2
 80013da:	d305      	bcc.n	80013e8 <BSL_Tick+0x3c>
		{
			ms500ms = true;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <BSL_Tick+0x6c>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
			cntr_ms_500 = 0;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <BSL_Tick+0x68>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
		}
	if(++cntr_ms_3000 > 2999)
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <BSL_Tick+0x70>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <BSL_Tick+0x70>)
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <BSL_Tick+0x74>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d905      	bls.n	8001404 <BSL_Tick+0x58>
	{
		ms3000ms = true;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <BSL_Tick+0x78>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
		cntr_ms_3000 = 0;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <BSL_Tick+0x70>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
	}
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	200000a0 	.word	0x200000a0
 8001410:	2000008c 	.word	0x2000008c
 8001414:	200000a4 	.word	0x200000a4
 8001418:	2000008e 	.word	0x2000008e
 800141c:	200000a8 	.word	0x200000a8
 8001420:	00000bb7 	.word	0x00000bb7
 8001424:	2000008d 	.word	0x2000008d

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	0002      	movs	r2, r0
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b7f      	cmp	r3, #127	; 0x7f
 800143a:	d809      	bhi.n	8001450 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	001a      	movs	r2, r3
 8001442:	231f      	movs	r3, #31
 8001444:	401a      	ands	r2, r3
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_EnableIRQ+0x30>)
 8001448:	2101      	movs	r1, #1
 800144a:	4091      	lsls	r1, r2
 800144c:	000a      	movs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	0002      	movs	r2, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b7f      	cmp	r3, #127	; 0x7f
 8001470:	d828      	bhi.n	80014c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001472:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <__NVIC_SetPriority+0xd4>)
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b25b      	sxtb	r3, r3
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	33c0      	adds	r3, #192	; 0xc0
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	589b      	ldr	r3, [r3, r2]
 8001482:	1dfa      	adds	r2, r7, #7
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	0011      	movs	r1, r2
 8001488:	2203      	movs	r2, #3
 800148a:	400a      	ands	r2, r1
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	21ff      	movs	r1, #255	; 0xff
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	43d2      	mvns	r2, r2
 8001496:	401a      	ands	r2, r3
 8001498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	22ff      	movs	r2, #255	; 0xff
 80014a0:	401a      	ands	r2, r3
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	0018      	movs	r0, r3
 80014a8:	2303      	movs	r3, #3
 80014aa:	4003      	ands	r3, r0
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b0:	481f      	ldr	r0, [pc, #124]	; (8001530 <__NVIC_SetPriority+0xd4>)
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	430a      	orrs	r2, r1
 80014bc:	33c0      	adds	r3, #192	; 0xc0
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014c2:	e031      	b.n	8001528 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <__NVIC_SetPriority+0xd8>)
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	0019      	movs	r1, r3
 80014cc:	230f      	movs	r3, #15
 80014ce:	400b      	ands	r3, r1
 80014d0:	3b08      	subs	r3, #8
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3306      	adds	r3, #6
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1dfa      	adds	r2, r7, #7
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	0011      	movs	r1, r2
 80014e4:	2203      	movs	r2, #3
 80014e6:	400a      	ands	r2, r1
 80014e8:	00d2      	lsls	r2, r2, #3
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	4091      	lsls	r1, r2
 80014ee:	000a      	movs	r2, r1
 80014f0:	43d2      	mvns	r2, r2
 80014f2:	401a      	ands	r2, r3
 80014f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	22ff      	movs	r2, #255	; 0xff
 80014fc:	401a      	ands	r2, r3
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	0018      	movs	r0, r3
 8001504:	2303      	movs	r3, #3
 8001506:	4003      	ands	r3, r0
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <__NVIC_SetPriority+0xd8>)
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	001c      	movs	r4, r3
 8001514:	230f      	movs	r3, #15
 8001516:	4023      	ands	r3, r4
 8001518:	3b08      	subs	r3, #8
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	430a      	orrs	r2, r1
 800151e:	3306      	adds	r3, #6
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	18c3      	adds	r3, r0, r3
 8001524:	3304      	adds	r3, #4
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b003      	add	sp, #12
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <LL_I2C_EnableClockStretching>:
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <LL_I2C_EnableClockStretching+0x1c>)
 8001546:	401a      	ands	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}
 8001554:	fffdffff 	.word	0xfffdffff

08001558 <LL_I2C_DisableGeneralCall>:
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <LL_I2C_DisableGeneralCall+0x1c>)
 8001566:	401a      	ands	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}
 8001574:	fff7ffff 	.word	0xfff7ffff

08001578 <LL_I2C_SetOwnAddress2>:
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <LL_I2C_SetOwnAddress2+0x28>)
 800158a:	401a      	ands	r2, r3
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	430b      	orrs	r3, r1
 8001592:	431a      	orrs	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	60da      	str	r2, [r3, #12]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b004      	add	sp, #16
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	fffff801 	.word	0xfffff801

080015a4 <LL_I2C_DisableOwnAddress2>:
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <LL_I2C_DisableOwnAddress2+0x1c>)
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	60da      	str	r2, [r3, #12]
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	ffff7fff 	.word	0xffff7fff

080015c4 <LL_I2C_EnableAutoEndMode>:
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	0492      	lsls	r2, r2, #18
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	605a      	str	r2, [r3, #4]
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <LL_RCC_HSI_Enable+0x18>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <LL_RCC_HSI_Enable+0x18>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000

08001600 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <LL_RCC_HSI_IsReady+0x1c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	3b02      	subs	r3, #2
 800160e:	425a      	negs	r2, r3
 8001610:	4153      	adcs	r3, r2
 8001612:	b2db      	uxtb	r3, r3
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40021000 	.word	0x40021000

08001620 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	22f8      	movs	r2, #248	; 0xf8
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	00da      	lsls	r2, r3, #3
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <LL_RCC_SetSysClkSource+0x24>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	4393      	bics	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <LL_RCC_SetSysClkSource+0x24>)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <LL_RCC_GetSysClkSource+0x14>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	220c      	movs	r2, #12
 800167a:	4013      	ands	r3, r2
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40021000 	.word	0x40021000

08001688 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <LL_RCC_SetAHBPrescaler+0x24>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	22f0      	movs	r2, #240	; 0xf0
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <LL_RCC_SetAHBPrescaler+0x24>)
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40021000 	.word	0x40021000

080016b0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80016be:	4013      	ands	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	40021000 	.word	0x40021000
 80016d8:	fffff8ff 	.word	0xfffff8ff

080016dc <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <LL_RCC_SetUSARTClockSource+0x30>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	0e12      	lsrs	r2, r2, #24
 80016ec:	2103      	movs	r1, #3
 80016ee:	4091      	lsls	r1, r2
 80016f0:	000a      	movs	r2, r1
 80016f2:	43d2      	mvns	r2, r2
 80016f4:	401a      	ands	r2, r3
 80016f6:	0011      	movs	r1, r2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	0a1a      	lsrs	r2, r3, #8
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <LL_RCC_SetUSARTClockSource+0x30>)
 8001700:	430a      	orrs	r2, r1
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b002      	add	sp, #8
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <LL_RCC_PLL_Enable+0x18>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <LL_RCC_PLL_Enable+0x18>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0449      	lsls	r1, r1, #17
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <LL_RCC_PLL_IsReady+0x24>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	049b      	lsls	r3, r3, #18
 8001738:	4013      	ands	r3, r2
 800173a:	22fe      	movs	r2, #254	; 0xfe
 800173c:	0612      	lsls	r2, r2, #24
 800173e:	4694      	mov	ip, r2
 8001740:	4463      	add	r3, ip
 8001742:	425a      	negs	r2, r3
 8001744:	4153      	adcs	r3, r2
 8001746:	b2db      	uxtb	r3, r3
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	431a      	orrs	r2, r3
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	220f      	movs	r2, #15
 800177c:	4393      	bics	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	430a      	orrs	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	ffc27fff 	.word	0xffc27fff

08001798 <LL_AHB1_GRP1_EnableClock>:
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80017a2:	6959      	ldr	r1, [r3, #20]
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4013      	ands	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b004      	add	sp, #16
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000

080017c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <LL_APB1_GRP1_EnableClock+0x28>)
 80017ce:	69d9      	ldr	r1, [r3, #28]
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_APB1_GRP1_EnableClock+0x28>)
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <LL_APB1_GRP1_EnableClock+0x28>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <LL_APB1_GRP2_EnableClock+0x28>)
 80017fa:	6999      	ldr	r1, [r3, #24]
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <LL_APB1_GRP2_EnableClock+0x28>)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	430a      	orrs	r2, r1
 8001802:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <LL_APB1_GRP2_EnableClock+0x28>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000

0800181c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <LL_FLASH_SetLatency+0x24>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2201      	movs	r2, #1
 800182a:	4393      	bics	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <LL_FLASH_SetLatency+0x24>)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40022000 	.word	0x40022000

08001844 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <LL_FLASH_GetLatency+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2201      	movs	r2, #1
 800184e:	4013      	ands	r3, r2
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40022000 	.word	0x40022000

0800185c <LL_TIM_DisableARRPreload>:
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	4393      	bics	r3, r2
 800186c:	001a      	movs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}

0800187a <LL_TIM_SetTriggerOutput>:
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2270      	movs	r2, #112	; 0x70
 800188a:	4393      	bics	r3, r2
 800188c:	001a      	movs	r2, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	605a      	str	r2, [r3, #4]
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}

0800189e <LL_TIM_DisableMasterSlaveMode>:
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	4393      	bics	r3, r2
 80018ae:	001a      	movs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <LL_USART_Enable>:
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b002      	add	sp, #8
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <LL_USART_ConfigAsyncMode>:
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <LL_USART_ConfigAsyncMode+0x2c>)
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	222a      	movs	r2, #42	; 0x2a
 80018f2:	4393      	bics	r3, r2
 80018f4:	001a      	movs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	609a      	str	r2, [r3, #8]
}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	ffffb7ff 	.word	0xffffb7ff

08001908 <LL_USART_DisableIT_CTS>:
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001910:	f3ef 8310 	mrs	r3, PRIMASK
 8001914:	60bb      	str	r3, [r7, #8]
  return(result);
 8001916:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	2301      	movs	r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f383 8810 	msr	PRIMASK, r3
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <LL_USART_DisableIT_CTS+0x40>)
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f383 8810 	msr	PRIMASK, r3
}
 800193c:	46c0      	nop			; (mov r8, r8)
}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	fffffbff 	.word	0xfffffbff

0800194c <LL_GPIO_ResetOutputPin>:
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff ff41 	bl	80017f0 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	055b      	lsls	r3, r3, #21
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff ff26 	bl	80017c4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001978:	f000 f810 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f000 f996 	bl	8001cac <MX_GPIO_Init>
  MX_I2C2_Init();
 8001980:	f000 f852 	bl	8001a28 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001984:	f000 f8da 	bl	8001b3c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001988:	f000 f90a 	bl	8001ba0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSL_Startup();
 800198c:	f7fe ffd6 	bl	800093c <BSL_Startup>

  BSL_Config();
 8001990:	f7fe ffe5 	bl	800095e <BSL_Config>

  BSL_Control();
 8001994:	f7fe ffea 	bl	800096c <BSL_Control>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001998:	e7fe      	b.n	8001998 <main+0x34>
	...

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff ff3b 	bl	800181c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	f7ff ff4c 	bl	8001844 <LL_FLASH_GetLatency>
 80019ac:	0003      	movs	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d1fa      	bne.n	80019a8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80019b2:	f7ff fe17 	bl	80015e4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	f7ff fe22 	bl	8001600 <LL_RCC_HSI_IsReady>
 80019bc:	0003      	movs	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d1fa      	bne.n	80019b8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80019c2:	2010      	movs	r0, #16
 80019c4:	f7ff fe2c 	bl	8001620 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PREDIV_DIV_1);
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	0359      	lsls	r1, r3, #13
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	2200      	movs	r2, #0
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7ff febe 	bl	8001754 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80019d8:	f7ff fe9a 	bl	8001710 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	f7ff fea5 	bl	800172c <LL_RCC_PLL_IsReady>
 80019e2:	0003      	movs	r3, r0
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d1fa      	bne.n	80019de <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fe4d 	bl	8001688 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff fe5e 	bl	80016b0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80019f4:	2002      	movs	r0, #2
 80019f6:	f7ff fe27 	bl	8001648 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	f7ff fe38 	bl	8001670 <LL_RCC_GetSysClkSource>
 8001a00:	0003      	movs	r3, r0
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d1fa      	bne.n	80019fc <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <SystemClock_Config+0x88>)
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f001 f81d 	bl	8002a48 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SystemClock_Config+0x88>)
 8001a10:	0018      	movs	r0, r3
 8001a12:	f001 f84b 	bl	8002aac <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fe60 	bl	80016dc <LL_RCC_SetUSARTClockSource>
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	02dc6c00 	.word	0x02dc6c00

08001a28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b08f      	sub	sp, #60	; 0x3c
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001a2e:	241c      	movs	r4, #28
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	0018      	movs	r0, r3
 8001a34:	231c      	movs	r3, #28
 8001a36:	001a      	movs	r2, r3
 8001a38:	2100      	movs	r1, #0
 8001a3a:	f001 f86f 	bl	8002b1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	0018      	movs	r0, r3
 8001a42:	2318      	movs	r3, #24
 8001a44:	001a      	movs	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	f001 f868 	bl	8002b1c <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	02db      	lsls	r3, r3, #11
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fea1 	bl	8001798 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	00d2      	lsls	r2, r2, #3
 8001a5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2202      	movs	r2, #2
 8001a62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2203      	movs	r2, #3
 8001a68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2201      	movs	r2, #1
 8001a74:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2201      	movs	r2, #1
 8001a7a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <MX_I2C2_Init+0x108>)
 8001a80:	0019      	movs	r1, r3
 8001a82:	0010      	movs	r0, r2
 8001a84:	f000 fb1e 	bl	80020c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2202      	movs	r2, #2
 8001a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2203      	movs	r2, #3
 8001a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2201      	movs	r2, #1
 8001aac:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <MX_I2C2_Init+0x108>)
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	0010      	movs	r0, r2
 8001ab6:	f000 fb05 	bl	80020c4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	03db      	lsls	r3, r3, #15
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7ff fe80 	bl	80017c4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_I2C2_Init+0x10c>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff fd6c 	bl	80015a4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_I2C2_Init+0x10c>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7ff fd42 	bl	8001558 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_I2C2_Init+0x10c>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7ff fd2e 	bl	8001538 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001adc:	0021      	movs	r1, r4
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x2010091A;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <MX_I2C2_Init+0x110>)
 8001ae8:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <MX_I2C2_Init+0x10c>)
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	0010      	movs	r0, r2
 8001b10:	f000 fbd2 	bl	80022b8 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_I2C2_Init+0x10c>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff fd54 	bl	80015c4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <MX_I2C2_Init+0x10c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff fd28 	bl	8001578 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b00f      	add	sp, #60	; 0x3c
 8001b2e:	bd90      	pop	{r4, r7, pc}
 8001b30:	48000400 	.word	0x48000400
 8001b34:	40005800 	.word	0x40005800
 8001b38:	2010091a 	.word	0x2010091a

08001b3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	0018      	movs	r0, r3
 8001b46:	2314      	movs	r3, #20
 8001b48:	001a      	movs	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	f000 ffe6 	bl	8002b1c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001b50:	2010      	movs	r0, #16
 8001b52:	f7ff fe37 	bl	80017c4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	222f      	movs	r2, #47	; 0x2f
 8001b5a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <MX_TIM6_Init+0x5c>)
 8001b66:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <MX_TIM6_Init+0x60>)
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	0010      	movs	r0, r2
 8001b70:	f000 fdd6 	bl	8002720 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_TIM6_Init+0x60>)
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fe70 	bl	800185c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_TIM6_Init+0x60>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fe7a 	bl	800187a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <MX_TIM6_Init+0x60>)
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff fe88 	bl	800189e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b006      	add	sp, #24
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	0000ffff 	.word	0x0000ffff
 8001b9c:	40001000 	.word	0x40001000

08001ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b08f      	sub	sp, #60	; 0x3c
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ba6:	241c      	movs	r4, #28
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	0018      	movs	r0, r3
 8001bac:	231c      	movs	r3, #28
 8001bae:	001a      	movs	r2, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f000 ffb3 	bl	8002b1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	0018      	movs	r0, r3
 8001bba:	2318      	movs	r3, #24
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f000 ffac 	bl	8002b1c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	01db      	lsls	r3, r3, #7
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7ff fe11 	bl	80017f0 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f7ff fde0 	bl	8001798 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2202      	movs	r2, #2
 8001be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2203      	movs	r2, #3
 8001bea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	1d3a      	adds	r2, r7, #4
 8001c00:	2390      	movs	r3, #144	; 0x90
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	0011      	movs	r1, r2
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 fa5c 	bl	80020c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	00d2      	lsls	r2, r2, #3
 8001c12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2202      	movs	r2, #2
 8001c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2201      	movs	r2, #1
 8001c30:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	1d3a      	adds	r2, r7, #4
 8001c34:	2390      	movs	r3, #144	; 0x90
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	0011      	movs	r1, r2
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 fa42 	bl	80020c4 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8001c40:	2100      	movs	r1, #0
 8001c42:	201b      	movs	r0, #27
 8001c44:	f7ff fc0a 	bl	800145c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001c48:	201b      	movs	r0, #27
 8001c4a:	f7ff fbed 	bl	8001428 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	2296      	movs	r2, #150	; 0x96
 8001c52:	0212      	lsls	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c56:	0021      	movs	r1, r4
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <MX_USART1_UART_Init+0x108>)
 8001c80:	0019      	movs	r1, r3
 8001c82:	0010      	movs	r0, r2
 8001c84:	f000 fe44 	bl	8002910 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <MX_USART1_UART_Init+0x108>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7ff fe3c 	bl	8001908 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <MX_USART1_UART_Init+0x108>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7ff fe20 	bl	80018d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <MX_USART1_UART_Init+0x108>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff fe0e 	bl	80018bc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b00f      	add	sp, #60	; 0x3c
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	40013800 	.word	0x40013800

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	003b      	movs	r3, r7
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	2318      	movs	r3, #24
 8001cb8:	001a      	movs	r2, r3
 8001cba:	2100      	movs	r1, #0
 8001cbc:	f000 ff2e 	bl	8002b1c <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	02db      	lsls	r3, r3, #11
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fd67 	bl	8001798 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	031b      	lsls	r3, r3, #12
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff fd62 	bl	8001798 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff fd5d 	bl	8001798 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <MX_GPIO_Init+0x134>)
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fe32 	bl	800194c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <MX_GPIO_Init+0x138>)
 8001cea:	2140      	movs	r1, #64	; 0x40
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff fe2d 	bl	800194c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD6_GPIO_Port, LD6_Pin);
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <MX_GPIO_Init+0x138>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff fe28 	bl	800194c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD4_GPIO_Port, LD4_Pin);
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <MX_GPIO_Init+0x138>)
 8001d02:	0019      	movs	r1, r3
 8001d04:	0010      	movs	r0, r2
 8001d06:	f7ff fe21 	bl	800194c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DHT11_IN_Pin;
 8001d0a:	003b      	movs	r3, r7
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d10:	003b      	movs	r3, r7
 8001d12:	2201      	movs	r2, #1
 8001d14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d16:	003b      	movs	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d1c:	003b      	movs	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d22:	003b      	movs	r3, r7
 8001d24:	2201      	movs	r2, #1
 8001d26:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DHT11_IN_GPIO_Port, &GPIO_InitStruct);
 8001d28:	003b      	movs	r3, r7
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <MX_GPIO_Init+0x134>)
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	0010      	movs	r0, r2
 8001d30:	f000 f9c8 	bl	80020c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8001d34:	003b      	movs	r3, r7
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d40:	003b      	movs	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d46:	003b      	movs	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001d52:	003b      	movs	r3, r7
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <MX_GPIO_Init+0x138>)
 8001d56:	0019      	movs	r1, r3
 8001d58:	0010      	movs	r0, r2
 8001d5a:	f000 f9b3 	bl	80020c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD6_Pin;
 8001d5e:	003b      	movs	r3, r7
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d64:	003b      	movs	r3, r7
 8001d66:	2201      	movs	r2, #1
 8001d68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d6a:	003b      	movs	r3, r7
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d70:	003b      	movs	r3, r7
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d76:	003b      	movs	r3, r7
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	003b      	movs	r3, r7
 8001d7e:	4a19      	ldr	r2, [pc, #100]	; (8001de4 <MX_GPIO_Init+0x138>)
 8001d80:	0019      	movs	r1, r3
 8001d82:	0010      	movs	r0, r2
 8001d84:	f000 f99e 	bl	80020c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin;
 8001d88:	003b      	movs	r3, r7
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	0052      	lsls	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d90:	003b      	movs	r3, r7
 8001d92:	2201      	movs	r2, #1
 8001d94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d96:	003b      	movs	r3, r7
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d9c:	003b      	movs	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001da2:	003b      	movs	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001da8:	003b      	movs	r3, r7
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <MX_GPIO_Init+0x138>)
 8001dac:	0019      	movs	r1, r3
 8001dae:	0010      	movs	r0, r2
 8001db0:	f000 f988 	bl	80020c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 8001db4:	003b      	movs	r3, r7
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	0052      	lsls	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001dbc:	003b      	movs	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dc2:	003b      	movs	r3, r7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	003a      	movs	r2, r7
 8001dca:	2390      	movs	r3, #144	; 0x90
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	0011      	movs	r1, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f977 	bl	80020c4 <LL_GPIO_Init>

}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b006      	add	sp, #24
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	48000400 	.word	0x48000400
 8001de4:	48000800 	.word	0x48000800

08001de8 <LL_USART_IsActiveFlag_RXNE>:
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2220      	movs	r2, #32
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d101      	bne.n	8001e00 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b002      	add	sp, #8
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <LL_USART_IsEnabledIT_RXNE>:
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2220      	movs	r2, #32
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d101      	bne.n	8001e22 <LL_USART_IsEnabledIT_RXNE+0x18>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_USART_IsEnabledIT_RXNE+0x1a>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler+0x4>

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSL_Tick();
 8001e50:	f7ff faac 	bl	80013ac <BSL_Tick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	 /* Check RXNE flag value in SR register */
	  if(LL_USART_IsActiveFlag_RXNE(USART1) )
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <USART1_IRQHandler+0x28>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff ffc0 	bl	8001de8 <LL_USART_IsActiveFlag_RXNE>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d007      	beq.n	8001e7c <USART1_IRQHandler+0x20>
	  {
		  if(LL_USART_IsEnabledIT_RXNE(USART1))
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <USART1_IRQHandler+0x28>)
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f7ff ffcb 	bl	8001e0a <LL_USART_IsEnabledIT_RXNE>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d001      	beq.n	8001e7c <USART1_IRQHandler+0x20>
		  {
	    /* RXNE flag will be cleared by reading of DR register (done in call) */
	    /* Call function in charge of handling Character reception */
			  	  USART_CharReception_Callback();
 8001e78:	f7ff f888 	bl	8000f8c <USART_CharReception_Callback>
	  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40013800 	.word	0x40013800

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f000 fe06 	bl	8002ac8 <__errno>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	18d2      	adds	r2, r2, r3
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b006      	add	sp, #24
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20004000 	.word	0x20004000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	200000ac 	.word	0x200000ac
 8001ef0:	20000578 	.word	0x20000578

08001ef4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490e      	ldr	r1, [pc, #56]	; (8001f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0b      	ldr	r4, [pc, #44]	; (8001f4c <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f2a:	f7ff ffe3 	bl	8001ef4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f2e:	f000 fdd1 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f32:	f7ff fd17 	bl	8001964 <main>

08001f36 <LoopForever>:

LoopForever:
    b LoopForever
 8001f36:	e7fe      	b.n	8001f36 <LoopForever>
  ldr   r0, =_estack
 8001f38:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f44:	0800414c 	.word	0x0800414c
  ldr r2, =_sbss
 8001f48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f4c:	20000578 	.word	0x20000578

08001f50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_COMP_IRQHandler>

08001f52 <LL_GPIO_SetPinMode>:
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	435b      	muls	r3, r3
 8001f66:	001a      	movs	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	189b      	adds	r3, r3, r2
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	400b      	ands	r3, r1
 8001f72:	001a      	movs	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	435b      	muls	r3, r3
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	434b      	muls	r3, r1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b004      	add	sp, #16
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <LL_GPIO_SetPinOutputType>:
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	43d2      	mvns	r2, r2
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	434b      	muls	r3, r1
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b004      	add	sp, #16
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <LL_GPIO_SetPinSpeed>:
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	435b      	muls	r3, r3
 8001fc8:	001a      	movs	r2, r3
 8001fca:	0013      	movs	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	435b      	muls	r3, r3
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	434b      	muls	r3, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	609a      	str	r2, [r3, #8]
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bd80      	pop	{r7, pc}

08001fec <LL_GPIO_SetPinPull>:
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68d9      	ldr	r1, [r3, #12]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	435b      	muls	r3, r3
 8002000:	001a      	movs	r2, r3
 8002002:	0013      	movs	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	189b      	adds	r3, r3, r2
 8002008:	43db      	mvns	r3, r3
 800200a:	400b      	ands	r3, r1
 800200c:	001a      	movs	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	435b      	muls	r3, r3
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	434b      	muls	r3, r1
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	60da      	str	r2, [r3, #12]
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b004      	add	sp, #16
 8002022:	bd80      	pop	{r7, pc}

08002024 <LL_GPIO_SetAFPin_0_7>:
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a19      	ldr	r1, [r3, #32]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	435b      	muls	r3, r3
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	4353      	muls	r3, r2
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	435a      	muls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	43db      	mvns	r3, r3
 8002048:	400b      	ands	r3, r1
 800204a:	001a      	movs	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	435b      	muls	r3, r3
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	434b      	muls	r3, r1
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	434b      	muls	r3, r1
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	434b      	muls	r3, r1
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	621a      	str	r2, [r3, #32]
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}

0800206a <LL_GPIO_SetAFPin_8_15>:
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	0a12      	lsrs	r2, r2, #8
 8002082:	4353      	muls	r3, r2
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	0a12      	lsrs	r2, r2, #8
 8002088:	4353      	muls	r3, r2
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	0a12      	lsrs	r2, r2, #8
 800208e:	435a      	muls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	43db      	mvns	r3, r3
 8002098:	400b      	ands	r3, r1
 800209a:	001a      	movs	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	0a09      	lsrs	r1, r1, #8
 80020a4:	434b      	muls	r3, r1
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	0a09      	lsrs	r1, r1, #8
 80020aa:	434b      	muls	r3, r1
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	0a09      	lsrs	r1, r1, #8
 80020b0:	434b      	muls	r3, r1
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	434b      	muls	r3, r1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80020d2:	e048      	b.n	8002166 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4091      	lsls	r1, r2
 80020de:	000a      	movs	r2, r1
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03a      	beq.n	8002160 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d003      	beq.n	80020fa <LL_GPIO_Init+0x36>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d10e      	bne.n	8002118 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff ff56 	bl	8001fb4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff ff39 	bl	8001f8a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ff63 	bl	8001fec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d111      	bne.n	8002152 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2bff      	cmp	r3, #255	; 0xff
 8002132:	d807      	bhi.n	8002144 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f7ff ff71 	bl	8002024 <LL_GPIO_SetAFPin_0_7>
 8002142:	e006      	b.n	8002152 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f7ff ff8c 	bl	800206a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff fef9 	bl	8001f52 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	40da      	lsrs	r2, r3
 800216e:	1e13      	subs	r3, r2, #0
 8002170:	d1b0      	bne.n	80020d4 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b004      	add	sp, #16
 800217a:	bd80      	pop	{r7, pc}

0800217c <LL_I2C_Enable>:
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <LL_I2C_Disable>:
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4393      	bics	r3, r2
 80021a8:	001a      	movs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <LL_I2C_ConfigFilters>:
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <LL_I2C_ConfigFilters+0x2c>)
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0219      	lsls	r1, r3, #8
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	ffffe0ff 	.word	0xffffe0ff

080021e8 <LL_I2C_SetOwnAddress1>:
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	0adb      	lsrs	r3, r3, #11
 80021fa:	02da      	lsls	r2, r3, #11
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	430b      	orrs	r3, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	609a      	str	r2, [r3, #8]
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b004      	add	sp, #16
 800220e:	bd80      	pop	{r7, pc}

08002210 <LL_I2C_EnableOwnAddress1>:
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0212      	lsls	r2, r2, #8
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <LL_I2C_DisableOwnAddress1>:
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a03      	ldr	r2, [pc, #12]	; (800224c <LL_I2C_DisableOwnAddress1+0x1c>)
 800223e:	401a      	ands	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}
 800224c:	ffff7fff 	.word	0xffff7fff

08002250 <LL_I2C_SetTiming>:
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	611a      	str	r2, [r3, #16]
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <LL_I2C_SetMode>:
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <LL_I2C_SetMode+0x24>)
 8002278:	401a      	ands	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b002      	add	sp, #8
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	ffcfffff 	.word	0xffcfffff

08002290 <LL_I2C_AcknowledgeNextData>:
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <LL_I2C_AcknowledgeNextData+0x24>)
 80022a0:	401a      	ands	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	605a      	str	r2, [r3, #4]
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	ffff7fff 	.word	0xffff7fff

080022b8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff ff67 	bl	8002198 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff ff6f 	bl	80021b8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0011      	movs	r1, r2
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7ff ffb4 	bl	8002250 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff ff46 	bl	800217c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff ff9c 	bl	8002230 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6919      	ldr	r1, [r3, #16]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff ff70 	bl	80021e8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff ff7c 	bl	8002210 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0011      	movs	r1, r2
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff ffa1 	bl	8002268 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0011      	movs	r1, r2
 800232e:	0018      	movs	r0, r3
 8002330:	f7ff ffae 	bl	8002290 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <LL_RCC_HSI_IsReady>:
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <LL_RCC_HSI_IsReady+0x1c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	3b02      	subs	r3, #2
 800234e:	425a      	negs	r2, r3
 8002350:	4153      	adcs	r3, r2
 8002352:	b2db      	uxtb	r3, r3
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40021000 	.word	0x40021000

08002360 <LL_RCC_LSE_IsReady>:
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <LL_RCC_LSE_IsReady+0x1c>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	3b02      	subs	r3, #2
 800236e:	425a      	negs	r2, r3
 8002370:	4153      	adcs	r3, r2
 8002372:	b2db      	uxtb	r3, r3
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	40021000 	.word	0x40021000

08002380 <LL_RCC_GetSysClkSource>:
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <LL_RCC_GetSysClkSource+0x14>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	220c      	movs	r2, #12
 800238a:	4013      	ands	r3, r2
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	40021000 	.word	0x40021000

08002398 <LL_RCC_GetAHBPrescaler>:
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <LL_RCC_GetAHBPrescaler+0x14>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	22f0      	movs	r2, #240	; 0xf0
 80023a2:	4013      	ands	r3, r2
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_GetAPB1Prescaler>:
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	23e0      	movs	r3, #224	; 0xe0
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4013      	ands	r3, r2
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <LL_RCC_GetUSARTClockSource>:
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <LL_RCC_GetUSARTClockSource+0x24>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	2103      	movs	r1, #3
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4091      	lsls	r1, r2
 80023da:	000a      	movs	r2, r1
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	4313      	orrs	r3, r2
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000

080023f0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <LL_RCC_PLL_GetMainSource+0x14>)
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	23c0      	movs	r3, #192	; 0xc0
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	4013      	ands	r3, r2
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	23f0      	movs	r3, #240	; 0xf0
 8002412:	039b      	lsls	r3, r3, #14
 8002414:	4013      	ands	r3, r2
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000

08002420 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <LL_RCC_PLL_GetPrediv+0x14>)
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	220f      	movs	r2, #15
 800242a:	4013      	ands	r3, r2
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40021000 	.word	0x40021000

08002438 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002440:	f000 f89c 	bl	800257c <RCC_GetSystemClockFreq>
 8002444:	0002      	movs	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f8c2 	bl	80025d8 <RCC_GetHCLKClockFreq>
 8002454:	0002      	movs	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0018      	movs	r0, r3
 8002460:	f000 f8d0 	bl	8002604 <RCC_GetPCLK1ClockFreq>
 8002464:	0002      	movs	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	609a      	str	r2, [r3, #8]
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d12d      	bne.n	80024e2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff ff9d 	bl	80023c8 <LL_RCC_GetUSARTClockSource>
 800248e:	0003      	movs	r3, r0
 8002490:	2b03      	cmp	r3, #3
 8002492:	d00a      	beq.n	80024aa <LL_RCC_GetUSARTClockFreq+0x36>
 8002494:	d818      	bhi.n	80024c8 <LL_RCC_GetUSARTClockFreq+0x54>
 8002496:	2b01      	cmp	r3, #1
 8002498:	d002      	beq.n	80024a0 <LL_RCC_GetUSARTClockFreq+0x2c>
 800249a:	2b02      	cmp	r3, #2
 800249c:	d00c      	beq.n	80024b8 <LL_RCC_GetUSARTClockFreq+0x44>
 800249e:	e013      	b.n	80024c8 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80024a0:	f000 f86c 	bl	800257c <RCC_GetSystemClockFreq>
 80024a4:	0003      	movs	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
        break;
 80024a8:	e020      	b.n	80024ec <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80024aa:	f7ff ff49 	bl	8002340 <LL_RCC_HSI_IsReady>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d019      	beq.n	80024e6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <LL_RCC_GetUSARTClockFreq+0xf8>)
 80024b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024b6:	e016      	b.n	80024e6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80024b8:	f7ff ff52 	bl	8002360 <LL_RCC_LSE_IsReady>
 80024bc:	1e03      	subs	r3, r0, #0
 80024be:	d014      	beq.n	80024ea <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024c6:	e010      	b.n	80024ea <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024c8:	f000 f858 	bl	800257c <RCC_GetSystemClockFreq>
 80024cc:	0003      	movs	r3, r0
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f882 	bl	80025d8 <RCC_GetHCLKClockFreq>
 80024d4:	0003      	movs	r3, r0
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f894 	bl	8002604 <RCC_GetPCLK1ClockFreq>
 80024dc:	0003      	movs	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]
        break;
 80024e0:	e004      	b.n	80024ec <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	e002      	b.n	80024ec <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	e000      	b.n	80024ec <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80024ea:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d132      	bne.n	8002558 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff ff67 	bl	80023c8 <LL_RCC_GetUSARTClockSource>
 80024fa:	0003      	movs	r3, r0
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <LL_RCC_GetUSARTClockFreq+0xfc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <LL_RCC_GetUSARTClockFreq+0xac>
 8002502:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <LL_RCC_GetUSARTClockFreq+0xfc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d81a      	bhi.n	800253e <LL_RCC_GetUSARTClockFreq+0xca>
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <LL_RCC_GetUSARTClockFreq+0x100>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d003      	beq.n	8002516 <LL_RCC_GetUSARTClockFreq+0xa2>
 800250e:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <LL_RCC_GetUSARTClockFreq+0x104>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00c      	beq.n	800252e <LL_RCC_GetUSARTClockFreq+0xba>
 8002514:	e013      	b.n	800253e <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002516:	f000 f831 	bl	800257c <RCC_GetSystemClockFreq>
 800251a:	0003      	movs	r3, r0
 800251c:	60fb      	str	r3, [r7, #12]
        break;
 800251e:	e020      	b.n	8002562 <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002520:	f7ff ff0e 	bl	8002340 <LL_RCC_HSI_IsReady>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d019      	beq.n	800255c <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <LL_RCC_GetUSARTClockFreq+0xf8>)
 800252a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800252c:	e016      	b.n	800255c <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800252e:	f7ff ff17 	bl	8002360 <LL_RCC_LSE_IsReady>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d014      	beq.n	8002560 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800253c:	e010      	b.n	8002560 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800253e:	f000 f81d 	bl	800257c <RCC_GetSystemClockFreq>
 8002542:	0003      	movs	r3, r0
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f847 	bl	80025d8 <RCC_GetHCLKClockFreq>
 800254a:	0003      	movs	r3, r0
 800254c:	0018      	movs	r0, r3
 800254e:	f000 f859 	bl	8002604 <RCC_GetPCLK1ClockFreq>
 8002552:	0003      	movs	r3, r0
 8002554:	60fb      	str	r3, [r7, #12]
        break;
 8002556:	e004      	b.n	8002562 <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	e002      	b.n	8002562 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	e000      	b.n	8002562 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8002560:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}
 800256c:	007a1200 	.word	0x007a1200
 8002570:	10030000 	.word	0x10030000
 8002574:	10010000 	.word	0x10010000
 8002578:	10020000 	.word	0x10020000

0800257c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002586:	f7ff fefb 	bl	8002380 <LL_RCC_GetSysClkSource>
 800258a:	0003      	movs	r3, r0
 800258c:	2b0c      	cmp	r3, #12
 800258e:	d013      	beq.n	80025b8 <RCC_GetSystemClockFreq+0x3c>
 8002590:	d815      	bhi.n	80025be <RCC_GetSystemClockFreq+0x42>
 8002592:	2b08      	cmp	r3, #8
 8002594:	d00b      	beq.n	80025ae <RCC_GetSystemClockFreq+0x32>
 8002596:	d812      	bhi.n	80025be <RCC_GetSystemClockFreq+0x42>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <RCC_GetSystemClockFreq+0x26>
 800259c:	2b04      	cmp	r3, #4
 800259e:	d003      	beq.n	80025a8 <RCC_GetSystemClockFreq+0x2c>
 80025a0:	e00d      	b.n	80025be <RCC_GetSystemClockFreq+0x42>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <RCC_GetSystemClockFreq+0x54>)
 80025a4:	607b      	str	r3, [r7, #4]
      break;
 80025a6:	e00d      	b.n	80025c4 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <RCC_GetSystemClockFreq+0x54>)
 80025aa:	607b      	str	r3, [r7, #4]
      break;
 80025ac:	e00a      	b.n	80025c4 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80025ae:	f000 f83d 	bl	800262c <RCC_PLL_GetFreqDomain_SYS>
 80025b2:	0003      	movs	r3, r0
 80025b4:	607b      	str	r3, [r7, #4]
      break;
 80025b6:	e005      	b.n	80025c4 <RCC_GetSystemClockFreq+0x48>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI48:/* HSI48 used as system clock  source */
      frequency = HSI48_VALUE;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <RCC_GetSystemClockFreq+0x58>)
 80025ba:	607b      	str	r3, [r7, #4]
      break;
 80025bc:	e002      	b.n	80025c4 <RCC_GetSystemClockFreq+0x48>
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <RCC_GetSystemClockFreq+0x54>)
 80025c0:	607b      	str	r3, [r7, #4]
      break;
 80025c2:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	02dc6c00 	.word	0x02dc6c00

080025d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80025e0:	f7ff feda 	bl	8002398 <LL_RCC_GetAHBPrescaler>
 80025e4:	0003      	movs	r3, r0
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	220f      	movs	r2, #15
 80025ea:	4013      	ands	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <RCC_GetHCLKClockFreq+0x28>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	001a      	movs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	40d3      	lsrs	r3, r2
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	080040f8 	.word	0x080040f8

08002604 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800260c:	f7ff fed0 	bl	80023b0 <LL_RCC_GetAPB1Prescaler>
 8002610:	0003      	movs	r3, r0
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <RCC_GetPCLK1ClockFreq+0x24>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	001a      	movs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	40d3      	lsrs	r3, r2
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	08004108 	.word	0x08004108

0800262c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800263a:	f7ff fed9 	bl	80023f0 <LL_RCC_PLL_GetMainSource>
 800263e:	0003      	movs	r3, r0
 8002640:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	23c0      	movs	r3, #192	; 0xc0
 8002646:	025b      	lsls	r3, r3, #9
 8002648:	429a      	cmp	r2, r3
 800264a:	d012      	beq.n	8002672 <RCC_PLL_GetFreqDomain_SYS+0x46>
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	23c0      	movs	r3, #192	; 0xc0
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	429a      	cmp	r2, r3
 8002654:	d813      	bhi.n	800267e <RCC_PLL_GetFreqDomain_SYS+0x52>
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	429a      	cmp	r2, r3
 800265e:	d005      	beq.n	800266c <RCC_PLL_GetFreqDomain_SYS+0x40>
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	025b      	lsls	r3, r3, #9
 8002666:	429a      	cmp	r2, r3
 8002668:	d006      	beq.n	8002678 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800266a:	e008      	b.n	800267e <RCC_PLL_GetFreqDomain_SYS+0x52>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800266e:	607b      	str	r3, [r7, #4]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002670:	e008      	b.n	8002684 <RCC_PLL_GetFreqDomain_SYS+0x58>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <RCC_PLL_GetFreqDomain_SYS+0x8c>)
 8002674:	607b      	str	r3, [r7, #4]
      break;
 8002676:	e005      	b.n	8002684 <RCC_PLL_GetFreqDomain_SYS+0x58>
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800267a:	607b      	str	r3, [r7, #4]
      break;
 800267c:	e002      	b.n	8002684 <RCC_PLL_GetFreqDomain_SYS+0x58>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8002680:	607b      	str	r3, [r7, #4]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002682:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8002684:	f7ff fecc 	bl	8002420 <LL_RCC_PLL_GetPrediv>
 8002688:	0003      	movs	r3, r0
 800268a:	220f      	movs	r2, #15
 800268c:	4013      	ands	r3, r2
 800268e:	3301      	adds	r3, #1
 8002690:	0019      	movs	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fd fd42 	bl	800011c <__udivsi3>
 8002698:	0003      	movs	r3, r0
 800269a:	001c      	movs	r4, r3
 800269c:	f7ff feb4 	bl	8002408 <LL_RCC_PLL_GetMultiplicator>
 80026a0:	0003      	movs	r3, r0
 80026a2:	0c9b      	lsrs	r3, r3, #18
 80026a4:	220f      	movs	r2, #15
 80026a6:	4013      	ands	r3, r2
 80026a8:	3302      	adds	r3, #2
 80026aa:	4363      	muls	r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b003      	add	sp, #12
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	007a1200 	.word	0x007a1200
 80026b8:	02dc6c00 	.word	0x02dc6c00

080026bc <LL_TIM_SetPrescaler>:
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LL_TIM_SetAutoReload>:
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}

080026ec <LL_TIM_SetRepetitionCounter>:
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}

08002704 <LL_TIM_GenerateEvent_UPDATE>:
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	2201      	movs	r2, #1
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	615a      	str	r2, [r3, #20]
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <LL_TIM_Init+0xe8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d008      	beq.n	800274a <LL_TIM_Init+0x2a>
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	429a      	cmp	r2, r3
 8002740:	d003      	beq.n	800274a <LL_TIM_Init+0x2a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a31      	ldr	r2, [pc, #196]	; (800280c <LL_TIM_Init+0xec>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d107      	bne.n	800275a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2270      	movs	r2, #112	; 0x70
 800274e:	4393      	bics	r3, r2
 8002750:	001a      	movs	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <LL_TIM_Init+0xe8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d018      	beq.n	8002794 <LL_TIM_Init+0x74>
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	05db      	lsls	r3, r3, #23
 8002768:	429a      	cmp	r2, r3
 800276a:	d013      	beq.n	8002794 <LL_TIM_Init+0x74>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a27      	ldr	r2, [pc, #156]	; (800280c <LL_TIM_Init+0xec>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00f      	beq.n	8002794 <LL_TIM_Init+0x74>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a26      	ldr	r2, [pc, #152]	; (8002810 <LL_TIM_Init+0xf0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00b      	beq.n	8002794 <LL_TIM_Init+0x74>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a25      	ldr	r2, [pc, #148]	; (8002814 <LL_TIM_Init+0xf4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <LL_TIM_Init+0x74>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <LL_TIM_Init+0xf8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d003      	beq.n	8002794 <LL_TIM_Init+0x74>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a23      	ldr	r2, [pc, #140]	; (800281c <LL_TIM_Init+0xfc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d106      	bne.n	80027a2 <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a22      	ldr	r2, [pc, #136]	; (8002820 <LL_TIM_Init+0x100>)
 8002798:	401a      	ands	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0011      	movs	r1, r2
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff ff8f 	bl	80026d4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	001a      	movs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7ff ff7b 	bl	80026bc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <LL_TIM_Init+0xe8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00b      	beq.n	80027e6 <LL_TIM_Init+0xc6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a10      	ldr	r2, [pc, #64]	; (8002814 <LL_TIM_Init+0xf4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <LL_TIM_Init+0xc6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <LL_TIM_Init+0xf8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d003      	beq.n	80027e6 <LL_TIM_Init+0xc6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a0e      	ldr	r2, [pc, #56]	; (800281c <LL_TIM_Init+0xfc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d106      	bne.n	80027f4 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff ff7c 	bl	80026ec <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7ff ff84 	bl	8002704 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40012c00 	.word	0x40012c00
 800280c:	40000400 	.word	0x40000400
 8002810:	40002000 	.word	0x40002000
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800
 8002820:	fffffcff 	.word	0xfffffcff

08002824 <LL_USART_IsEnabled>:
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <LL_USART_IsEnabled+0x18>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <LL_USART_IsEnabled+0x1a>
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <LL_USART_SetStopBitsLength>:
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <LL_USART_SetStopBitsLength+0x24>)
 8002858:	401a      	ands	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	605a      	str	r2, [r3, #4]
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b002      	add	sp, #8
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	ffffcfff 	.word	0xffffcfff

08002870 <LL_USART_SetHWFlowCtrl>:
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <LL_USART_SetHWFlowCtrl+0x24>)
 8002880:	401a      	ands	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	fffffcff 	.word	0xfffffcff

08002898 <LL_USART_SetBaudRate>:
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d11c      	bne.n	80028ea <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	005a      	lsls	r2, r3, #1
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fd fc2d 	bl	800011c <__udivsi3>
 80028c2:	0003      	movs	r3, r0
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <LL_USART_SetBaudRate+0x74>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	001a      	movs	r2, r3
 80028d8:	2307      	movs	r3, #7
 80028da:	4013      	ands	r3, r2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	60da      	str	r2, [r3, #12]
}
 80028e8:	e00c      	b.n	8002904 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	085a      	lsrs	r2, r3, #1
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	18d3      	adds	r3, r2, r3
 80028f2:	6839      	ldr	r1, [r7, #0]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fd fc11 	bl	800011c <__udivsi3>
 80028fa:	0003      	movs	r3, r0
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	001a      	movs	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	60da      	str	r2, [r3, #12]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b006      	add	sp, #24
 800290a:	bd80      	pop	{r7, pc}
 800290c:	0000fff0 	.word	0x0000fff0

08002910 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800291a:	231f      	movs	r3, #31
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff ff7b 	bl	8002824 <LL_USART_IsEnabled>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d15f      	bne.n	80029f2 <LL_USART_Init+0xe2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <LL_USART_Init+0xf0>)
 8002938:	401a      	ands	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4319      	orrs	r1, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	4319      	orrs	r1, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	430b      	orrs	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0011      	movs	r1, r2
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff ff72 	bl	8002848 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0011      	movs	r1, r2
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ff7f 	bl	8002870 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <LL_USART_Init+0xf4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d105      	bne.n	8002986 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800297a:	2000      	movs	r0, #0
 800297c:	f7ff fd7a 	bl	8002474 <LL_RCC_GetUSARTClockFreq>
 8002980:	0003      	movs	r3, r0
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	e022      	b.n	80029cc <LL_USART_Init+0xbc>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <LL_USART_Init+0xf8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d105      	bne.n	800299a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800298e:	2010      	movs	r0, #16
 8002990:	f7ff fd70 	bl	8002474 <LL_RCC_GetUSARTClockFreq>
 8002994:	0003      	movs	r3, r0
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	e018      	b.n	80029cc <LL_USART_Init+0xbc>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#endif /* USART2 */
#if defined(USART3)
    else if (USARTx == USART3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <LL_USART_Init+0xfc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80029a2:	240c      	movs	r4, #12
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff fd46 	bl	8002438 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e00b      	b.n	80029cc <LL_USART_Init+0xbc>
#endif
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <LL_USART_Init+0x100>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d107      	bne.n	80029cc <LL_USART_Init+0xbc>
    {
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80029bc:	240c      	movs	r4, #12
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff fd39 	bl	8002438 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00f      	beq.n	80029f2 <LL_USART_Init+0xe2>
        && (USART_InitStruct->BaudRate != 0U))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <LL_USART_Init+0xe2>
    {
      status = SUCCESS;
 80029da:	231f      	movs	r3, #31
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff53 	bl	8002898 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80029f2:	231f      	movs	r3, #31
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	781b      	ldrb	r3, [r3, #0]
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b009      	add	sp, #36	; 0x24
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	efff69f3 	.word	0xefff69f3
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40004400 	.word	0x40004400
 8002a0c:	40004800 	.word	0x40004800
 8002a10:	40004c00 	.word	0x40004c00

08002a14 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002a1e:	6839      	ldr	r1, [r7, #0]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd fb7b 	bl	800011c <__udivsi3>
 8002a26:	0003      	movs	r3, r0
 8002a28:	001a      	movs	r2, r3
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <LL_InitTick+0x30>)
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <LL_InitTick+0x30>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <LL_InitTick+0x30>)
 8002a38:	2205      	movs	r2, #5
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002a50:	23fa      	movs	r3, #250	; 0xfa
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0011      	movs	r1, r2
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff ffdb 	bl	8002a14 <LL_InitTick>
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <LL_mDelay+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002a76:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	d00c      	beq.n	8002a98 <LL_mDelay+0x30>
  {
    Delay++;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3301      	adds	r3, #1
 8002a82:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002a84:	e008      	b.n	8002a98 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <LL_mDelay+0x40>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	025b      	lsls	r3, r3, #9
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d002      	beq.n	8002a98 <LL_mDelay+0x30>
    {
      Delay--;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f3      	bne.n	8002a86 <LL_mDelay+0x1e>
    }
  }
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <LL_SetSystemCoreClock+0x18>)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	20000008 	.word	0x20000008

08002ac8 <__errno>:
 8002ac8:	4b01      	ldr	r3, [pc, #4]	; (8002ad0 <__errno+0x8>)
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	4770      	bx	lr
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	2000000c 	.word	0x2000000c

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	4d0c      	ldr	r5, [pc, #48]	; (8002b0c <__libc_init_array+0x38>)
 8002ada:	4c0d      	ldr	r4, [pc, #52]	; (8002b10 <__libc_init_array+0x3c>)
 8002adc:	1b64      	subs	r4, r4, r5
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	f000 fc47 	bl	8003378 <_init>
 8002aea:	4d0a      	ldr	r5, [pc, #40]	; (8002b14 <__libc_init_array+0x40>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	; (8002b18 <__libc_init_array+0x44>)
 8002aee:	1b64      	subs	r4, r4, r5
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	00b3      	lsls	r3, r6, #2
 8002afa:	58eb      	ldr	r3, [r5, r3]
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	00b3      	lsls	r3, r6, #2
 8002b04:	58eb      	ldr	r3, [r5, r3]
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	08004144 	.word	0x08004144
 8002b10:	08004144 	.word	0x08004144
 8002b14:	08004144 	.word	0x08004144
 8002b18:	08004148 	.word	0x08004148

08002b1c <memset>:
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	1882      	adds	r2, r0, r2
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	7019      	strb	r1, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <siprintf>:
 8002b2c:	b40e      	push	{r1, r2, r3}
 8002b2e:	b500      	push	{lr}
 8002b30:	490b      	ldr	r1, [pc, #44]	; (8002b60 <siprintf+0x34>)
 8002b32:	b09c      	sub	sp, #112	; 0x70
 8002b34:	ab1d      	add	r3, sp, #116	; 0x74
 8002b36:	9002      	str	r0, [sp, #8]
 8002b38:	9006      	str	r0, [sp, #24]
 8002b3a:	9107      	str	r1, [sp, #28]
 8002b3c:	9104      	str	r1, [sp, #16]
 8002b3e:	4809      	ldr	r0, [pc, #36]	; (8002b64 <siprintf+0x38>)
 8002b40:	4909      	ldr	r1, [pc, #36]	; (8002b68 <siprintf+0x3c>)
 8002b42:	cb04      	ldmia	r3!, {r2}
 8002b44:	9105      	str	r1, [sp, #20]
 8002b46:	6800      	ldr	r0, [r0, #0]
 8002b48:	a902      	add	r1, sp, #8
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	f000 f870 	bl	8002c30 <_svfiprintf_r>
 8002b50:	2300      	movs	r3, #0
 8002b52:	9a02      	ldr	r2, [sp, #8]
 8002b54:	7013      	strb	r3, [r2, #0]
 8002b56:	b01c      	add	sp, #112	; 0x70
 8002b58:	bc08      	pop	{r3}
 8002b5a:	b003      	add	sp, #12
 8002b5c:	4718      	bx	r3
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	7fffffff 	.word	0x7fffffff
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	ffff0208 	.word	0xffff0208

08002b6c <__ssputs_r>:
 8002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6e:	688e      	ldr	r6, [r1, #8]
 8002b70:	b085      	sub	sp, #20
 8002b72:	0007      	movs	r7, r0
 8002b74:	000c      	movs	r4, r1
 8002b76:	9203      	str	r2, [sp, #12]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	429e      	cmp	r6, r3
 8002b7c:	d83c      	bhi.n	8002bf8 <__ssputs_r+0x8c>
 8002b7e:	2390      	movs	r3, #144	; 0x90
 8002b80:	898a      	ldrh	r2, [r1, #12]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	421a      	tst	r2, r3
 8002b86:	d034      	beq.n	8002bf2 <__ssputs_r+0x86>
 8002b88:	2503      	movs	r5, #3
 8002b8a:	6909      	ldr	r1, [r1, #16]
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	1a5b      	subs	r3, r3, r1
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	6963      	ldr	r3, [r4, #20]
 8002b94:	9802      	ldr	r0, [sp, #8]
 8002b96:	435d      	muls	r5, r3
 8002b98:	0feb      	lsrs	r3, r5, #31
 8002b9a:	195d      	adds	r5, r3, r5
 8002b9c:	9b01      	ldr	r3, [sp, #4]
 8002b9e:	106d      	asrs	r5, r5, #1
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	181b      	adds	r3, r3, r0
 8002ba4:	42ab      	cmp	r3, r5
 8002ba6:	d900      	bls.n	8002baa <__ssputs_r+0x3e>
 8002ba8:	001d      	movs	r5, r3
 8002baa:	0553      	lsls	r3, r2, #21
 8002bac:	d532      	bpl.n	8002c14 <__ssputs_r+0xa8>
 8002bae:	0029      	movs	r1, r5
 8002bb0:	0038      	movs	r0, r7
 8002bb2:	f000 fb31 	bl	8003218 <_malloc_r>
 8002bb6:	1e06      	subs	r6, r0, #0
 8002bb8:	d109      	bne.n	8002bce <__ssputs_r+0x62>
 8002bba:	230c      	movs	r3, #12
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	2340      	movs	r3, #64	; 0x40
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	89a2      	ldrh	r2, [r4, #12]
 8002bc4:	4240      	negs	r0, r0
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	b005      	add	sp, #20
 8002bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bce:	9a02      	ldr	r2, [sp, #8]
 8002bd0:	6921      	ldr	r1, [r4, #16]
 8002bd2:	f000 faba 	bl	800314a <memcpy>
 8002bd6:	89a3      	ldrh	r3, [r4, #12]
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <__ssputs_r+0xc0>)
 8002bda:	401a      	ands	r2, r3
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	4313      	orrs	r3, r2
 8002be0:	81a3      	strh	r3, [r4, #12]
 8002be2:	9b02      	ldr	r3, [sp, #8]
 8002be4:	6126      	str	r6, [r4, #16]
 8002be6:	18f6      	adds	r6, r6, r3
 8002be8:	6026      	str	r6, [r4, #0]
 8002bea:	6165      	str	r5, [r4, #20]
 8002bec:	9e01      	ldr	r6, [sp, #4]
 8002bee:	1aed      	subs	r5, r5, r3
 8002bf0:	60a5      	str	r5, [r4, #8]
 8002bf2:	9b01      	ldr	r3, [sp, #4]
 8002bf4:	429e      	cmp	r6, r3
 8002bf6:	d900      	bls.n	8002bfa <__ssputs_r+0x8e>
 8002bf8:	9e01      	ldr	r6, [sp, #4]
 8002bfa:	0032      	movs	r2, r6
 8002bfc:	9903      	ldr	r1, [sp, #12]
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	f000 faac 	bl	800315c <memmove>
 8002c04:	68a3      	ldr	r3, [r4, #8]
 8002c06:	2000      	movs	r0, #0
 8002c08:	1b9b      	subs	r3, r3, r6
 8002c0a:	60a3      	str	r3, [r4, #8]
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	199e      	adds	r6, r3, r6
 8002c10:	6026      	str	r6, [r4, #0]
 8002c12:	e7da      	b.n	8002bca <__ssputs_r+0x5e>
 8002c14:	002a      	movs	r2, r5
 8002c16:	0038      	movs	r0, r7
 8002c18:	f000 fb5c 	bl	80032d4 <_realloc_r>
 8002c1c:	1e06      	subs	r6, r0, #0
 8002c1e:	d1e0      	bne.n	8002be2 <__ssputs_r+0x76>
 8002c20:	0038      	movs	r0, r7
 8002c22:	6921      	ldr	r1, [r4, #16]
 8002c24:	f000 faae 	bl	8003184 <_free_r>
 8002c28:	e7c7      	b.n	8002bba <__ssputs_r+0x4e>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	fffffb7f 	.word	0xfffffb7f

08002c30 <_svfiprintf_r>:
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	b0a1      	sub	sp, #132	; 0x84
 8002c34:	9003      	str	r0, [sp, #12]
 8002c36:	001d      	movs	r5, r3
 8002c38:	898b      	ldrh	r3, [r1, #12]
 8002c3a:	000f      	movs	r7, r1
 8002c3c:	0016      	movs	r6, r2
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	d511      	bpl.n	8002c66 <_svfiprintf_r+0x36>
 8002c42:	690b      	ldr	r3, [r1, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10e      	bne.n	8002c66 <_svfiprintf_r+0x36>
 8002c48:	2140      	movs	r1, #64	; 0x40
 8002c4a:	f000 fae5 	bl	8003218 <_malloc_r>
 8002c4e:	6038      	str	r0, [r7, #0]
 8002c50:	6138      	str	r0, [r7, #16]
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d105      	bne.n	8002c62 <_svfiprintf_r+0x32>
 8002c56:	230c      	movs	r3, #12
 8002c58:	9a03      	ldr	r2, [sp, #12]
 8002c5a:	3801      	subs	r0, #1
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	b021      	add	sp, #132	; 0x84
 8002c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c62:	2340      	movs	r3, #64	; 0x40
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	2300      	movs	r3, #0
 8002c68:	ac08      	add	r4, sp, #32
 8002c6a:	6163      	str	r3, [r4, #20]
 8002c6c:	3320      	adds	r3, #32
 8002c6e:	7663      	strb	r3, [r4, #25]
 8002c70:	3310      	adds	r3, #16
 8002c72:	76a3      	strb	r3, [r4, #26]
 8002c74:	9507      	str	r5, [sp, #28]
 8002c76:	0035      	movs	r5, r6
 8002c78:	782b      	ldrb	r3, [r5, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <_svfiprintf_r+0x52>
 8002c7e:	2b25      	cmp	r3, #37	; 0x25
 8002c80:	d147      	bne.n	8002d12 <_svfiprintf_r+0xe2>
 8002c82:	1bab      	subs	r3, r5, r6
 8002c84:	9305      	str	r3, [sp, #20]
 8002c86:	42b5      	cmp	r5, r6
 8002c88:	d00c      	beq.n	8002ca4 <_svfiprintf_r+0x74>
 8002c8a:	0032      	movs	r2, r6
 8002c8c:	0039      	movs	r1, r7
 8002c8e:	9803      	ldr	r0, [sp, #12]
 8002c90:	f7ff ff6c 	bl	8002b6c <__ssputs_r>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d100      	bne.n	8002c9a <_svfiprintf_r+0x6a>
 8002c98:	e0ae      	b.n	8002df8 <_svfiprintf_r+0x1c8>
 8002c9a:	6962      	ldr	r2, [r4, #20]
 8002c9c:	9b05      	ldr	r3, [sp, #20]
 8002c9e:	4694      	mov	ip, r2
 8002ca0:	4463      	add	r3, ip
 8002ca2:	6163      	str	r3, [r4, #20]
 8002ca4:	782b      	ldrb	r3, [r5, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d100      	bne.n	8002cac <_svfiprintf_r+0x7c>
 8002caa:	e0a5      	b.n	8002df8 <_svfiprintf_r+0x1c8>
 8002cac:	2201      	movs	r2, #1
 8002cae:	2300      	movs	r3, #0
 8002cb0:	4252      	negs	r2, r2
 8002cb2:	6062      	str	r2, [r4, #4]
 8002cb4:	a904      	add	r1, sp, #16
 8002cb6:	3254      	adds	r2, #84	; 0x54
 8002cb8:	1852      	adds	r2, r2, r1
 8002cba:	1c6e      	adds	r6, r5, #1
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	60e3      	str	r3, [r4, #12]
 8002cc0:	60a3      	str	r3, [r4, #8]
 8002cc2:	7013      	strb	r3, [r2, #0]
 8002cc4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cc6:	2205      	movs	r2, #5
 8002cc8:	7831      	ldrb	r1, [r6, #0]
 8002cca:	4854      	ldr	r0, [pc, #336]	; (8002e1c <_svfiprintf_r+0x1ec>)
 8002ccc:	f000 fa32 	bl	8003134 <memchr>
 8002cd0:	1c75      	adds	r5, r6, #1
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d11f      	bne.n	8002d16 <_svfiprintf_r+0xe6>
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	06d3      	lsls	r3, r2, #27
 8002cda:	d504      	bpl.n	8002ce6 <_svfiprintf_r+0xb6>
 8002cdc:	2353      	movs	r3, #83	; 0x53
 8002cde:	a904      	add	r1, sp, #16
 8002ce0:	185b      	adds	r3, r3, r1
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	7019      	strb	r1, [r3, #0]
 8002ce6:	0713      	lsls	r3, r2, #28
 8002ce8:	d504      	bpl.n	8002cf4 <_svfiprintf_r+0xc4>
 8002cea:	2353      	movs	r3, #83	; 0x53
 8002cec:	a904      	add	r1, sp, #16
 8002cee:	185b      	adds	r3, r3, r1
 8002cf0:	212b      	movs	r1, #43	; 0x2b
 8002cf2:	7019      	strb	r1, [r3, #0]
 8002cf4:	7833      	ldrb	r3, [r6, #0]
 8002cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf8:	d016      	beq.n	8002d28 <_svfiprintf_r+0xf8>
 8002cfa:	0035      	movs	r5, r6
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	200a      	movs	r0, #10
 8002d00:	68e3      	ldr	r3, [r4, #12]
 8002d02:	782a      	ldrb	r2, [r5, #0]
 8002d04:	1c6e      	adds	r6, r5, #1
 8002d06:	3a30      	subs	r2, #48	; 0x30
 8002d08:	2a09      	cmp	r2, #9
 8002d0a:	d94e      	bls.n	8002daa <_svfiprintf_r+0x17a>
 8002d0c:	2900      	cmp	r1, #0
 8002d0e:	d111      	bne.n	8002d34 <_svfiprintf_r+0x104>
 8002d10:	e017      	b.n	8002d42 <_svfiprintf_r+0x112>
 8002d12:	3501      	adds	r5, #1
 8002d14:	e7b0      	b.n	8002c78 <_svfiprintf_r+0x48>
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <_svfiprintf_r+0x1ec>)
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	1ac0      	subs	r0, r0, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	4083      	lsls	r3, r0
 8002d20:	4313      	orrs	r3, r2
 8002d22:	002e      	movs	r6, r5
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	e7ce      	b.n	8002cc6 <_svfiprintf_r+0x96>
 8002d28:	9b07      	ldr	r3, [sp, #28]
 8002d2a:	1d19      	adds	r1, r3, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	9107      	str	r1, [sp, #28]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db01      	blt.n	8002d38 <_svfiprintf_r+0x108>
 8002d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d36:	e004      	b.n	8002d42 <_svfiprintf_r+0x112>
 8002d38:	425b      	negs	r3, r3
 8002d3a:	60e3      	str	r3, [r4, #12]
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	782b      	ldrb	r3, [r5, #0]
 8002d44:	2b2e      	cmp	r3, #46	; 0x2e
 8002d46:	d10a      	bne.n	8002d5e <_svfiprintf_r+0x12e>
 8002d48:	786b      	ldrb	r3, [r5, #1]
 8002d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d4c:	d135      	bne.n	8002dba <_svfiprintf_r+0x18a>
 8002d4e:	9b07      	ldr	r3, [sp, #28]
 8002d50:	3502      	adds	r5, #2
 8002d52:	1d1a      	adds	r2, r3, #4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	9207      	str	r2, [sp, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db2b      	blt.n	8002db4 <_svfiprintf_r+0x184>
 8002d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d5e:	4e30      	ldr	r6, [pc, #192]	; (8002e20 <_svfiprintf_r+0x1f0>)
 8002d60:	2203      	movs	r2, #3
 8002d62:	0030      	movs	r0, r6
 8002d64:	7829      	ldrb	r1, [r5, #0]
 8002d66:	f000 f9e5 	bl	8003134 <memchr>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d006      	beq.n	8002d7c <_svfiprintf_r+0x14c>
 8002d6e:	2340      	movs	r3, #64	; 0x40
 8002d70:	1b80      	subs	r0, r0, r6
 8002d72:	4083      	lsls	r3, r0
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	3501      	adds	r5, #1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	6023      	str	r3, [r4, #0]
 8002d7c:	7829      	ldrb	r1, [r5, #0]
 8002d7e:	2206      	movs	r2, #6
 8002d80:	4828      	ldr	r0, [pc, #160]	; (8002e24 <_svfiprintf_r+0x1f4>)
 8002d82:	1c6e      	adds	r6, r5, #1
 8002d84:	7621      	strb	r1, [r4, #24]
 8002d86:	f000 f9d5 	bl	8003134 <memchr>
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d03c      	beq.n	8002e08 <_svfiprintf_r+0x1d8>
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <_svfiprintf_r+0x1f8>)
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d125      	bne.n	8002de0 <_svfiprintf_r+0x1b0>
 8002d94:	2207      	movs	r2, #7
 8002d96:	9b07      	ldr	r3, [sp, #28]
 8002d98:	3307      	adds	r3, #7
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	9307      	str	r3, [sp, #28]
 8002da0:	6963      	ldr	r3, [r4, #20]
 8002da2:	9a04      	ldr	r2, [sp, #16]
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	6163      	str	r3, [r4, #20]
 8002da8:	e765      	b.n	8002c76 <_svfiprintf_r+0x46>
 8002daa:	4343      	muls	r3, r0
 8002dac:	0035      	movs	r5, r6
 8002dae:	2101      	movs	r1, #1
 8002db0:	189b      	adds	r3, r3, r2
 8002db2:	e7a6      	b.n	8002d02 <_svfiprintf_r+0xd2>
 8002db4:	2301      	movs	r3, #1
 8002db6:	425b      	negs	r3, r3
 8002db8:	e7d0      	b.n	8002d5c <_svfiprintf_r+0x12c>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	200a      	movs	r0, #10
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	6063      	str	r3, [r4, #4]
 8002dc4:	7829      	ldrb	r1, [r5, #0]
 8002dc6:	1c6e      	adds	r6, r5, #1
 8002dc8:	3930      	subs	r1, #48	; 0x30
 8002dca:	2909      	cmp	r1, #9
 8002dcc:	d903      	bls.n	8002dd6 <_svfiprintf_r+0x1a6>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0c5      	beq.n	8002d5e <_svfiprintf_r+0x12e>
 8002dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8002dd4:	e7c3      	b.n	8002d5e <_svfiprintf_r+0x12e>
 8002dd6:	4342      	muls	r2, r0
 8002dd8:	0035      	movs	r5, r6
 8002dda:	2301      	movs	r3, #1
 8002ddc:	1852      	adds	r2, r2, r1
 8002dde:	e7f1      	b.n	8002dc4 <_svfiprintf_r+0x194>
 8002de0:	ab07      	add	r3, sp, #28
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	003a      	movs	r2, r7
 8002de6:	0021      	movs	r1, r4
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <_svfiprintf_r+0x1fc>)
 8002dea:	9803      	ldr	r0, [sp, #12]
 8002dec:	e000      	b.n	8002df0 <_svfiprintf_r+0x1c0>
 8002dee:	bf00      	nop
 8002df0:	9004      	str	r0, [sp, #16]
 8002df2:	9b04      	ldr	r3, [sp, #16]
 8002df4:	3301      	adds	r3, #1
 8002df6:	d1d3      	bne.n	8002da0 <_svfiprintf_r+0x170>
 8002df8:	89bb      	ldrh	r3, [r7, #12]
 8002dfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002dfc:	065b      	lsls	r3, r3, #25
 8002dfe:	d400      	bmi.n	8002e02 <_svfiprintf_r+0x1d2>
 8002e00:	e72d      	b.n	8002c5e <_svfiprintf_r+0x2e>
 8002e02:	2001      	movs	r0, #1
 8002e04:	4240      	negs	r0, r0
 8002e06:	e72a      	b.n	8002c5e <_svfiprintf_r+0x2e>
 8002e08:	ab07      	add	r3, sp, #28
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	003a      	movs	r2, r7
 8002e0e:	0021      	movs	r1, r4
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <_svfiprintf_r+0x1fc>)
 8002e12:	9803      	ldr	r0, [sp, #12]
 8002e14:	f000 f87c 	bl	8002f10 <_printf_i>
 8002e18:	e7ea      	b.n	8002df0 <_svfiprintf_r+0x1c0>
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	08004110 	.word	0x08004110
 8002e20:	08004116 	.word	0x08004116
 8002e24:	0800411a 	.word	0x0800411a
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	08002b6d 	.word	0x08002b6d

08002e30 <_printf_common>:
 8002e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e32:	0015      	movs	r5, r2
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	688a      	ldr	r2, [r1, #8]
 8002e38:	690b      	ldr	r3, [r1, #16]
 8002e3a:	000c      	movs	r4, r1
 8002e3c:	9000      	str	r0, [sp, #0]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	da00      	bge.n	8002e44 <_printf_common+0x14>
 8002e42:	0013      	movs	r3, r2
 8002e44:	0022      	movs	r2, r4
 8002e46:	602b      	str	r3, [r5, #0]
 8002e48:	3243      	adds	r2, #67	; 0x43
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	d001      	beq.n	8002e54 <_printf_common+0x24>
 8002e50:	3301      	adds	r3, #1
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	d502      	bpl.n	8002e60 <_printf_common+0x30>
 8002e5a:	682b      	ldr	r3, [r5, #0]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	2306      	movs	r3, #6
 8002e64:	0017      	movs	r7, r2
 8002e66:	401f      	ands	r7, r3
 8002e68:	421a      	tst	r2, r3
 8002e6a:	d027      	beq.n	8002ebc <_printf_common+0x8c>
 8002e6c:	0023      	movs	r3, r4
 8002e6e:	3343      	adds	r3, #67	; 0x43
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	4193      	sbcs	r3, r2
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	0692      	lsls	r2, r2, #26
 8002e7a:	d430      	bmi.n	8002ede <_printf_common+0xae>
 8002e7c:	0022      	movs	r2, r4
 8002e7e:	9901      	ldr	r1, [sp, #4]
 8002e80:	9800      	ldr	r0, [sp, #0]
 8002e82:	9e08      	ldr	r6, [sp, #32]
 8002e84:	3243      	adds	r2, #67	; 0x43
 8002e86:	47b0      	blx	r6
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d025      	beq.n	8002ed8 <_printf_common+0xa8>
 8002e8c:	2306      	movs	r3, #6
 8002e8e:	6820      	ldr	r0, [r4, #0]
 8002e90:	682a      	ldr	r2, [r5, #0]
 8002e92:	68e1      	ldr	r1, [r4, #12]
 8002e94:	2500      	movs	r5, #0
 8002e96:	4003      	ands	r3, r0
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d103      	bne.n	8002ea4 <_printf_common+0x74>
 8002e9c:	1a8d      	subs	r5, r1, r2
 8002e9e:	43eb      	mvns	r3, r5
 8002ea0:	17db      	asrs	r3, r3, #31
 8002ea2:	401d      	ands	r5, r3
 8002ea4:	68a3      	ldr	r3, [r4, #8]
 8002ea6:	6922      	ldr	r2, [r4, #16]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	dd01      	ble.n	8002eb0 <_printf_common+0x80>
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	18ed      	adds	r5, r5, r3
 8002eb0:	2700      	movs	r7, #0
 8002eb2:	42bd      	cmp	r5, r7
 8002eb4:	d120      	bne.n	8002ef8 <_printf_common+0xc8>
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	e010      	b.n	8002edc <_printf_common+0xac>
 8002eba:	3701      	adds	r7, #1
 8002ebc:	68e3      	ldr	r3, [r4, #12]
 8002ebe:	682a      	ldr	r2, [r5, #0]
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	42bb      	cmp	r3, r7
 8002ec4:	ddd2      	ble.n	8002e6c <_printf_common+0x3c>
 8002ec6:	0022      	movs	r2, r4
 8002ec8:	2301      	movs	r3, #1
 8002eca:	9901      	ldr	r1, [sp, #4]
 8002ecc:	9800      	ldr	r0, [sp, #0]
 8002ece:	9e08      	ldr	r6, [sp, #32]
 8002ed0:	3219      	adds	r2, #25
 8002ed2:	47b0      	blx	r6
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	d1f0      	bne.n	8002eba <_printf_common+0x8a>
 8002ed8:	2001      	movs	r0, #1
 8002eda:	4240      	negs	r0, r0
 8002edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ede:	2030      	movs	r0, #48	; 0x30
 8002ee0:	18e1      	adds	r1, r4, r3
 8002ee2:	3143      	adds	r1, #67	; 0x43
 8002ee4:	7008      	strb	r0, [r1, #0]
 8002ee6:	0021      	movs	r1, r4
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	3145      	adds	r1, #69	; 0x45
 8002eec:	7809      	ldrb	r1, [r1, #0]
 8002eee:	18a2      	adds	r2, r4, r2
 8002ef0:	3243      	adds	r2, #67	; 0x43
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	7011      	strb	r1, [r2, #0]
 8002ef6:	e7c1      	b.n	8002e7c <_printf_common+0x4c>
 8002ef8:	0022      	movs	r2, r4
 8002efa:	2301      	movs	r3, #1
 8002efc:	9901      	ldr	r1, [sp, #4]
 8002efe:	9800      	ldr	r0, [sp, #0]
 8002f00:	9e08      	ldr	r6, [sp, #32]
 8002f02:	321a      	adds	r2, #26
 8002f04:	47b0      	blx	r6
 8002f06:	1c43      	adds	r3, r0, #1
 8002f08:	d0e6      	beq.n	8002ed8 <_printf_common+0xa8>
 8002f0a:	3701      	adds	r7, #1
 8002f0c:	e7d1      	b.n	8002eb2 <_printf_common+0x82>
	...

08002f10 <_printf_i>:
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	b08b      	sub	sp, #44	; 0x2c
 8002f14:	9206      	str	r2, [sp, #24]
 8002f16:	000a      	movs	r2, r1
 8002f18:	3243      	adds	r2, #67	; 0x43
 8002f1a:	9307      	str	r3, [sp, #28]
 8002f1c:	9005      	str	r0, [sp, #20]
 8002f1e:	9204      	str	r2, [sp, #16]
 8002f20:	7e0a      	ldrb	r2, [r1, #24]
 8002f22:	000c      	movs	r4, r1
 8002f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f26:	2a78      	cmp	r2, #120	; 0x78
 8002f28:	d806      	bhi.n	8002f38 <_printf_i+0x28>
 8002f2a:	2a62      	cmp	r2, #98	; 0x62
 8002f2c:	d808      	bhi.n	8002f40 <_printf_i+0x30>
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	d100      	bne.n	8002f34 <_printf_i+0x24>
 8002f32:	e0c0      	b.n	80030b6 <_printf_i+0x1a6>
 8002f34:	2a58      	cmp	r2, #88	; 0x58
 8002f36:	d052      	beq.n	8002fde <_printf_i+0xce>
 8002f38:	0026      	movs	r6, r4
 8002f3a:	3642      	adds	r6, #66	; 0x42
 8002f3c:	7032      	strb	r2, [r6, #0]
 8002f3e:	e022      	b.n	8002f86 <_printf_i+0x76>
 8002f40:	0010      	movs	r0, r2
 8002f42:	3863      	subs	r0, #99	; 0x63
 8002f44:	2815      	cmp	r0, #21
 8002f46:	d8f7      	bhi.n	8002f38 <_printf_i+0x28>
 8002f48:	f7fd f8de 	bl	8000108 <__gnu_thumb1_case_shi>
 8002f4c:	001f0016 	.word	0x001f0016
 8002f50:	fff6fff6 	.word	0xfff6fff6
 8002f54:	fff6fff6 	.word	0xfff6fff6
 8002f58:	fff6001f 	.word	0xfff6001f
 8002f5c:	fff6fff6 	.word	0xfff6fff6
 8002f60:	00a8fff6 	.word	0x00a8fff6
 8002f64:	009a0036 	.word	0x009a0036
 8002f68:	fff6fff6 	.word	0xfff6fff6
 8002f6c:	fff600b9 	.word	0xfff600b9
 8002f70:	fff60036 	.word	0xfff60036
 8002f74:	009efff6 	.word	0x009efff6
 8002f78:	0026      	movs	r6, r4
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	3642      	adds	r6, #66	; 0x42
 8002f7e:	1d11      	adds	r1, r2, #4
 8002f80:	6019      	str	r1, [r3, #0]
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	7033      	strb	r3, [r6, #0]
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0a7      	b.n	80030da <_printf_i+0x1ca>
 8002f8a:	6808      	ldr	r0, [r1, #0]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	1d0a      	adds	r2, r1, #4
 8002f90:	0605      	lsls	r5, r0, #24
 8002f92:	d50b      	bpl.n	8002fac <_printf_i+0x9c>
 8002f94:	680d      	ldr	r5, [r1, #0]
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	2d00      	cmp	r5, #0
 8002f9a:	da03      	bge.n	8002fa4 <_printf_i+0x94>
 8002f9c:	232d      	movs	r3, #45	; 0x2d
 8002f9e:	9a04      	ldr	r2, [sp, #16]
 8002fa0:	426d      	negs	r5, r5
 8002fa2:	7013      	strb	r3, [r2, #0]
 8002fa4:	4b61      	ldr	r3, [pc, #388]	; (800312c <_printf_i+0x21c>)
 8002fa6:	270a      	movs	r7, #10
 8002fa8:	9303      	str	r3, [sp, #12]
 8002faa:	e032      	b.n	8003012 <_printf_i+0x102>
 8002fac:	680d      	ldr	r5, [r1, #0]
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	0641      	lsls	r1, r0, #25
 8002fb2:	d5f1      	bpl.n	8002f98 <_printf_i+0x88>
 8002fb4:	b22d      	sxth	r5, r5
 8002fb6:	e7ef      	b.n	8002f98 <_printf_i+0x88>
 8002fb8:	680d      	ldr	r5, [r1, #0]
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	1d08      	adds	r0, r1, #4
 8002fbe:	6018      	str	r0, [r3, #0]
 8002fc0:	062e      	lsls	r6, r5, #24
 8002fc2:	d501      	bpl.n	8002fc8 <_printf_i+0xb8>
 8002fc4:	680d      	ldr	r5, [r1, #0]
 8002fc6:	e003      	b.n	8002fd0 <_printf_i+0xc0>
 8002fc8:	066d      	lsls	r5, r5, #25
 8002fca:	d5fb      	bpl.n	8002fc4 <_printf_i+0xb4>
 8002fcc:	680d      	ldr	r5, [r1, #0]
 8002fce:	b2ad      	uxth	r5, r5
 8002fd0:	4b56      	ldr	r3, [pc, #344]	; (800312c <_printf_i+0x21c>)
 8002fd2:	270a      	movs	r7, #10
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	2a6f      	cmp	r2, #111	; 0x6f
 8002fd8:	d117      	bne.n	800300a <_printf_i+0xfa>
 8002fda:	2708      	movs	r7, #8
 8002fdc:	e015      	b.n	800300a <_printf_i+0xfa>
 8002fde:	3145      	adds	r1, #69	; 0x45
 8002fe0:	700a      	strb	r2, [r1, #0]
 8002fe2:	4a52      	ldr	r2, [pc, #328]	; (800312c <_printf_i+0x21c>)
 8002fe4:	9203      	str	r2, [sp, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	6821      	ldr	r1, [r4, #0]
 8002fea:	ca20      	ldmia	r2!, {r5}
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	0608      	lsls	r0, r1, #24
 8002ff0:	d550      	bpl.n	8003094 <_printf_i+0x184>
 8002ff2:	07cb      	lsls	r3, r1, #31
 8002ff4:	d502      	bpl.n	8002ffc <_printf_i+0xec>
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	4319      	orrs	r1, r3
 8002ffa:	6021      	str	r1, [r4, #0]
 8002ffc:	2710      	movs	r7, #16
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	d103      	bne.n	800300a <_printf_i+0xfa>
 8003002:	2320      	movs	r3, #32
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	439a      	bics	r2, r3
 8003008:	6022      	str	r2, [r4, #0]
 800300a:	0023      	movs	r3, r4
 800300c:	2200      	movs	r2, #0
 800300e:	3343      	adds	r3, #67	; 0x43
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	6863      	ldr	r3, [r4, #4]
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	db03      	blt.n	8003022 <_printf_i+0x112>
 800301a:	2204      	movs	r2, #4
 800301c:	6821      	ldr	r1, [r4, #0]
 800301e:	4391      	bics	r1, r2
 8003020:	6021      	str	r1, [r4, #0]
 8003022:	2d00      	cmp	r5, #0
 8003024:	d102      	bne.n	800302c <_printf_i+0x11c>
 8003026:	9e04      	ldr	r6, [sp, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <_printf_i+0x136>
 800302c:	9e04      	ldr	r6, [sp, #16]
 800302e:	0028      	movs	r0, r5
 8003030:	0039      	movs	r1, r7
 8003032:	f7fd f8f9 	bl	8000228 <__aeabi_uidivmod>
 8003036:	9b03      	ldr	r3, [sp, #12]
 8003038:	3e01      	subs	r6, #1
 800303a:	5c5b      	ldrb	r3, [r3, r1]
 800303c:	7033      	strb	r3, [r6, #0]
 800303e:	002b      	movs	r3, r5
 8003040:	0005      	movs	r5, r0
 8003042:	429f      	cmp	r7, r3
 8003044:	d9f3      	bls.n	800302e <_printf_i+0x11e>
 8003046:	2f08      	cmp	r7, #8
 8003048:	d109      	bne.n	800305e <_printf_i+0x14e>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	07db      	lsls	r3, r3, #31
 800304e:	d506      	bpl.n	800305e <_printf_i+0x14e>
 8003050:	6863      	ldr	r3, [r4, #4]
 8003052:	6922      	ldr	r2, [r4, #16]
 8003054:	4293      	cmp	r3, r2
 8003056:	dc02      	bgt.n	800305e <_printf_i+0x14e>
 8003058:	2330      	movs	r3, #48	; 0x30
 800305a:	3e01      	subs	r6, #1
 800305c:	7033      	strb	r3, [r6, #0]
 800305e:	9b04      	ldr	r3, [sp, #16]
 8003060:	1b9b      	subs	r3, r3, r6
 8003062:	6123      	str	r3, [r4, #16]
 8003064:	9b07      	ldr	r3, [sp, #28]
 8003066:	0021      	movs	r1, r4
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	9805      	ldr	r0, [sp, #20]
 800306c:	9b06      	ldr	r3, [sp, #24]
 800306e:	aa09      	add	r2, sp, #36	; 0x24
 8003070:	f7ff fede 	bl	8002e30 <_printf_common>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d135      	bne.n	80030e4 <_printf_i+0x1d4>
 8003078:	2001      	movs	r0, #1
 800307a:	4240      	negs	r0, r0
 800307c:	b00b      	add	sp, #44	; 0x2c
 800307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003080:	2220      	movs	r2, #32
 8003082:	6809      	ldr	r1, [r1, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	6022      	str	r2, [r4, #0]
 8003088:	0022      	movs	r2, r4
 800308a:	2178      	movs	r1, #120	; 0x78
 800308c:	3245      	adds	r2, #69	; 0x45
 800308e:	7011      	strb	r1, [r2, #0]
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <_printf_i+0x220>)
 8003092:	e7a7      	b.n	8002fe4 <_printf_i+0xd4>
 8003094:	0648      	lsls	r0, r1, #25
 8003096:	d5ac      	bpl.n	8002ff2 <_printf_i+0xe2>
 8003098:	b2ad      	uxth	r5, r5
 800309a:	e7aa      	b.n	8002ff2 <_printf_i+0xe2>
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	680d      	ldr	r5, [r1, #0]
 80030a0:	1d10      	adds	r0, r2, #4
 80030a2:	6949      	ldr	r1, [r1, #20]
 80030a4:	6018      	str	r0, [r3, #0]
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	062e      	lsls	r6, r5, #24
 80030aa:	d501      	bpl.n	80030b0 <_printf_i+0x1a0>
 80030ac:	6019      	str	r1, [r3, #0]
 80030ae:	e002      	b.n	80030b6 <_printf_i+0x1a6>
 80030b0:	066d      	lsls	r5, r5, #25
 80030b2:	d5fb      	bpl.n	80030ac <_printf_i+0x19c>
 80030b4:	8019      	strh	r1, [r3, #0]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9e04      	ldr	r6, [sp, #16]
 80030ba:	6123      	str	r3, [r4, #16]
 80030bc:	e7d2      	b.n	8003064 <_printf_i+0x154>
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	1d11      	adds	r1, r2, #4
 80030c2:	6019      	str	r1, [r3, #0]
 80030c4:	6816      	ldr	r6, [r2, #0]
 80030c6:	2100      	movs	r1, #0
 80030c8:	0030      	movs	r0, r6
 80030ca:	6862      	ldr	r2, [r4, #4]
 80030cc:	f000 f832 	bl	8003134 <memchr>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d001      	beq.n	80030d8 <_printf_i+0x1c8>
 80030d4:	1b80      	subs	r0, r0, r6
 80030d6:	6060      	str	r0, [r4, #4]
 80030d8:	6863      	ldr	r3, [r4, #4]
 80030da:	6123      	str	r3, [r4, #16]
 80030dc:	2300      	movs	r3, #0
 80030de:	9a04      	ldr	r2, [sp, #16]
 80030e0:	7013      	strb	r3, [r2, #0]
 80030e2:	e7bf      	b.n	8003064 <_printf_i+0x154>
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	0032      	movs	r2, r6
 80030e8:	9906      	ldr	r1, [sp, #24]
 80030ea:	9805      	ldr	r0, [sp, #20]
 80030ec:	9d07      	ldr	r5, [sp, #28]
 80030ee:	47a8      	blx	r5
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	d0c1      	beq.n	8003078 <_printf_i+0x168>
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	079b      	lsls	r3, r3, #30
 80030f8:	d415      	bmi.n	8003126 <_printf_i+0x216>
 80030fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030fc:	68e0      	ldr	r0, [r4, #12]
 80030fe:	4298      	cmp	r0, r3
 8003100:	dabc      	bge.n	800307c <_printf_i+0x16c>
 8003102:	0018      	movs	r0, r3
 8003104:	e7ba      	b.n	800307c <_printf_i+0x16c>
 8003106:	0022      	movs	r2, r4
 8003108:	2301      	movs	r3, #1
 800310a:	9906      	ldr	r1, [sp, #24]
 800310c:	9805      	ldr	r0, [sp, #20]
 800310e:	9e07      	ldr	r6, [sp, #28]
 8003110:	3219      	adds	r2, #25
 8003112:	47b0      	blx	r6
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	d0af      	beq.n	8003078 <_printf_i+0x168>
 8003118:	3501      	adds	r5, #1
 800311a:	68e3      	ldr	r3, [r4, #12]
 800311c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	42ab      	cmp	r3, r5
 8003122:	dcf0      	bgt.n	8003106 <_printf_i+0x1f6>
 8003124:	e7e9      	b.n	80030fa <_printf_i+0x1ea>
 8003126:	2500      	movs	r5, #0
 8003128:	e7f7      	b.n	800311a <_printf_i+0x20a>
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	08004121 	.word	0x08004121
 8003130:	08004132 	.word	0x08004132

08003134 <memchr>:
 8003134:	b2c9      	uxtb	r1, r1
 8003136:	1882      	adds	r2, r0, r2
 8003138:	4290      	cmp	r0, r2
 800313a:	d101      	bne.n	8003140 <memchr+0xc>
 800313c:	2000      	movs	r0, #0
 800313e:	4770      	bx	lr
 8003140:	7803      	ldrb	r3, [r0, #0]
 8003142:	428b      	cmp	r3, r1
 8003144:	d0fb      	beq.n	800313e <memchr+0xa>
 8003146:	3001      	adds	r0, #1
 8003148:	e7f6      	b.n	8003138 <memchr+0x4>

0800314a <memcpy>:
 800314a:	2300      	movs	r3, #0
 800314c:	b510      	push	{r4, lr}
 800314e:	429a      	cmp	r2, r3
 8003150:	d100      	bne.n	8003154 <memcpy+0xa>
 8003152:	bd10      	pop	{r4, pc}
 8003154:	5ccc      	ldrb	r4, [r1, r3]
 8003156:	54c4      	strb	r4, [r0, r3]
 8003158:	3301      	adds	r3, #1
 800315a:	e7f8      	b.n	800314e <memcpy+0x4>

0800315c <memmove>:
 800315c:	b510      	push	{r4, lr}
 800315e:	4288      	cmp	r0, r1
 8003160:	d902      	bls.n	8003168 <memmove+0xc>
 8003162:	188b      	adds	r3, r1, r2
 8003164:	4298      	cmp	r0, r3
 8003166:	d303      	bcc.n	8003170 <memmove+0x14>
 8003168:	2300      	movs	r3, #0
 800316a:	e007      	b.n	800317c <memmove+0x20>
 800316c:	5c8b      	ldrb	r3, [r1, r2]
 800316e:	5483      	strb	r3, [r0, r2]
 8003170:	3a01      	subs	r2, #1
 8003172:	d2fb      	bcs.n	800316c <memmove+0x10>
 8003174:	bd10      	pop	{r4, pc}
 8003176:	5ccc      	ldrb	r4, [r1, r3]
 8003178:	54c4      	strb	r4, [r0, r3]
 800317a:	3301      	adds	r3, #1
 800317c:	429a      	cmp	r2, r3
 800317e:	d1fa      	bne.n	8003176 <memmove+0x1a>
 8003180:	e7f8      	b.n	8003174 <memmove+0x18>
	...

08003184 <_free_r>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	0005      	movs	r5, r0
 8003188:	2900      	cmp	r1, #0
 800318a:	d010      	beq.n	80031ae <_free_r+0x2a>
 800318c:	1f0c      	subs	r4, r1, #4
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da00      	bge.n	8003196 <_free_r+0x12>
 8003194:	18e4      	adds	r4, r4, r3
 8003196:	0028      	movs	r0, r5
 8003198:	f000 f8d4 	bl	8003344 <__malloc_lock>
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <_free_r+0x90>)
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <_free_r+0x2c>
 80031a4:	6063      	str	r3, [r4, #4]
 80031a6:	6014      	str	r4, [r2, #0]
 80031a8:	0028      	movs	r0, r5
 80031aa:	f000 f8d3 	bl	8003354 <__malloc_unlock>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	42a3      	cmp	r3, r4
 80031b2:	d908      	bls.n	80031c6 <_free_r+0x42>
 80031b4:	6821      	ldr	r1, [r4, #0]
 80031b6:	1860      	adds	r0, r4, r1
 80031b8:	4283      	cmp	r3, r0
 80031ba:	d1f3      	bne.n	80031a4 <_free_r+0x20>
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	1841      	adds	r1, r0, r1
 80031c2:	6021      	str	r1, [r4, #0]
 80031c4:	e7ee      	b.n	80031a4 <_free_r+0x20>
 80031c6:	001a      	movs	r2, r3
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <_free_r+0x4e>
 80031ce:	42a3      	cmp	r3, r4
 80031d0:	d9f9      	bls.n	80031c6 <_free_r+0x42>
 80031d2:	6811      	ldr	r1, [r2, #0]
 80031d4:	1850      	adds	r0, r2, r1
 80031d6:	42a0      	cmp	r0, r4
 80031d8:	d10b      	bne.n	80031f2 <_free_r+0x6e>
 80031da:	6820      	ldr	r0, [r4, #0]
 80031dc:	1809      	adds	r1, r1, r0
 80031de:	1850      	adds	r0, r2, r1
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	4283      	cmp	r3, r0
 80031e4:	d1e0      	bne.n	80031a8 <_free_r+0x24>
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	1841      	adds	r1, r0, r1
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	6053      	str	r3, [r2, #4]
 80031f0:	e7da      	b.n	80031a8 <_free_r+0x24>
 80031f2:	42a0      	cmp	r0, r4
 80031f4:	d902      	bls.n	80031fc <_free_r+0x78>
 80031f6:	230c      	movs	r3, #12
 80031f8:	602b      	str	r3, [r5, #0]
 80031fa:	e7d5      	b.n	80031a8 <_free_r+0x24>
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	1860      	adds	r0, r4, r1
 8003200:	4283      	cmp	r3, r0
 8003202:	d103      	bne.n	800320c <_free_r+0x88>
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	1841      	adds	r1, r0, r1
 800320a:	6021      	str	r1, [r4, #0]
 800320c:	6063      	str	r3, [r4, #4]
 800320e:	6054      	str	r4, [r2, #4]
 8003210:	e7ca      	b.n	80031a8 <_free_r+0x24>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	200000b0 	.word	0x200000b0

08003218 <_malloc_r>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	2303      	movs	r3, #3
 800321c:	1ccd      	adds	r5, r1, #3
 800321e:	439d      	bics	r5, r3
 8003220:	3508      	adds	r5, #8
 8003222:	0006      	movs	r6, r0
 8003224:	2d0c      	cmp	r5, #12
 8003226:	d21f      	bcs.n	8003268 <_malloc_r+0x50>
 8003228:	250c      	movs	r5, #12
 800322a:	42a9      	cmp	r1, r5
 800322c:	d81e      	bhi.n	800326c <_malloc_r+0x54>
 800322e:	0030      	movs	r0, r6
 8003230:	f000 f888 	bl	8003344 <__malloc_lock>
 8003234:	4925      	ldr	r1, [pc, #148]	; (80032cc <_malloc_r+0xb4>)
 8003236:	680a      	ldr	r2, [r1, #0]
 8003238:	0014      	movs	r4, r2
 800323a:	2c00      	cmp	r4, #0
 800323c:	d11a      	bne.n	8003274 <_malloc_r+0x5c>
 800323e:	4f24      	ldr	r7, [pc, #144]	; (80032d0 <_malloc_r+0xb8>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <_malloc_r+0x38>
 8003246:	0021      	movs	r1, r4
 8003248:	0030      	movs	r0, r6
 800324a:	f000 f869 	bl	8003320 <_sbrk_r>
 800324e:	6038      	str	r0, [r7, #0]
 8003250:	0029      	movs	r1, r5
 8003252:	0030      	movs	r0, r6
 8003254:	f000 f864 	bl	8003320 <_sbrk_r>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d12b      	bne.n	80032b4 <_malloc_r+0x9c>
 800325c:	230c      	movs	r3, #12
 800325e:	0030      	movs	r0, r6
 8003260:	6033      	str	r3, [r6, #0]
 8003262:	f000 f877 	bl	8003354 <__malloc_unlock>
 8003266:	e003      	b.n	8003270 <_malloc_r+0x58>
 8003268:	2d00      	cmp	r5, #0
 800326a:	dade      	bge.n	800322a <_malloc_r+0x12>
 800326c:	230c      	movs	r3, #12
 800326e:	6033      	str	r3, [r6, #0]
 8003270:	2000      	movs	r0, #0
 8003272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	1b5b      	subs	r3, r3, r5
 8003278:	d419      	bmi.n	80032ae <_malloc_r+0x96>
 800327a:	2b0b      	cmp	r3, #11
 800327c:	d903      	bls.n	8003286 <_malloc_r+0x6e>
 800327e:	6023      	str	r3, [r4, #0]
 8003280:	18e4      	adds	r4, r4, r3
 8003282:	6025      	str	r5, [r4, #0]
 8003284:	e003      	b.n	800328e <_malloc_r+0x76>
 8003286:	6863      	ldr	r3, [r4, #4]
 8003288:	42a2      	cmp	r2, r4
 800328a:	d10e      	bne.n	80032aa <_malloc_r+0x92>
 800328c:	600b      	str	r3, [r1, #0]
 800328e:	0030      	movs	r0, r6
 8003290:	f000 f860 	bl	8003354 <__malloc_unlock>
 8003294:	0020      	movs	r0, r4
 8003296:	2207      	movs	r2, #7
 8003298:	300b      	adds	r0, #11
 800329a:	1d23      	adds	r3, r4, #4
 800329c:	4390      	bics	r0, r2
 800329e:	1ac2      	subs	r2, r0, r3
 80032a0:	4298      	cmp	r0, r3
 80032a2:	d0e6      	beq.n	8003272 <_malloc_r+0x5a>
 80032a4:	1a1b      	subs	r3, r3, r0
 80032a6:	50a3      	str	r3, [r4, r2]
 80032a8:	e7e3      	b.n	8003272 <_malloc_r+0x5a>
 80032aa:	6053      	str	r3, [r2, #4]
 80032ac:	e7ef      	b.n	800328e <_malloc_r+0x76>
 80032ae:	0022      	movs	r2, r4
 80032b0:	6864      	ldr	r4, [r4, #4]
 80032b2:	e7c2      	b.n	800323a <_malloc_r+0x22>
 80032b4:	2303      	movs	r3, #3
 80032b6:	1cc4      	adds	r4, r0, #3
 80032b8:	439c      	bics	r4, r3
 80032ba:	42a0      	cmp	r0, r4
 80032bc:	d0e1      	beq.n	8003282 <_malloc_r+0x6a>
 80032be:	1a21      	subs	r1, r4, r0
 80032c0:	0030      	movs	r0, r6
 80032c2:	f000 f82d 	bl	8003320 <_sbrk_r>
 80032c6:	1c43      	adds	r3, r0, #1
 80032c8:	d1db      	bne.n	8003282 <_malloc_r+0x6a>
 80032ca:	e7c7      	b.n	800325c <_malloc_r+0x44>
 80032cc:	200000b0 	.word	0x200000b0
 80032d0:	200000b4 	.word	0x200000b4

080032d4 <_realloc_r>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	0007      	movs	r7, r0
 80032d8:	000d      	movs	r5, r1
 80032da:	0016      	movs	r6, r2
 80032dc:	2900      	cmp	r1, #0
 80032de:	d105      	bne.n	80032ec <_realloc_r+0x18>
 80032e0:	0011      	movs	r1, r2
 80032e2:	f7ff ff99 	bl	8003218 <_malloc_r>
 80032e6:	0004      	movs	r4, r0
 80032e8:	0020      	movs	r0, r4
 80032ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ec:	2a00      	cmp	r2, #0
 80032ee:	d103      	bne.n	80032f8 <_realloc_r+0x24>
 80032f0:	f7ff ff48 	bl	8003184 <_free_r>
 80032f4:	0034      	movs	r4, r6
 80032f6:	e7f7      	b.n	80032e8 <_realloc_r+0x14>
 80032f8:	f000 f834 	bl	8003364 <_malloc_usable_size_r>
 80032fc:	002c      	movs	r4, r5
 80032fe:	42b0      	cmp	r0, r6
 8003300:	d2f2      	bcs.n	80032e8 <_realloc_r+0x14>
 8003302:	0031      	movs	r1, r6
 8003304:	0038      	movs	r0, r7
 8003306:	f7ff ff87 	bl	8003218 <_malloc_r>
 800330a:	1e04      	subs	r4, r0, #0
 800330c:	d0ec      	beq.n	80032e8 <_realloc_r+0x14>
 800330e:	0029      	movs	r1, r5
 8003310:	0032      	movs	r2, r6
 8003312:	f7ff ff1a 	bl	800314a <memcpy>
 8003316:	0029      	movs	r1, r5
 8003318:	0038      	movs	r0, r7
 800331a:	f7ff ff33 	bl	8003184 <_free_r>
 800331e:	e7e3      	b.n	80032e8 <_realloc_r+0x14>

08003320 <_sbrk_r>:
 8003320:	2300      	movs	r3, #0
 8003322:	b570      	push	{r4, r5, r6, lr}
 8003324:	4d06      	ldr	r5, [pc, #24]	; (8003340 <_sbrk_r+0x20>)
 8003326:	0004      	movs	r4, r0
 8003328:	0008      	movs	r0, r1
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	f7fe fdac 	bl	8001e88 <_sbrk>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d103      	bne.n	800333c <_sbrk_r+0x1c>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d000      	beq.n	800333c <_sbrk_r+0x1c>
 800333a:	6023      	str	r3, [r4, #0]
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	20000568 	.word	0x20000568

08003344 <__malloc_lock>:
 8003344:	b510      	push	{r4, lr}
 8003346:	4802      	ldr	r0, [pc, #8]	; (8003350 <__malloc_lock+0xc>)
 8003348:	f000 f814 	bl	8003374 <__retarget_lock_acquire_recursive>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	20000570 	.word	0x20000570

08003354 <__malloc_unlock>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4802      	ldr	r0, [pc, #8]	; (8003360 <__malloc_unlock+0xc>)
 8003358:	f000 f80d 	bl	8003376 <__retarget_lock_release_recursive>
 800335c:	bd10      	pop	{r4, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20000570 	.word	0x20000570

08003364 <_malloc_usable_size_r>:
 8003364:	1f0b      	subs	r3, r1, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	1f18      	subs	r0, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	da01      	bge.n	8003372 <_malloc_usable_size_r+0xe>
 800336e:	580b      	ldr	r3, [r1, r0]
 8003370:	18c0      	adds	r0, r0, r3
 8003372:	4770      	bx	lr

08003374 <__retarget_lock_acquire_recursive>:
 8003374:	4770      	bx	lr

08003376 <__retarget_lock_release_recursive>:
 8003376:	4770      	bx	lr

08003378 <_init>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr

08003384 <_fini>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr
