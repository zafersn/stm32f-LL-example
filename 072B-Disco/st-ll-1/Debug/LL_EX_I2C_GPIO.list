
LL_EX_I2C_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003694  08003694  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003694  08003694  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800369c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000070  0800370c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800370c  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005136  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ce  00000000  00000000  000251ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  000263a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00026a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013de1  00000000  00000000  00027040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004da6  00000000  00000000  0003ae21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a59f  00000000  00000000  0003fbc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aa166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa0  00000000  00000000  000aa1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028e0 	.word	0x080028e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080028e0 	.word	0x080028e0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_d2iz>:
 8000234:	000a      	movs	r2, r1
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	4c13      	ldr	r4, [pc, #76]	; (8000288 <__aeabi_d2iz+0x54>)
 800023a:	0053      	lsls	r3, r2, #1
 800023c:	0309      	lsls	r1, r1, #12
 800023e:	0005      	movs	r5, r0
 8000240:	0b09      	lsrs	r1, r1, #12
 8000242:	2000      	movs	r0, #0
 8000244:	0d5b      	lsrs	r3, r3, #21
 8000246:	0fd2      	lsrs	r2, r2, #31
 8000248:	42a3      	cmp	r3, r4
 800024a:	dd04      	ble.n	8000256 <__aeabi_d2iz+0x22>
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <__aeabi_d2iz+0x58>)
 800024e:	4283      	cmp	r3, r0
 8000250:	dd02      	ble.n	8000258 <__aeabi_d2iz+0x24>
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <__aeabi_d2iz+0x5c>)
 8000254:	18d0      	adds	r0, r2, r3
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	2080      	movs	r0, #128	; 0x80
 800025a:	0340      	lsls	r0, r0, #13
 800025c:	4301      	orrs	r1, r0
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <__aeabi_d2iz+0x60>)
 8000260:	1ac0      	subs	r0, r0, r3
 8000262:	281f      	cmp	r0, #31
 8000264:	dd08      	ble.n	8000278 <__aeabi_d2iz+0x44>
 8000266:	480c      	ldr	r0, [pc, #48]	; (8000298 <__aeabi_d2iz+0x64>)
 8000268:	1ac3      	subs	r3, r0, r3
 800026a:	40d9      	lsrs	r1, r3
 800026c:	000b      	movs	r3, r1
 800026e:	4258      	negs	r0, r3
 8000270:	2a00      	cmp	r2, #0
 8000272:	d1f0      	bne.n	8000256 <__aeabi_d2iz+0x22>
 8000274:	0018      	movs	r0, r3
 8000276:	e7ee      	b.n	8000256 <__aeabi_d2iz+0x22>
 8000278:	4c08      	ldr	r4, [pc, #32]	; (800029c <__aeabi_d2iz+0x68>)
 800027a:	40c5      	lsrs	r5, r0
 800027c:	46a4      	mov	ip, r4
 800027e:	4463      	add	r3, ip
 8000280:	4099      	lsls	r1, r3
 8000282:	000b      	movs	r3, r1
 8000284:	432b      	orrs	r3, r5
 8000286:	e7f2      	b.n	800026e <__aeabi_d2iz+0x3a>
 8000288:	000003fe 	.word	0x000003fe
 800028c:	0000041d 	.word	0x0000041d
 8000290:	7fffffff 	.word	0x7fffffff
 8000294:	00000433 	.word	0x00000433
 8000298:	00000413 	.word	0x00000413
 800029c:	fffffbed 	.word	0xfffffbed

080002a0 <__aeabi_ui2d>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	1e04      	subs	r4, r0, #0
 80002a4:	d010      	beq.n	80002c8 <__aeabi_ui2d+0x28>
 80002a6:	f000 f821 	bl	80002ec <__clzsi2>
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <__aeabi_ui2d+0x48>)
 80002ac:	1a1b      	subs	r3, r3, r0
 80002ae:	280a      	cmp	r0, #10
 80002b0:	dc11      	bgt.n	80002d6 <__aeabi_ui2d+0x36>
 80002b2:	220b      	movs	r2, #11
 80002b4:	0021      	movs	r1, r4
 80002b6:	1a12      	subs	r2, r2, r0
 80002b8:	40d1      	lsrs	r1, r2
 80002ba:	3015      	adds	r0, #21
 80002bc:	030a      	lsls	r2, r1, #12
 80002be:	055b      	lsls	r3, r3, #21
 80002c0:	4084      	lsls	r4, r0
 80002c2:	0b12      	lsrs	r2, r2, #12
 80002c4:	0d5b      	lsrs	r3, r3, #21
 80002c6:	e001      	b.n	80002cc <__aeabi_ui2d+0x2c>
 80002c8:	2300      	movs	r3, #0
 80002ca:	2200      	movs	r2, #0
 80002cc:	051b      	lsls	r3, r3, #20
 80002ce:	4313      	orrs	r3, r2
 80002d0:	0020      	movs	r0, r4
 80002d2:	0019      	movs	r1, r3
 80002d4:	bd10      	pop	{r4, pc}
 80002d6:	0022      	movs	r2, r4
 80002d8:	380b      	subs	r0, #11
 80002da:	4082      	lsls	r2, r0
 80002dc:	055b      	lsls	r3, r3, #21
 80002de:	0312      	lsls	r2, r2, #12
 80002e0:	2400      	movs	r4, #0
 80002e2:	0b12      	lsrs	r2, r2, #12
 80002e4:	0d5b      	lsrs	r3, r3, #21
 80002e6:	e7f1      	b.n	80002cc <__aeabi_ui2d+0x2c>
 80002e8:	0000041e 	.word	0x0000041e

080002ec <__clzsi2>:
 80002ec:	211c      	movs	r1, #28
 80002ee:	2301      	movs	r3, #1
 80002f0:	041b      	lsls	r3, r3, #16
 80002f2:	4298      	cmp	r0, r3
 80002f4:	d301      	bcc.n	80002fa <__clzsi2+0xe>
 80002f6:	0c00      	lsrs	r0, r0, #16
 80002f8:	3910      	subs	r1, #16
 80002fa:	0a1b      	lsrs	r3, r3, #8
 80002fc:	4298      	cmp	r0, r3
 80002fe:	d301      	bcc.n	8000304 <__clzsi2+0x18>
 8000300:	0a00      	lsrs	r0, r0, #8
 8000302:	3908      	subs	r1, #8
 8000304:	091b      	lsrs	r3, r3, #4
 8000306:	4298      	cmp	r0, r3
 8000308:	d301      	bcc.n	800030e <__clzsi2+0x22>
 800030a:	0900      	lsrs	r0, r0, #4
 800030c:	3904      	subs	r1, #4
 800030e:	a202      	add	r2, pc, #8	; (adr r2, 8000318 <__clzsi2+0x2c>)
 8000310:	5c10      	ldrb	r0, [r2, r0]
 8000312:	1840      	adds	r0, r0, r1
 8000314:	4770      	bx	lr
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	02020304 	.word	0x02020304
 800031c:	01010101 	.word	0x01010101
	...

08000328 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2201      	movs	r2, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}

08000344 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	2201      	movs	r2, #1
 8000352:	4013      	ands	r3, r2
 8000354:	2b01      	cmp	r3, #1
 8000356:	d101      	bne.n	800035c <LL_I2C_IsActiveFlag_TXE+0x18>
 8000358:	2301      	movs	r3, #1
 800035a:	e000      	b.n	800035e <LL_I2C_IsActiveFlag_TXE+0x1a>
 800035c:	2300      	movs	r3, #0
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}

08000366 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	2240      	movs	r2, #64	; 0x40
 8000374:	4013      	ands	r3, r2
 8000376:	2b40      	cmp	r3, #64	; 0x40
 8000378:	d101      	bne.n	800037e <LL_I2C_IsActiveFlag_TC+0x18>
 800037a:	2301      	movs	r3, #1
 800037c:	e000      	b.n	8000380 <LL_I2C_IsActiveFlag_TC+0x1a>
 800037e:	2300      	movs	r3, #0
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}

08000388 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	699a      	ldr	r2, [r3, #24]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	401a      	ands	r2, r3
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <LL_I2C_IsActiveFlag_BUSY+0x1e>
 80003a2:	2301      	movs	r3, #1
 80003a4:	e000      	b.n	80003a8 <LL_I2C_IsActiveFlag_BUSY+0x20>
 80003a6:	2300      	movs	r3, #0
}
 80003a8:	0018      	movs	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LL_I2C_SetTransferSize>:
  * @param  I2Cx I2C Instance.
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <LL_I2C_SetTransferSize+0x24>)
 80003c0:	401a      	ands	r2, r3
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	041b      	lsls	r3, r3, #16
 80003c6:	431a      	orrs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	605a      	str	r2, [r3, #4]
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b002      	add	sp, #8
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	ff00ffff 	.word	0xff00ffff

080003d8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <LL_I2C_AcknowledgeNextData+0x24>)
 80003e8:	401a      	ands	r2, r3
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	605a      	str	r2, [r3, #4]
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	ffff7fff 	.word	0xffff7fff

08000400 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	01d2      	lsls	r2, r2, #7
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <LL_I2C_SetTransferRequest>:
  *         @arg @ref LL_I2C_REQUEST_WRITE
  *         @arg @ref LL_I2C_REQUEST_READ
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <LL_I2C_SetTransferRequest+0x24>)
 8000430:	401a      	ands	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	431a      	orrs	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	605a      	str	r2, [r3, #4]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	fffffbff 	.word	0xfffffbff

08000448 <LL_I2C_SetSlaveAddr>:
  * @param  I2Cx I2C Instance.
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	0a9b      	lsrs	r3, r3, #10
 8000458:	029a      	lsls	r2, r3, #10
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	431a      	orrs	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	605a      	str	r2, [r3, #4]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	0d51      	lsrs	r1, r2, #21
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	00d2      	lsls	r2, r2, #3
 8000486:	400a      	ands	r2, r1
 8000488:	490a      	ldr	r1, [pc, #40]	; (80004b4 <LL_I2C_HandleTransfer+0x48>)
 800048a:	430a      	orrs	r2, r1
 800048c:	43d2      	mvns	r2, r2
 800048e:	401a      	ands	r2, r3
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4319      	orrs	r1, r3
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	4319      	orrs	r1, r3
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	4319      	orrs	r1, r3
 80004a0:	69fb      	ldr	r3, [r7, #28]
 80004a2:	430b      	orrs	r3, r1
 80004a4:	431a      	orrs	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b004      	add	sp, #16
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	03ff7bff 	.word	0x03ff7bff

080004b8 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	000a      	movs	r2, r1
 80004c2:	1cfb      	adds	r3, r7, #3
 80004c4:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80004c6:	1cfb      	adds	r3, r7, #3
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004e2:	6959      	ldr	r1, [r3, #20]
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	025b      	lsls	r3, r3, #9
 8000510:	4013      	ands	r3, r2
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000514:	4694      	mov	ip, r2
 8000516:	4463      	add	r3, ip
 8000518:	425a      	negs	r2, r3
 800051a:	4153      	adcs	r3, r2
 800051c:	b2db      	uxtb	r3, r3
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	e000e010 	.word	0xe000e010
 8000528:	ffff0000 	.word	0xffff0000

0800052c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <LL_SYSTICK_EnableIT+0x18>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <LL_SYSTICK_EnableIT+0x18>)
 8000536:	2102      	movs	r1, #2
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	e000e010 	.word	0xe000e010

08000548 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	431a      	orrs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}

0800057c <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000588:	0018      	movs	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	b002      	add	sp, #8
 800058e:	bd80      	pop	{r7, pc}

08000590 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2202      	movs	r2, #2
 800059c:	4252      	negs	r2, r2
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	2201      	movs	r2, #1
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	615a      	str	r2, [r3, #20]
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	435b      	muls	r3, r3
 80005d8:	001a      	movs	r2, r3
 80005da:	0013      	movs	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	189b      	adds	r3, r3, r2
 80005e0:	43db      	mvns	r3, r3
 80005e2:	400b      	ands	r3, r1
 80005e4:	001a      	movs	r2, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	435b      	muls	r3, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	434b      	muls	r3, r1
 80005ee:	431a      	orrs	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b004      	add	sp, #16
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	43d2      	mvns	r2, r2
 8000610:	401a      	ands	r2, r3
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	434b      	muls	r3, r1
 8000618:	431a      	orrs	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	605a      	str	r2, [r3, #4]
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}

08000626 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6899      	ldr	r1, [r3, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	435b      	muls	r3, r3
 800063a:	001a      	movs	r2, r3
 800063c:	0013      	movs	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	189b      	adds	r3, r3, r2
 8000642:	43db      	mvns	r3, r3
 8000644:	400b      	ands	r3, r1
 8000646:	001a      	movs	r2, r3
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	435b      	muls	r3, r3
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	434b      	muls	r3, r1
 8000650:	431a      	orrs	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	609a      	str	r2, [r3, #8]
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}

0800065e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	68d9      	ldr	r1, [r3, #12]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	435b      	muls	r3, r3
 8000672:	001a      	movs	r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	189b      	adds	r3, r3, r2
 800067a:	43db      	mvns	r3, r3
 800067c:	400b      	ands	r3, r1
 800067e:	001a      	movs	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	435b      	muls	r3, r3
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	434b      	muls	r3, r1
 8000688:	431a      	orrs	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	60da      	str	r2, [r3, #12]
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b004      	add	sp, #16
 8000694:	bd80      	pop	{r7, pc}

08000696 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	4013      	ands	r3, r2
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	425a      	negs	r2, r3
 80006ae:	4153      	adcs	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}

080006ba <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	619a      	str	r2, [r3, #24]
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <I2C_Handle>:
void LED_Blinking(uint32_t Period);
void SPI_ReadData_MEMS();
void Calgulate_FreqTim14();

static inline uint8_t I2C_Handle(uint8_t memAddr, uint8_t* pData, uint16_t size)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	6039      	str	r1, [r7, #0]
 80006f4:	0011      	movs	r1, r2
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	1c02      	adds	r2, r0, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	1c0a      	adds	r2, r1, #0
 8000700:	801a      	strh	r2, [r3, #0]

		int32_t to = 0, timeout = 10;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	230a      	movs	r3, #10
 8000708:	60bb      	str	r3, [r7, #8]
		to = timeout;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	60fb      	str	r3, [r7, #12]

		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 800070e:	e00a      	b.n	8000726 <I2C_Handle+0x3a>
			if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000710:	f7ff fef8 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d006      	beq.n	8000726 <I2C_Handle+0x3a>
				if(to-- == 0) {
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	60fa      	str	r2, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <I2C_Handle+0x3a>
					return 1;
 8000722:	2301      	movs	r3, #1
 8000724:	e075      	b.n	8000812 <I2C_Handle+0x126>
		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 8000726:	4b3d      	ldr	r3, [pc, #244]	; (800081c <I2C_Handle+0x130>)
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff fe2d 	bl	8000388 <LL_I2C_IsActiveFlag_BUSY>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d1ee      	bne.n	8000710 <I2C_Handle+0x24>
				}
			}
		}

		to = timeout;
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	60fb      	str	r3, [r7, #12]
//	  /* Master Generate Start condition */
	  to = timeout;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	60fb      	str	r3, [r7, #12]
	 LL_I2C_HandleTransfer(I2C2, LCD_SLAVE_ADD, LL_I2C_ADDRSLAVE_7BIT, size+1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	001a      	movs	r2, r3
 8000742:	4836      	ldr	r0, [pc, #216]	; (800081c <I2C_Handle+0x130>)
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <I2C_Handle+0x134>)
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	2300      	movs	r3, #0
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	0013      	movs	r3, r2
 800074e:	2200      	movs	r2, #0
 8000750:	2178      	movs	r1, #120	; 0x78
 8000752:	f7ff fe8b 	bl	800046c <LL_I2C_HandleTransfer>

	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 8000756:	e00a      	b.n	800076e <I2C_Handle+0x82>
	  		if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000758:	f7ff fed4 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d006      	beq.n	800076e <I2C_Handle+0x82>
	  			if(to-- == 0) {
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	60fa      	str	r2, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <I2C_Handle+0x82>
	  				return 1;
 800076a:	2301      	movs	r3, #1
 800076c:	e051      	b.n	8000812 <I2C_Handle+0x126>
	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <I2C_Handle+0x130>)
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fde7 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d0ee      	beq.n	8000758 <I2C_Handle+0x6c>
	  			}
	  		}
	  	}
	  		to = timeout;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	60fb      	str	r3, [r7, #12]
	  		LL_I2C_TransmitData8(I2C2, memAddr);
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4a26      	ldr	r2, [pc, #152]	; (800081c <I2C_Handle+0x130>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f7ff fe96 	bl	80004b8 <LL_I2C_TransmitData8>

	  		do {
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 800078c:	e00a      	b.n	80007a4 <I2C_Handle+0xb8>
	  				if (LL_SYSTICK_IsActiveCounterFlag()) {
 800078e:	f7ff feb9 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d006      	beq.n	80007a4 <I2C_Handle+0xb8>
	  					if(to-- == 0) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	60fa      	str	r2, [r7, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <I2C_Handle+0xb8>
	  						return 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e036      	b.n	8000812 <I2C_Handle+0x126>
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <I2C_Handle+0x130>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fdcc 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d105      	bne.n	80007bc <I2C_Handle+0xd0>
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <I2C_Handle+0x130>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fdd7 	bl	8000366 <LL_I2C_IsActiveFlag_TC>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d0e8      	beq.n	800078e <I2C_Handle+0xa2>
	  					}
	  				}
	  			}
	  			to = timeout;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	60fb      	str	r3, [r7, #12]
	  			LL_I2C_TransmitData8(I2C2, (*pData++));
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	603a      	str	r2, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <I2C_Handle+0x130>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f7ff fe73 	bl	80004b8 <LL_I2C_TransmitData8>
	  		} while (--size > 0);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	1d3a      	adds	r2, r7, #4
 80007d6:	8812      	ldrh	r2, [r2, #0]
 80007d8:	3a01      	subs	r2, #1
 80007da:	801a      	strh	r2, [r3, #0]
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1df      	bne.n	80007a4 <I2C_Handle+0xb8>

	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80007e4:	e00a      	b.n	80007fc <I2C_Handle+0x110>
	  			if (LL_SYSTICK_IsActiveCounterFlag()) {
 80007e6:	f7ff fe8d 	bl	8000504 <LL_SYSTICK_IsActiveCounterFlag>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d006      	beq.n	80007fc <I2C_Handle+0x110>
	  				if(to-- == 0) {
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	60fa      	str	r2, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <I2C_Handle+0x110>
	  					return 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e00a      	b.n	8000812 <I2C_Handle+0x126>
	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <I2C_Handle+0x130>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fda0 	bl	8000344 <LL_I2C_IsActiveFlag_TXE>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d0ee      	beq.n	80007e6 <I2C_Handle+0xfa>
	  				}
	  			}
	  		}
	  		LL_I2C_GenerateStopCondition(I2C2);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <I2C_Handle+0x130>)
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fdf8 	bl	8000400 <LL_I2C_GenerateStopCondition>
	  		return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b004      	add	sp, #16
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40005800 	.word	0x40005800
 8000820:	80002000 	.word	0x80002000

08000824 <BSL_Startup>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Startup()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	LED_Init();
 8000828:	f000 f984 	bl	8000b34 <LED_Init>
	Init_TIM6();
 800082c:	f000 f994 	bl	8000b58 <Init_TIM6>
	IIC_Start();
 8000830:	f000 f9c4 	bl	8000bbc <IIC_Start>
	Display_Init();
 8000834:	f000 f81e 	bl	8000874 <Display_Init>
	DHT11_Init();
 8000838:	f000 f9a2 	bl	8000b80 <DHT11_Init>
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <BSL_Config>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Config()
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8000846:	f7ff fe71 	bl	800052c <LL_SYSTICK_EnableIT>
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <BSL_Control>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Control()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	while(1)
	{
		if(ms500ms)
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <BSL_Control+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0fa      	beq.n	8000854 <BSL_Control+0x4>
		{
			ms500ms = false;
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <BSL_Control+0x20>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

			Display_Test();
 8000864:	f000 f916 	bl	8000a94 <Display_Test>

			ReadDHT_Data();
 8000868:	f000 f9c8 	bl	8000bfc <ReadDHT_Data>
		if(ms500ms)
 800086c:	e7f2      	b.n	8000854 <BSL_Control+0x4>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	2000008e 	.word	0x2000008e

08000874 <Display_Init>:
  * @brief   init func. for display.
  * @param  ------
  * @retval none
  */
void Display_Init()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
		int status = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]

			LL_I2C_SetTransferSize(I2C2, 50);
 800087e:	4b83      	ldr	r3, [pc, #524]	; (8000a8c <Display_Init+0x218>)
 8000880:	2132      	movs	r1, #50	; 0x32
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff fd94 	bl	80003b0 <LL_I2C_SetTransferSize>
		// Init LCD
			status += ssd1306_WriteCommand(0xAE);   // Display off
 8000888:	20ae      	movs	r0, #174	; 0xae
 800088a:	f000 f937 	bl	8000afc <ssd1306_WriteCommand>
 800088e:	0003      	movs	r3, r0
 8000890:	001a      	movs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	189b      	adds	r3, r3, r2
 8000896:	607b      	str	r3, [r7, #4]
		if (status != 0) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d000      	beq.n	80008a0 <Display_Init+0x2c>
 800089e:	e0ef      	b.n	8000a80 <Display_Init+0x20c>
			return ;
		}
			status += ssd1306_WriteCommand( 0x20);   // Set Memory Addressing Mode
 80008a0:	2020      	movs	r0, #32
 80008a2:	f000 f92b 	bl	8000afc <ssd1306_WriteCommand>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	189b      	adds	r3, r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 f923 	bl	8000afc <ssd1306_WriteCommand>
 80008b6:	0003      	movs	r3, r0
 80008b8:	001a      	movs	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	189b      	adds	r3, r3, r2
 80008be:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80008c0:	20b0      	movs	r0, #176	; 0xb0
 80008c2:	f000 f91b 	bl	8000afc <ssd1306_WriteCommand>
 80008c6:	0003      	movs	r3, r0
 80008c8:	001a      	movs	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	189b      	adds	r3, r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xC8);   // Set COM Output Scan Direction
 80008d0:	20c8      	movs	r0, #200	; 0xc8
 80008d2:	f000 f913 	bl	8000afc <ssd1306_WriteCommand>
 80008d6:	0003      	movs	r3, r0
 80008d8:	001a      	movs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	189b      	adds	r3, r3, r2
 80008de:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // Set low column address
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 f90b 	bl	8000afc <ssd1306_WriteCommand>
 80008e6:	0003      	movs	r3, r0
 80008e8:	001a      	movs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x10);   // Set high column address
 80008f0:	2010      	movs	r0, #16
 80008f2:	f000 f903 	bl	8000afc <ssd1306_WriteCommand>
 80008f6:	0003      	movs	r3, r0
 80008f8:	001a      	movs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	189b      	adds	r3, r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x40);   // Set start line address
 8000900:	2040      	movs	r0, #64	; 0x40
 8000902:	f000 f8fb 	bl	8000afc <ssd1306_WriteCommand>
 8000906:	0003      	movs	r3, r0
 8000908:	001a      	movs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	189b      	adds	r3, r3, r2
 800090e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x81);   // set contrast control register
 8000910:	2081      	movs	r0, #129	; 0x81
 8000912:	f000 f8f3 	bl	8000afc <ssd1306_WriteCommand>
 8000916:	0003      	movs	r3, r0
 8000918:	001a      	movs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	189b      	adds	r3, r3, r2
 800091e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xFF);
 8000920:	20ff      	movs	r0, #255	; 0xff
 8000922:	f000 f8eb 	bl	8000afc <ssd1306_WriteCommand>
 8000926:	0003      	movs	r3, r0
 8000928:	001a      	movs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	189b      	adds	r3, r3, r2
 800092e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA1);   // Set segment re-map 0 to 127
 8000930:	20a1      	movs	r0, #161	; 0xa1
 8000932:	f000 f8e3 	bl	8000afc <ssd1306_WriteCommand>
 8000936:	0003      	movs	r3, r0
 8000938:	001a      	movs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	189b      	adds	r3, r3, r2
 800093e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA6);   // Set normal display
 8000940:	20a6      	movs	r0, #166	; 0xa6
 8000942:	f000 f8db 	bl	8000afc <ssd1306_WriteCommand>
 8000946:	0003      	movs	r3, r0
 8000948:	001a      	movs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	189b      	adds	r3, r3, r2
 800094e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA8);   // Set multiplex ratio(1 to 64)
 8000950:	20a8      	movs	r0, #168	; 0xa8
 8000952:	f000 f8d3 	bl	8000afc <ssd1306_WriteCommand>
 8000956:	0003      	movs	r3, r0
 8000958:	001a      	movs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	189b      	adds	r3, r3, r2
 800095e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x1F);	// ( SSD1306_HEIGHT == 32)
 8000960:	201f      	movs	r0, #31
 8000962:	f000 f8cb 	bl	8000afc <ssd1306_WriteCommand>
 8000966:	0003      	movs	r3, r0
 8000968:	001a      	movs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	189b      	adds	r3, r3, r2
 800096e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000970:	20a4      	movs	r0, #164	; 0xa4
 8000972:	f000 f8c3 	bl	8000afc <ssd1306_WriteCommand>
 8000976:	0003      	movs	r3, r0
 8000978:	001a      	movs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	189b      	adds	r3, r3, r2
 800097e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD3);   // Set display offset
 8000980:	20d3      	movs	r0, #211	; 0xd3
 8000982:	f000 f8bb 	bl	8000afc <ssd1306_WriteCommand>
 8000986:	0003      	movs	r3, r0
 8000988:	001a      	movs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	189b      	adds	r3, r3, r2
 800098e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // No offset
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f8b3 	bl	8000afc <ssd1306_WriteCommand>
 8000996:	0003      	movs	r3, r0
 8000998:	001a      	movs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	189b      	adds	r3, r3, r2
 800099e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD5);   // Set display clock divide ratio/oscillator frequency
 80009a0:	20d5      	movs	r0, #213	; 0xd5
 80009a2:	f000 f8ab 	bl	8000afc <ssd1306_WriteCommand>
 80009a6:	0003      	movs	r3, r0
 80009a8:	001a      	movs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	189b      	adds	r3, r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xF0);   // Set divide ratio
 80009b0:	20f0      	movs	r0, #240	; 0xf0
 80009b2:	f000 f8a3 	bl	8000afc <ssd1306_WriteCommand>
 80009b6:	0003      	movs	r3, r0
 80009b8:	001a      	movs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	189b      	adds	r3, r3, r2
 80009be:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD9);   // Set pre-charge period
 80009c0:	20d9      	movs	r0, #217	; 0xd9
 80009c2:	f000 f89b 	bl	8000afc <ssd1306_WriteCommand>
 80009c6:	0003      	movs	r3, r0
 80009c8:	001a      	movs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	189b      	adds	r3, r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x22);
 80009d0:	2022      	movs	r0, #34	; 0x22
 80009d2:	f000 f893 	bl	8000afc <ssd1306_WriteCommand>
 80009d6:	0003      	movs	r3, r0
 80009d8:	001a      	movs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	189b      	adds	r3, r3, r2
 80009de:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xDA);   // Set com pins hardware configuration
 80009e0:	20da      	movs	r0, #218	; 0xda
 80009e2:	f000 f88b 	bl	8000afc <ssd1306_WriteCommand>
 80009e6:	0003      	movs	r3, r0
 80009e8:	001a      	movs	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	189b      	adds	r3, r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
		#ifdef SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0x32);   // Enable COM left/right remap
		#else
		    status += ssd1306_WriteCommand( 0x02);   // Do not use COM left/right remap
 80009f0:	2002      	movs	r0, #2
 80009f2:	f000 f883 	bl	8000afc <ssd1306_WriteCommand>
 80009f6:	0003      	movs	r3, r0
 80009f8:	001a      	movs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	189b      	adds	r3, r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
		#endif // SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0xDB);   // Set vcomh
 8000a00:	20db      	movs	r0, #219	; 0xdb
 8000a02:	f000 f87b 	bl	8000afc <ssd1306_WriteCommand>
 8000a06:	0003      	movs	r3, r0
 8000a08:	001a      	movs	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	189b      	adds	r3, r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x20);   // 0x20,0.77xVcc
 8000a10:	2020      	movs	r0, #32
 8000a12:	f000 f873 	bl	8000afc <ssd1306_WriteCommand>
 8000a16:	0003      	movs	r3, r0
 8000a18:	001a      	movs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	189b      	adds	r3, r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x8D);   // Set DC-DC enable
 8000a20:	208d      	movs	r0, #141	; 0x8d
 8000a22:	f000 f86b 	bl	8000afc <ssd1306_WriteCommand>
 8000a26:	0003      	movs	r3, r0
 8000a28:	001a      	movs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	189b      	adds	r3, r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x14);   //
 8000a30:	2014      	movs	r0, #20
 8000a32:	f000 f863 	bl	8000afc <ssd1306_WriteCommand>
 8000a36:	0003      	movs	r3, r0
 8000a38:	001a      	movs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	189b      	adds	r3, r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xAF);   // Turn on SSD1306 panel
 8000a40:	20af      	movs	r0, #175	; 0xaf
 8000a42:	f000 f85b 	bl	8000afc <ssd1306_WriteCommand>
 8000a46:	0003      	movs	r3, r0
 8000a48:	001a      	movs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	189b      	adds	r3, r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]

		    if (status != 0) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d116      	bne.n	8000a84 <Display_Init+0x210>
		        return ;
		    }
		    LL_mDelay(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f001 faba 	bl	8001fd0 <LL_mDelay>
			ssd1306_Fill(White);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fa55 	bl	8000f0c <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8000a62:	f000 f9ff 	bl	8000e64 <ssd1306_UpdateScreen>
			  // Set default values for screen object
			SSD1306.CurrentX = 0;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <Display_Init+0x21c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	801a      	strh	r2, [r3, #0]
			SSD1306.CurrentY = 0;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <Display_Init+0x21c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	805a      	strh	r2, [r3, #2]

			SSD1306.Initialized = 1;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <Display_Init+0x21c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	715a      	strb	r2, [r3, #5]
			LL_mDelay(100);
 8000a78:	2064      	movs	r0, #100	; 0x64
 8000a7a:	f001 faa9 	bl	8001fd0 <LL_mDelay>
 8000a7e:	e002      	b.n	8000a86 <Display_Init+0x212>
			return ;
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	e000      	b.n	8000a86 <Display_Init+0x212>
		        return ;
 8000a84:	46c0      	nop			; (mov r8, r8)

}
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40005800 	.word	0x40005800
 8000a90:	20000158 	.word	0x20000158

08000a94 <Display_Test>:


void Display_Test()
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b0c1      	sub	sp, #260	; 0x104
 8000a98:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 fa36 	bl	8000f0c <ssd1306_Fill>
	char tBuf[255];
	sprintf(tBuf,"T: %d H: %d",(int)temperature,(int)humidity);
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <Display_Test+0x58>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	f7ff fbc3 	bl	8000234 <__aeabi_d2iz>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <Display_Test+0x5c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	0019      	movs	r1, r3
 8000aba:	f7ff fbbb 	bl	8000234 <__aeabi_d2iz>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <Display_Test+0x60>)
 8000ac2:	0038      	movs	r0, r7
 8000ac4:	0022      	movs	r2, r4
 8000ac6:	f001 fae5 	bl	8002094 <siprintf>
	ssd1306_SetCursor(0, 10);
 8000aca:	210a      	movs	r1, #10
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 fadb 	bl	8001088 <ssd1306_SetCursor>
	ssd1306_WriteString(tBuf, Font_11x18, White);
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <Display_Test+0x64>)
 8000ad4:	0038      	movs	r0, r7
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	6811      	ldr	r1, [r2, #0]
 8000ada:	6852      	ldr	r2, [r2, #4]
 8000adc:	f000 fa3a 	bl	8000f54 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000ae0:	f000 f9c0 	bl	8000e64 <ssd1306_UpdateScreen>
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b041      	add	sp, #260	; 0x104
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	20000090 	.word	0x20000090
 8000af0:	20000098 	.word	0x20000098
 8000af4:	080028f8 	.word	0x080028f8
 8000af8:	20000000 	.word	0x20000000

08000afc <ssd1306_WriteCommand>:
static uint8_t ssd1306_WriteCommand(uint8_t command)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0002      	movs	r2, r0
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	701a      	strb	r2, [r3, #0]
	uint8_t memAdd= 0x00;
 8000b08:	200f      	movs	r0, #15
 8000b0a:	183b      	adds	r3, r7, r0
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	uint16_t size = 1;
 8000b10:	210c      	movs	r1, #12
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2201      	movs	r2, #1
 8000b16:	801a      	strh	r2, [r3, #0]
	return I2C_Handle(memAdd,&command,size);
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	1df9      	adds	r1, r7, #7
 8000b1e:	183b      	adds	r3, r7, r0
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fde2 	bl	80006ec <I2C_Handle>
 8000b28:	0003      	movs	r3, r0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <LED_Init>:
void LED_Init()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	LED1_OFF();
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <LED_Init+0x20>)
 8000b3a:	2140      	movs	r1, #64	; 0x40
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fdc8 	bl	80006d2 <LL_GPIO_ResetOutputPin>
	LED2_OFF();
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <LED_Init+0x20>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fdc3 	bl	80006d2 <LL_GPIO_ResetOutputPin>
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	48000800 	.word	0x48000800

08000b58 <Init_TIM6>:
void Init_TIM6(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <Init_TIM6+0x24>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fd16 	bl	8000590 <LL_TIM_ClearFlag_UPDATE>
	/* Enable counter */
	LL_TIM_EnableCounter(TIM6);
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <Init_TIM6+0x24>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff fcee 	bl	8000548 <LL_TIM_EnableCounter>

	/* Force update generation */
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <Init_TIM6+0x24>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff fd1a 	bl	80005a8 <LL_TIM_GenerateEvent_UPDATE>
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40001000 	.word	0x40001000

08000b80 <DHT11_Init>:
void DHT11_Init()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
		/* Enable the LED Clock */
		DHT11_GPIO_CLK_ENABLE();
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	02db      	lsls	r3, r3, #11
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff fca5 	bl	80004d8 <LL_AHB1_GRP1_EnableClock>

		LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_OUTPUT);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <DHT11_Init+0x38>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	2104      	movs	r1, #4
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fd15 	bl	80005c4 <LL_GPIO_SetPinMode>
		/* Reset value is LL_GPIO_OUTPUT_PUSHPULL */
		LL_GPIO_SetPinOutputType(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <DHT11_Init+0x38>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fd2b 	bl	80005fc <LL_GPIO_SetPinOutputType>
		/* Reset value is LL_GPIO_SPEED_FREQ_LOW */
		LL_GPIO_SetPinSpeed(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <DHT11_Init+0x38>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2104      	movs	r1, #4
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fd3a 	bl	8000626 <LL_GPIO_SetPinSpeed>
		/* Reset value is LL_GPIO_PULL_NO */
		//LL_GPIO_SetPinPull(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	48000400 	.word	0x48000400

08000bbc <IIC_Start>:
void IIC_Start()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	LL_I2C_SetSlaveAddr(I2C2,LCD_SLAVE_ADD);
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <IIC_Start+0x3c>)
 8000bc2:	2178      	movs	r1, #120	; 0x78
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff fc3f 	bl	8000448 <LL_I2C_SetSlaveAddr>
	LL_I2C_SetTransferRequest(I2C2, LL_I2C_REQUEST_WRITE);
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <IIC_Start+0x3c>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fc26 	bl	8000420 <LL_I2C_SetTransferRequest>
	LL_I2C_SetTransferSize(I2C2, 50);
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <IIC_Start+0x3c>)
 8000bd6:	2132      	movs	r1, #50	; 0x32
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbe9 	bl	80003b0 <LL_I2C_SetTransferSize>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <IIC_Start+0x3c>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fbf8 	bl	80003d8 <LL_I2C_AcknowledgeNextData>
	LL_I2C_Enable(I2C2);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <IIC_Start+0x3c>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fb9c 	bl	8000328 <LL_I2C_Enable>
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40005800 	.word	0x40005800

08000bfc <ReadDHT_Data>:
#define DHT_BIT_SET_DATA_DETECT_TIME_US 50
char dht11_byte[DHT_DATA_BYTE_COUNT];
uint32_t dht11_byte_t[DHT_DATA_BYTE_COUNT][8];

int ReadDHT_Data()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
		int rv = ReadRawDHTData();
 8000c02:	f000 f84b 	bl	8000c9c <ReadRawDHTData>
 8000c06:	0003      	movs	r3, r0
 8000c08:	607b      	str	r3, [r7, #4]
		if (rv != 0)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <ReadDHT_Data+0x18>
		{
			return rv;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	e037      	b.n	8000c84 <ReadDHT_Data+0x88>
		}

		// CONVERT AND STORE
		humidity    = dht11_byte[0];  // bit[1] == 0;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <ReadDHT_Data+0x90>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fb41 	bl	80002a0 <__aeabi_ui2d>
 8000c1e:	0002      	movs	r2, r0
 8000c20:	000b      	movs	r3, r1
 8000c22:	491b      	ldr	r1, [pc, #108]	; (8000c90 <ReadDHT_Data+0x94>)
 8000c24:	600a      	str	r2, [r1, #0]
 8000c26:	604b      	str	r3, [r1, #4]
		temperature = dht11_byte[2];  // bits[3] == 0;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <ReadDHT_Data+0x90>)
 8000c2a:	789b      	ldrb	r3, [r3, #2]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fb37 	bl	80002a0 <__aeabi_ui2d>
 8000c32:	0002      	movs	r2, r0
 8000c34:	000b      	movs	r3, r1
 8000c36:	4917      	ldr	r1, [pc, #92]	; (8000c94 <ReadDHT_Data+0x98>)
 8000c38:	600a      	str	r2, [r1, #0]
 8000c3a:	604b      	str	r3, [r1, #4]

		// TEST CHECKSUM
		uint8_t sum = dht11_byte[0] + dht11_byte[1] + dht11_byte[2] + dht11_byte[3]; // bits[1] && bits[3] both 0
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <ReadDHT_Data+0x90>)
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <ReadDHT_Data+0x90>)
 8000c42:	785b      	ldrb	r3, [r3, #1]
 8000c44:	18d3      	adds	r3, r2, r3
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <ReadDHT_Data+0x90>)
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	b2d9      	uxtb	r1, r3
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <ReadDHT_Data+0x90>)
 8000c52:	78da      	ldrb	r2, [r3, #3]
 8000c54:	1cfb      	adds	r3, r7, #3
 8000c56:	188a      	adds	r2, r1, r2
 8000c58:	701a      	strb	r2, [r3, #0]
		if (dht11_byte[4] != sum)
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <ReadDHT_Data+0x90>)
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	1cfa      	adds	r2, r7, #3
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d00d      	beq.n	8000c82 <ReadDHT_Data+0x86>
		{
			temperature = humidity = -1;
 8000c66:	490a      	ldr	r1, [pc, #40]	; (8000c90 <ReadDHT_Data+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <ReadDHT_Data+0x9c>)
 8000c6c:	600a      	str	r2, [r1, #0]
 8000c6e:	604b      	str	r3, [r1, #4]
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <ReadDHT_Data+0x94>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4907      	ldr	r1, [pc, #28]	; (8000c94 <ReadDHT_Data+0x98>)
 8000c78:	600a      	str	r2, [r1, #0]
 8000c7a:	604b      	str	r3, [r1, #4]
			return -1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	e000      	b.n	8000c84 <ReadDHT_Data+0x88>
		}
		return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000560 	.word	0x20000560
 8000c90:	20000098 	.word	0x20000098
 8000c94:	20000090 	.word	0x20000090
 8000c98:	bff00000 	.word	0xbff00000

08000c9c <ReadRawDHTData>:
  * @retval :
  *  0 : OK
  *  -2 : timeout
  */
int ReadRawDHTData()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
	//we notified that we want to start com.
	LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_OUTPUT);
 8000ca2:	4b60      	ldr	r3, [pc, #384]	; (8000e24 <ReadRawDHTData+0x188>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fc8b 	bl	80005c4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinOutputType(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000cae:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <ReadRawDHTData+0x188>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fca1 	bl	80005fc <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinSpeed(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000cba:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <ReadRawDHTData+0x188>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fcb0 	bl	8000626 <LL_GPIO_SetPinSpeed>

	LL_GPIO_ResetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8000cc6:	4b57      	ldr	r3, [pc, #348]	; (8000e24 <ReadRawDHTData+0x188>)
 8000cc8:	2104      	movs	r1, #4
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fd01 	bl	80006d2 <LL_GPIO_ResetOutputPin>
	LL_mDelay(19);
 8000cd0:	2013      	movs	r0, #19
 8000cd2:	f001 f97d 	bl	8001fd0 <LL_mDelay>
	LL_GPIO_SetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8000cd6:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <ReadRawDHTData+0x188>)
 8000cd8:	2104      	movs	r1, #4
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fced 	bl	80006ba <LL_GPIO_SetOutputPin>
	DelayUs(30);
 8000ce0:	201e      	movs	r0, #30
 8000ce2:	f000 f8a5 	bl	8000e30 <DelayUs>
	//********************************

	/*****************low(80us) => high (80us) ***************** response */
	LL_GPIO_SetPinMode(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_MODE_INPUT);
 8000ce6:	4b4f      	ldr	r3, [pc, #316]	; (8000e24 <ReadRawDHTData+0x188>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2104      	movs	r1, #4
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fc69 	bl	80005c4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(DHT11_IN_GPIO_Port, DHT11_IN_Pin, LL_GPIO_PULL_NO);
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <ReadRawDHTData+0x188>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff fcb0 	bl	800065e <LL_GPIO_SetPinPull>

	LL_TIM_SetCounter(TIM6, 0);
 8000cfe:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fc2e 	bl	8000564 <LL_TIM_SetCounter>
	while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d08:	e009      	b.n	8000d1e <ReadRawDHTData+0x82>
	{
		if(LL_TIM_GetCounter(TIM6) > DHT_BEGIN_RESPONSE_TIMEOUT_US)
 8000d0a:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fc35 	bl	800057c <LL_TIM_GetCounter>
 8000d12:	0003      	movs	r3, r0
 8000d14:	2b5a      	cmp	r3, #90	; 0x5a
 8000d16:	d902      	bls.n	8000d1e <ReadRawDHTData+0x82>
		{
			return -2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	e07e      	b.n	8000e1c <ReadRawDHTData+0x180>
	while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <ReadRawDHTData+0x188>)
 8000d20:	2104      	movs	r1, #4
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fcb7 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d0ee      	beq.n	8000d0a <ReadRawDHTData+0x6e>
		}
	}
	LL_TIM_SetCounter(TIM6, 0);
 8000d2c:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff fc17 	bl	8000564 <LL_TIM_SetCounter>
	while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d36:	e009      	b.n	8000d4c <ReadRawDHTData+0xb0>
	{
		if(LL_TIM_GetCounter(TIM6) > DHT_BEGIN_RESPONSE_TIMEOUT_US)
 8000d38:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fc1e 	bl	800057c <LL_TIM_GetCounter>
 8000d40:	0003      	movs	r3, r0
 8000d42:	2b5a      	cmp	r3, #90	; 0x5a
 8000d44:	d902      	bls.n	8000d4c <ReadRawDHTData+0xb0>
		{
			return -2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	425b      	negs	r3, r3
 8000d4a:	e067      	b.n	8000e1c <ReadRawDHTData+0x180>
	while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d4c:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <ReadRawDHTData+0x188>)
 8000d4e:	2104      	movs	r1, #4
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fca0 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d1ee      	bne.n	8000d38 <ReadRawDHTData+0x9c>
		}
	}
	//********************************************************* Start reading data bit by low level (50us) ***************************
	for (int i = 0; i < DHT_DATA_BYTE_COUNT; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	e059      	b.n	8000e14 <ReadRawDHTData+0x178>
	{
		for (int J = 7; J > -1; J--)
 8000d60:	2307      	movs	r3, #7
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	e050      	b.n	8000e08 <ReadRawDHTData+0x16c>
		{
			LL_TIM_SetCounter(TIM6, 0);
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fbfa 	bl	8000564 <LL_TIM_SetCounter>
			while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d70:	e009      	b.n	8000d86 <ReadRawDHTData+0xea>
			{
				if(LL_TIM_GetCounter(TIM6) > DHT_START_BIT_TIMEOUT_US)
 8000d72:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fc01 	bl	800057c <LL_TIM_GetCounter>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	2b3c      	cmp	r3, #60	; 0x3c
 8000d7e:	d902      	bls.n	8000d86 <ReadRawDHTData+0xea>
				{
					return -2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	425b      	negs	r3, r3
 8000d84:	e04a      	b.n	8000e1c <ReadRawDHTData+0x180>
			while(!LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin))
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <ReadRawDHTData+0x188>)
 8000d88:	2104      	movs	r1, #4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fc83 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d0ee      	beq.n	8000d72 <ReadRawDHTData+0xd6>
				}
			}

			LL_TIM_SetCounter(TIM6, 0);
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fbe3 	bl	8000564 <LL_TIM_SetCounter>
			while(LL_GPIO_IsInputPinSet(DHT11_IN_GPIO_Port, DHT11_IN_Pin));
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <ReadRawDHTData+0x188>)
 8000da2:	2104      	movs	r1, #4
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fc76 	bl	8000696 <LL_GPIO_IsInputPinSet>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d1f8      	bne.n	8000da0 <ReadRawDHTData+0x104>
			(LL_TIM_GetCounter(TIM6) > DHT_BIT_SET_DATA_DETECT_TIME_US) ? bitWrite(dht11_byte[i],J,1) : bitWrite(dht11_byte[i],J,0);
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <ReadRawDHTData+0x18c>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff fbe3 	bl	800057c <LL_TIM_GetCounter>
 8000db6:	0003      	movs	r3, r0
 8000db8:	2b32      	cmp	r3, #50	; 0x32
 8000dba:	d910      	bls.n	8000dde <ReadRawDHTData+0x142>
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <ReadRawDHTData+0x190>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	18d3      	adds	r3, r2, r3
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	4099      	lsls	r1, r3
 8000dca:	000b      	movs	r3, r1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2d9      	uxtb	r1, r3
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <ReadRawDHTData+0x190>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	18d3      	adds	r3, r2, r3
 8000dd8:	1c0a      	adds	r2, r1, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e011      	b.n	8000e02 <ReadRawDHTData+0x166>
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <ReadRawDHTData+0x190>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	18d3      	adds	r3, r2, r3
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2101      	movs	r1, #1
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4091      	lsls	r1, r2
 8000dec:	000a      	movs	r2, r1
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	4013      	ands	r3, r2
 8000df6:	b2d9      	uxtb	r1, r3
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <ReadRawDHTData+0x190>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	1c0a      	adds	r2, r1, #0
 8000e00:	701a      	strb	r2, [r3, #0]
		for (int J = 7; J > -1; J--)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	daab      	bge.n	8000d66 <ReadRawDHTData+0xca>
	for (int i = 0; i < DHT_DATA_BYTE_COUNT; i++)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3301      	adds	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	dda2      	ble.n	8000d60 <ReadRawDHTData+0xc4>
		}
	}

	return 0;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	48000400 	.word	0x48000400
 8000e28:	40001000 	.word	0x40001000
 8000e2c:	20000560 	.word	0x20000560

08000e30 <DelayUs>:

void DelayUs(uint32_t us)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	LL_TIM_SetCounter(TIM6, 0);
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <DelayUs+0x30>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fb91 	bl	8000564 <LL_TIM_SetCounter>
	while(LL_TIM_GetCounter(TIM6) < us);
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <DelayUs+0x30>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f7ff fb98 	bl	800057c <LL_TIM_GetCounter>
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d8f7      	bhi.n	8000e44 <DelayUs+0x14>
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40001000 	.word	0x40001000

08000e64 <ssd1306_UpdateScreen>:
  * @brief   Write the screenbuffer with changed to the screen
  * @param  ------
  * @retval none
  */
void ssd1306_UpdateScreen()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
    uint8_t i;
    int sum = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]

    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e02f      	b.n	8000ed6 <ssd1306_UpdateScreen+0x72>
    	sum+= ssd1306_WriteCommand( 0xB0 + i);
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3b50      	subs	r3, #80	; 0x50
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff fe3c 	bl	8000afc <ssd1306_WriteCommand>
 8000e84:	0003      	movs	r3, r0
 8000e86:	001a      	movs	r2, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	189b      	adds	r3, r3, r2
 8000e8c:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x00);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fe34 	bl	8000afc <ssd1306_WriteCommand>
 8000e94:	0003      	movs	r3, r0
 8000e96:	001a      	movs	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	189b      	adds	r3, r3, r2
 8000e9c:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x10);
 8000e9e:	2010      	movs	r0, #16
 8000ea0:	f7ff fe2c 	bl	8000afc <ssd1306_WriteCommand>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	189b      	adds	r3, r3, r2
 8000eac:	603b      	str	r3, [r7, #0]
    	sum+= I2C_Handle(0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	01da      	lsls	r2, r3, #7
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <ssd1306_UpdateScreen+0xa0>)
 8000eb6:	18d3      	adds	r3, r2, r3
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	0019      	movs	r1, r3
 8000ebc:	2040      	movs	r0, #64	; 0x40
 8000ebe:	f7ff fc15 	bl	80006ec <I2C_Handle>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	189b      	adds	r3, r3, r2
 8000eca:	603b      	str	r3, [r7, #0]
    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	3201      	adds	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	d9cb      	bls.n	8000e76 <ssd1306_UpdateScreen+0x12>
    }
    if(sum != 0)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <ssd1306_UpdateScreen+0x8c>
    {
    	LED1_ON();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <ssd1306_UpdateScreen+0xa4>)
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff fbe6 	bl	80006ba <LL_GPIO_SetOutputPin>
    }
    else
    {
    	LED2_ON();
    }
}
 8000eee:	e004      	b.n	8000efa <ssd1306_UpdateScreen+0x96>
    	LED2_ON();
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <ssd1306_UpdateScreen+0xa4>)
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff fbe0 	bl	80006ba <LL_GPIO_SetOutputPin>
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	20000160 	.word	0x20000160
 8000f08:	48000800 	.word	0x48000800

08000f0c <ssd1306_Fill>:
  * @brief   Fill the whole screen with the given color
  * @param  ------
  * @retval none
  */
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	701a      	strb	r2, [r3, #0]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e00e      	b.n	8000f3c <ssd1306_Fill+0x30>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <ssd1306_Fill+0x1e>
 8000f26:	2100      	movs	r1, #0
 8000f28:	e000      	b.n	8000f2c <ssd1306_Fill+0x20>
 8000f2a:	21ff      	movs	r1, #255	; 0xff
 8000f2c:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <ssd1306_Fill+0x44>)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	18d3      	adds	r3, r2, r3
 8000f32:	1c0a      	adds	r2, r1, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3eb      	bcc.n	8000f1e <ssd1306_Fill+0x12>
    }
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b004      	add	sp, #16
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000160 	.word	0x20000160

08000f54 <ssd1306_WriteString>:
  * @brief   Write full string to screenbuffer
  * @param  ------
  * @retval none
  */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	1d38      	adds	r0, r7, #4
 8000f5e:	6001      	str	r1, [r0, #0]
 8000f60:	6042      	str	r2, [r0, #4]
 8000f62:	001a      	movs	r2, r3
 8000f64:	1cfb      	adds	r3, r7, #3
 8000f66:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str)
 8000f68:	e014      	b.n	8000f94 <ssd1306_WriteString+0x40>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	7818      	ldrb	r0, [r3, #0]
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	6811      	ldr	r1, [r2, #0]
 8000f76:	6852      	ldr	r2, [r2, #4]
 8000f78:	f000 f8a0 	bl	80010bc <ssd1306_WriteChar>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	001a      	movs	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d002      	beq.n	8000f8e <ssd1306_WriteString+0x3a>
        {
            // Char could not be written
            return *str;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	e008      	b.n	8000fa0 <ssd1306_WriteString+0x4c>
        }

        // Next char
        str++;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e6      	bne.n	8000f6a <ssd1306_WriteString+0x16>
    }

    // Everything ok
    return *str;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <ssd1306_DrawPixel>:
  * 		Y => Y Coordinate
  * 		color => Pixel color
  * @retval none
  */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0004      	movs	r4, r0
 8000fb0:	0008      	movs	r0, r1
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	1c22      	adds	r2, r4, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	1dbb      	adds	r3, r7, #6
 8000fbc:	1c02      	adds	r2, r0, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	1d7b      	adds	r3, r7, #5
 8000fc2:	1c0a      	adds	r2, r1, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db52      	blt.n	8001076 <ssd1306_DrawPixel+0xce>
 8000fd0:	1dbb      	adds	r3, r7, #6
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b1f      	cmp	r3, #31
 8000fd6:	d84e      	bhi.n	8001076 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <ssd1306_DrawPixel+0xd8>)
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <ssd1306_DrawPixel+0x46>
    {
        color = (SSD1306_COLOR)!color;
 8000fe0:	1d7b      	adds	r3, r7, #5
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	425a      	negs	r2, r3
 8000fe6:	4153      	adcs	r3, r2
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	1d7b      	adds	r3, r7, #5
 8000fec:	701a      	strb	r2, [r3, #0]
    }

    // Draw in the correct color
    if (color == White)
 8000fee:	1d7b      	adds	r3, r7, #5
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d11e      	bne.n	8001034 <ssd1306_DrawPixel+0x8c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	1dbb      	adds	r3, r7, #6
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	b2d8      	uxtb	r0, r3
 8001002:	0003      	movs	r3, r0
 8001004:	01db      	lsls	r3, r3, #7
 8001006:	18d3      	adds	r3, r2, r3
 8001008:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <ssd1306_DrawPixel+0xdc>)
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	b25a      	sxtb	r2, r3
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2107      	movs	r1, #7
 8001014:	400b      	ands	r3, r1
 8001016:	2101      	movs	r1, #1
 8001018:	4099      	lsls	r1, r3
 800101a:	000b      	movs	r3, r1
 800101c:	b25b      	sxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b259      	sxtb	r1, r3
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	0003      	movs	r3, r0
 8001028:	01db      	lsls	r3, r3, #7
 800102a:	18d3      	adds	r3, r2, r3
 800102c:	b2c9      	uxtb	r1, r1
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <ssd1306_DrawPixel+0xdc>)
 8001030:	54d1      	strb	r1, [r2, r3]
 8001032:	e021      	b.n	8001078 <ssd1306_DrawPixel+0xd0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	1dbb      	adds	r3, r7, #6
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	b2d8      	uxtb	r0, r3
 8001040:	0003      	movs	r3, r0
 8001042:	01db      	lsls	r3, r3, #7
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <ssd1306_DrawPixel+0xdc>)
 8001048:	5cd3      	ldrb	r3, [r2, r3]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	1dba      	adds	r2, r7, #6
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	2107      	movs	r1, #7
 8001052:	400a      	ands	r2, r1
 8001054:	2101      	movs	r1, #1
 8001056:	4091      	lsls	r1, r2
 8001058:	000a      	movs	r2, r1
 800105a:	b252      	sxtb	r2, r2
 800105c:	43d2      	mvns	r2, r2
 800105e:	b252      	sxtb	r2, r2
 8001060:	4013      	ands	r3, r2
 8001062:	b259      	sxtb	r1, r3
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	0003      	movs	r3, r0
 800106a:	01db      	lsls	r3, r3, #7
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	b2c9      	uxtb	r1, r1
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <ssd1306_DrawPixel+0xdc>)
 8001072:	54d1      	strb	r1, [r2, r3]
 8001074:	e000      	b.n	8001078 <ssd1306_DrawPixel+0xd0>
        return;
 8001076:	46c0      	nop			; (mov r8, r8)
    }
}
 8001078:	46bd      	mov	sp, r7
 800107a:	b003      	add	sp, #12
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000158 	.word	0x20000158
 8001084:	20000160 	.word	0x20000160

08001088 <ssd1306_SetCursor>:
  * @param  x      => axis
  * 		y      => axis
  * @retval none
  */
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	0002      	movs	r2, r0
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	1c0a      	adds	r2, r1, #0
 8001098:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <ssd1306_SetCursor+0x30>)
 80010a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <ssd1306_SetCursor+0x30>)
 80010ac:	805a      	strh	r2, [r3, #2]
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	20000158 	.word	0x20000158

080010bc <ssd1306_WriteChar>:
  * 		Font    => Font to use
  * 		color   => Black or White
  * @retval char
  */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	0004      	movs	r4, r0
 80010c4:	1d38      	adds	r0, r7, #4
 80010c6:	6001      	str	r1, [r0, #0]
 80010c8:	6042      	str	r2, [r0, #4]
 80010ca:	0019      	movs	r1, r3
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	1c22      	adds	r2, r4, #0
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	230e      	movs	r3, #14
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	1c0a      	adds	r2, r1, #0
 80010da:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	001a      	movs	r2, r3
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	2b7f      	cmp	r3, #127	; 0x7f
 80010ea:	dc07      	bgt.n	80010fc <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80010ec:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 80010ee:	885b      	ldrh	r3, [r3, #2]
 80010f0:	001a      	movs	r2, r3
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80010f8:	2b1f      	cmp	r3, #31
 80010fa:	dd01      	ble.n	8001100 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e066      	b.n	80011ce <ssd1306_WriteChar+0x112>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	e051      	b.n	80011aa <ssd1306_WriteChar+0xee>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	230f      	movs	r3, #15
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3b20      	subs	r3, #32
 8001112:	1d39      	adds	r1, r7, #4
 8001114:	7849      	ldrb	r1, [r1, #1]
 8001116:	434b      	muls	r3, r1
 8001118:	0019      	movs	r1, r3
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	18cb      	adds	r3, r1, r3
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	e035      	b.n	8001198 <ssd1306_WriteChar+0xdc>
        {
            if ((b << j) & 0x8000)
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	409a      	lsls	r2, r3
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	4013      	ands	r3, r2
 8001138:	d014      	beq.n	8001164 <ssd1306_WriteChar+0xa8>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	b2d8      	uxtb	r0, r3
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 800114a:	885b      	ldrh	r3, [r3, #2]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	b2d9      	uxtb	r1, r3
 8001156:	230e      	movs	r3, #14
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	001a      	movs	r2, r3
 800115e:	f7ff ff23 	bl	8000fa8 <ssd1306_DrawPixel>
 8001162:	e016      	b.n	8001192 <ssd1306_WriteChar+0xd6>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	b2d8      	uxtb	r0, r3
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 8001174:	885b      	ldrh	r3, [r3, #2]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	18d3      	adds	r3, r2, r3
 800117e:	b2d9      	uxtb	r1, r3
 8001180:	230e      	movs	r3, #14
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	425a      	negs	r2, r3
 8001188:	4153      	adcs	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	001a      	movs	r2, r3
 800118e:	f7ff ff0b 	bl	8000fa8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	3301      	adds	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	001a      	movs	r2, r3
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d3c3      	bcc.n	800112c <ssd1306_WriteChar+0x70>
    for (i = 0; i < Font.FontHeight; i++)
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	3301      	adds	r3, #1
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	001a      	movs	r2, r3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d3a7      	bcc.n	8001106 <ssd1306_WriteChar+0x4a>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <ssd1306_WriteChar+0x11c>)
 80011c6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80011c8:	230f      	movs	r3, #15
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	781b      	ldrb	r3, [r3, #0]
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b009      	add	sp, #36	; 0x24
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000158 	.word	0x20000158

080011dc <BSL_Tick>:
    LL_mDelay(Period);
  }
}

void BSL_Tick()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	static __IO uint32_t cntr_ms_50 = 0;
	static __IO uint32_t cntr_ms_500 = 0;
	static __IO uint32_t cntr_ms_3000 = 0;

	if(++cntr_ms_50 >49)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <BSL_Tick+0x60>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <BSL_Tick+0x60>)
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	2b31      	cmp	r3, #49	; 0x31
 80011ec:	d905      	bls.n	80011fa <BSL_Tick+0x1e>
	{
		ms50ms = true;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <BSL_Tick+0x64>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
		cntr_ms_50 = 0;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <BSL_Tick+0x60>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	}
	if(++cntr_ms_500 >499)
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <BSL_Tick+0x68>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a10      	ldr	r2, [pc, #64]	; (8001244 <BSL_Tick+0x68>)
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	22fa      	movs	r2, #250	; 0xfa
 8001206:	0052      	lsls	r2, r2, #1
 8001208:	4293      	cmp	r3, r2
 800120a:	d305      	bcc.n	8001218 <BSL_Tick+0x3c>
		{
			ms500ms = true;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <BSL_Tick+0x6c>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
			cntr_ms_500 = 0;
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <BSL_Tick+0x68>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
		}
	if(++cntr_ms_3000 > 2999)
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <BSL_Tick+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <BSL_Tick+0x70>)
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <BSL_Tick+0x74>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d905      	bls.n	8001234 <BSL_Tick+0x58>
	{
		ms3000ms = true;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <BSL_Tick+0x78>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
		cntr_ms_3000 = 0;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <BSL_Tick+0x70>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
	}
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	200000a0 	.word	0x200000a0
 8001240:	2000008c 	.word	0x2000008c
 8001244:	200000a4 	.word	0x200000a4
 8001248:	2000008e 	.word	0x2000008e
 800124c:	200000a8 	.word	0x200000a8
 8001250:	00000bb7 	.word	0x00000bb7
 8001254:	2000008d 	.word	0x2000008d

08001258 <LL_I2C_EnableClockStretching>:
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a03      	ldr	r2, [pc, #12]	; (8001274 <LL_I2C_EnableClockStretching+0x1c>)
 8001266:	401a      	ands	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}
 8001274:	fffdffff 	.word	0xfffdffff

08001278 <LL_I2C_DisableGeneralCall>:
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <LL_I2C_DisableGeneralCall+0x1c>)
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}
 8001294:	fff7ffff 	.word	0xfff7ffff

08001298 <LL_I2C_SetOwnAddress2>:
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <LL_I2C_SetOwnAddress2+0x28>)
 80012aa:	401a      	ands	r2, r3
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	430b      	orrs	r3, r1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	60da      	str	r2, [r3, #12]
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b004      	add	sp, #16
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	fffff801 	.word	0xfffff801

080012c4 <LL_I2C_DisableOwnAddress2>:
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <LL_I2C_DisableOwnAddress2+0x1c>)
 80012d2:	401a      	ands	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	60da      	str	r2, [r3, #12]
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	ffff7fff 	.word	0xffff7fff

080012e4 <LL_I2C_EnableAutoEndMode>:
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	0492      	lsls	r2, r2, #18
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	605a      	str	r2, [r3, #4]
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <LL_RCC_HSI_Enable+0x18>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <LL_RCC_HSI_Enable+0x18>)
 800130e:	2101      	movs	r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40021000 	.word	0x40021000

08001320 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <LL_RCC_HSI_IsReady+0x1c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	3b02      	subs	r3, #2
 800132e:	425a      	negs	r2, r3
 8001330:	4153      	adcs	r3, r2
 8001332:	b2db      	uxtb	r3, r3
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	40021000 	.word	0x40021000

08001340 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	22f8      	movs	r2, #248	; 0xf8
 800134e:	4393      	bics	r3, r2
 8001350:	0019      	movs	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	00da      	lsls	r2, r3, #3
 8001356:	4b03      	ldr	r3, [pc, #12]	; (8001364 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000

08001368 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <LL_RCC_SetSysClkSource+0x24>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2203      	movs	r2, #3
 8001376:	4393      	bics	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <LL_RCC_SetSysClkSource+0x24>)
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40021000 	.word	0x40021000

08001390 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <LL_RCC_GetSysClkSource+0x14>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	220c      	movs	r2, #12
 800139a:	4013      	ands	r3, r2
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40021000 	.word	0x40021000

080013a8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <LL_RCC_SetAHBPrescaler+0x24>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	22f0      	movs	r2, #240	; 0xf0
 80013b6:	4393      	bics	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <LL_RCC_SetAHBPrescaler+0x24>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	430a      	orrs	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40021000 	.word	0x40021000

080013d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80013de:	4013      	ands	r3, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40021000 	.word	0x40021000
 80013f8:	fffff8ff 	.word	0xfffff8ff

080013fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <LL_RCC_PLL_Enable+0x18>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <LL_RCC_PLL_Enable+0x18>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0449      	lsls	r1, r1, #17
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000

08001418 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <LL_RCC_PLL_IsReady+0x24>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	049b      	lsls	r3, r3, #18
 8001424:	4013      	ands	r3, r2
 8001426:	22fe      	movs	r2, #254	; 0xfe
 8001428:	0612      	lsls	r2, r2, #24
 800142a:	4694      	mov	ip, r2
 800142c:	4463      	add	r3, ip
 800142e:	425a      	negs	r2, r3
 8001430:	4153      	adcs	r3, r2
 8001432:	b2db      	uxtb	r3, r3
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	40021000 	.word	0x40021000

08001440 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001452:	4013      	ands	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	431a      	orrs	r2, r3
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	220f      	movs	r2, #15
 8001468:	4393      	bics	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	430a      	orrs	r2, r1
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	ffc27fff 	.word	0xffc27fff

08001484 <LL_AHB1_GRP1_EnableClock>:
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <LL_AHB1_GRP1_EnableClock+0x28>)
 800148e:	6959      	ldr	r1, [r3, #20]
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <LL_AHB1_GRP1_EnableClock+0x28>)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LL_AHB1_GRP1_EnableClock+0x28>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000

080014b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80014ba:	69d9      	ldr	r1, [r3, #28]
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000

080014dc <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <LL_APB1_GRP2_EnableClock+0x28>)
 80014e6:	6999      	ldr	r1, [r3, #24]
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <LL_APB1_GRP2_EnableClock+0x28>)
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <LL_APB1_GRP2_EnableClock+0x28>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000

08001508 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <LL_FLASH_SetLatency+0x24>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4393      	bics	r3, r2
 8001518:	0019      	movs	r1, r3
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <LL_FLASH_SetLatency+0x24>)
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b002      	add	sp, #8
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40022000 	.word	0x40022000

08001530 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <LL_FLASH_GetLatency+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40022000 	.word	0x40022000

08001548 <LL_TIM_DisableARRPreload>:
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	4393      	bics	r3, r2
 8001558:	001a      	movs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}

08001566 <LL_TIM_SetTriggerOutput>:
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2270      	movs	r2, #112	; 0x70
 8001576:	4393      	bics	r3, r2
 8001578:	001a      	movs	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	605a      	str	r2, [r3, #4]
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}

0800158a <LL_TIM_DisableMasterSlaveMode>:
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	4393      	bics	r3, r2
 800159a:	001a      	movs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <LL_GPIO_ResetOutputPin>:
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff ff89 	bl	80014dc <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	055b      	lsls	r3, r3, #21
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff ff6e 	bl	80014b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f80e 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f000 f90a 	bl	80017f0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80015dc:	f000 f84c 	bl	8001678 <MX_I2C2_Init>
  MX_TIM6_Init();
 80015e0:	f000 f8d4 	bl	800178c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  BSL_Startup();
 80015e4:	f7ff f91e 	bl	8000824 <BSL_Startup>

  BSL_Config();
 80015e8:	f7ff f92b 	bl	8000842 <BSL_Config>

  BSL_Control();
 80015ec:	f7ff f930 	bl	8000850 <BSL_Control>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <main+0x30>
	...

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff ff85 	bl	8001508 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	f7ff ff96 	bl	8001530 <LL_FLASH_GetLatency>
 8001604:	0003      	movs	r3, r0
 8001606:	2b01      	cmp	r3, #1
 8001608:	d1fa      	bne.n	8001600 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800160a:	f7ff fe7b 	bl	8001304 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	f7ff fe86 	bl	8001320 <LL_RCC_HSI_IsReady>
 8001614:	0003      	movs	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d1fa      	bne.n	8001610 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800161a:	2010      	movs	r0, #16
 800161c:	f7ff fe90 	bl	8001340 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PREDIV_DIV_1);
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	0359      	lsls	r1, r3, #13
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	2200      	movs	r2, #0
 800162a:	0018      	movs	r0, r3
 800162c:	f7ff ff08 	bl	8001440 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001630:	f7ff fee4 	bl	80013fc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	f7ff feef 	bl	8001418 <LL_RCC_PLL_IsReady>
 800163a:	0003      	movs	r3, r0
 800163c:	2b01      	cmp	r3, #1
 800163e:	d1fa      	bne.n	8001636 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff feb1 	bl	80013a8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fec2 	bl	80013d0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800164c:	2002      	movs	r0, #2
 800164e:	f7ff fe8b 	bl	8001368 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	f7ff fe9c 	bl	8001390 <LL_RCC_GetSysClkSource>
 8001658:	0003      	movs	r3, r0
 800165a:	2b08      	cmp	r3, #8
 800165c:	d1fa      	bne.n	8001654 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SystemClock_Config+0x80>)
 8001660:	0018      	movs	r0, r3
 8001662:	f000 fca5 	bl	8001fb0 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <SystemClock_Config+0x80>)
 8001668:	0018      	movs	r0, r3
 800166a:	f000 fcd3 	bl	8002014 <LL_SetSystemCoreClock>
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	02dc6c00 	.word	0x02dc6c00

08001678 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b08f      	sub	sp, #60	; 0x3c
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800167e:	241c      	movs	r4, #28
 8001680:	193b      	adds	r3, r7, r4
 8001682:	0018      	movs	r0, r3
 8001684:	231c      	movs	r3, #28
 8001686:	001a      	movs	r2, r3
 8001688:	2100      	movs	r1, #0
 800168a:	f000 fcfb 	bl	8002084 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	0018      	movs	r0, r3
 8001692:	2318      	movs	r3, #24
 8001694:	001a      	movs	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f000 fcf4 	bl	8002084 <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	02db      	lsls	r3, r3, #11
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff feef 	bl	8001484 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	00d2      	lsls	r2, r2, #3
 80016ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2202      	movs	r2, #2
 80016b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2203      	movs	r2, #3
 80016b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2201      	movs	r2, #1
 80016be:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2201      	movs	r2, #1
 80016c4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2201      	movs	r2, #1
 80016ca:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4a2c      	ldr	r2, [pc, #176]	; (8001780 <MX_I2C2_Init+0x108>)
 80016d0:	0019      	movs	r1, r3
 80016d2:	0010      	movs	r0, r2
 80016d4:	f000 fa60 	bl	8001b98 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2202      	movs	r2, #2
 80016e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2203      	movs	r2, #3
 80016ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2201      	movs	r2, #1
 80016f0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2201      	movs	r2, #1
 80016f6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2201      	movs	r2, #1
 80016fc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <MX_I2C2_Init+0x108>)
 8001702:	0019      	movs	r1, r3
 8001704:	0010      	movs	r0, r2
 8001706:	f000 fa47 	bl	8001b98 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	03db      	lsls	r3, r3, #15
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff fece 	bl	80014b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_I2C2_Init+0x10c>)
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff fdd4 	bl	80012c4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_I2C2_Init+0x10c>)
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff fdaa 	bl	8001278 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_I2C2_Init+0x10c>)
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff fd96 	bl	8001258 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800172c:	0021      	movs	r1, r4
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x2010091A;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <MX_I2C2_Init+0x110>)
 8001738:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001758:	187b      	adds	r3, r7, r1
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <MX_I2C2_Init+0x10c>)
 800175c:	0019      	movs	r1, r3
 800175e:	0010      	movs	r0, r2
 8001760:	f000 fb14 	bl	8001d8c <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_I2C2_Init+0x10c>)
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff fdbc 	bl	80012e4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <MX_I2C2_Init+0x10c>)
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff fd90 	bl	8001298 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b00f      	add	sp, #60	; 0x3c
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	48000400 	.word	0x48000400
 8001784:	40005800 	.word	0x40005800
 8001788:	2010091a 	.word	0x2010091a

0800178c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	0018      	movs	r0, r3
 8001796:	2314      	movs	r3, #20
 8001798:	001a      	movs	r2, r3
 800179a:	2100      	movs	r1, #0
 800179c:	f000 fc72 	bl	8002084 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80017a0:	2010      	movs	r0, #16
 80017a2:	f7ff fe85 	bl	80014b0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	222f      	movs	r2, #47	; 0x2f
 80017aa:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <MX_TIM6_Init+0x5c>)
 80017b6:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <MX_TIM6_Init+0x60>)
 80017bc:	0019      	movs	r1, r3
 80017be:	0010      	movs	r0, r2
 80017c0:	f000 fb5a 	bl	8001e78 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_TIM6_Init+0x60>)
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff febe 	bl	8001548 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_TIM6_Init+0x60>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fec8 	bl	8001566 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <MX_TIM6_Init+0x60>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff fed6 	bl	800158a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b006      	add	sp, #24
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	0000ffff 	.word	0x0000ffff
 80017ec:	40001000 	.word	0x40001000

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	003b      	movs	r3, r7
 80017f8:	0018      	movs	r0, r3
 80017fa:	2318      	movs	r3, #24
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f000 fc40 	bl	8002084 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	02db      	lsls	r3, r3, #11
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff fe3b 	bl	8001484 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	031b      	lsls	r3, r3, #12
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff fe36 	bl	8001484 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff fe31 	bl	8001484 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DHT11_IN_GPIO_Port, DHT11_IN_Pin);
 8001822:	4b40      	ldr	r3, [pc, #256]	; (8001924 <MX_GPIO_Init+0x134>)
 8001824:	2104      	movs	r1, #4
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff febe 	bl	80015a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <MX_GPIO_Init+0x138>)
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff feb9 	bl	80015a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD6_GPIO_Port, LD6_Pin);
 8001836:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <MX_GPIO_Init+0x138>)
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff feb4 	bl	80015a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD4_GPIO_Port, LD4_Pin);
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4a38      	ldr	r2, [pc, #224]	; (8001928 <MX_GPIO_Init+0x138>)
 8001846:	0019      	movs	r1, r3
 8001848:	0010      	movs	r0, r2
 800184a:	f7ff fead 	bl	80015a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DHT11_IN_Pin;
 800184e:	003b      	movs	r3, r7
 8001850:	2204      	movs	r2, #4
 8001852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001854:	003b      	movs	r3, r7
 8001856:	2201      	movs	r2, #1
 8001858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800185a:	003b      	movs	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001860:	003b      	movs	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001866:	003b      	movs	r3, r7
 8001868:	2201      	movs	r2, #1
 800186a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DHT11_IN_GPIO_Port, &GPIO_InitStruct);
 800186c:	003b      	movs	r3, r7
 800186e:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <MX_GPIO_Init+0x134>)
 8001870:	0019      	movs	r1, r3
 8001872:	0010      	movs	r0, r2
 8001874:	f000 f990 	bl	8001b98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8001878:	003b      	movs	r3, r7
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800187e:	003b      	movs	r3, r7
 8001880:	2201      	movs	r2, #1
 8001882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001884:	003b      	movs	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800188a:	003b      	movs	r3, r7
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001890:	003b      	movs	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001896:	003b      	movs	r3, r7
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <MX_GPIO_Init+0x138>)
 800189a:	0019      	movs	r1, r3
 800189c:	0010      	movs	r0, r2
 800189e:	f000 f97b 	bl	8001b98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD6_Pin;
 80018a2:	003b      	movs	r3, r7
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018a8:	003b      	movs	r3, r7
 80018aa:	2201      	movs	r2, #1
 80018ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018ae:	003b      	movs	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b4:	003b      	movs	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ba:	003b      	movs	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 80018c0:	003b      	movs	r3, r7
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <MX_GPIO_Init+0x138>)
 80018c4:	0019      	movs	r1, r3
 80018c6:	0010      	movs	r0, r2
 80018c8:	f000 f966 	bl	8001b98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin;
 80018cc:	003b      	movs	r3, r7
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018d4:	003b      	movs	r3, r7
 80018d6:	2201      	movs	r2, #1
 80018d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018da:	003b      	movs	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018e0:	003b      	movs	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018e6:	003b      	movs	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80018ec:	003b      	movs	r3, r7
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <MX_GPIO_Init+0x138>)
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	f000 f950 	bl	8001b98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 80018f8:	003b      	movs	r3, r7
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	0052      	lsls	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001900:	003b      	movs	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001906:	003b      	movs	r3, r7
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 800190c:	003a      	movs	r2, r7
 800190e:	2390      	movs	r3, #144	; 0x90
 8001910:	05db      	lsls	r3, r3, #23
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f000 f93f 	bl	8001b98 <LL_GPIO_Init>

}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b006      	add	sp, #24
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSL_Tick();
 8001950:	f7ff fc44 	bl	80011dc <BSL_Tick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f000 fb50 	bl	8002030 <__errno>
 8001990:	0003      	movs	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	2301      	movs	r3, #1
 8001998:	425b      	negs	r3, r3
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	18d2      	adds	r2, r2, r3
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <_sbrk+0x64>)
 80019ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b006      	add	sp, #24
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20004000 	.word	0x20004000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	200000ac 	.word	0x200000ac
 80019c4:	20000578 	.word	0x20000578

080019c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80019da:	490e      	ldr	r1, [pc, #56]	; (8001a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <LoopForever+0xe>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f0:	4c0b      	ldr	r4, [pc, #44]	; (8001a20 <LoopForever+0x16>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019fe:	f7ff ffe3 	bl	80019c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a02:	f000 fb1b 	bl	800203c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a06:	f7ff fddb 	bl	80015c0 <main>

08001a0a <LoopForever>:

LoopForever:
    b LoopForever
 8001a0a:	e7fe      	b.n	8001a0a <LoopForever>
  ldr   r0, =_estack
 8001a0c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a18:	0800369c 	.word	0x0800369c
  ldr r2, =_sbss
 8001a1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a20:	20000578 	.word	0x20000578

08001a24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_COMP_IRQHandler>

08001a26 <LL_GPIO_SetPinMode>:
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6819      	ldr	r1, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	435b      	muls	r3, r3
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	189b      	adds	r3, r3, r2
 8001a42:	43db      	mvns	r3, r3
 8001a44:	400b      	ands	r3, r1
 8001a46:	001a      	movs	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	435b      	muls	r3, r3
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	434b      	muls	r3, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b004      	add	sp, #16
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <LL_GPIO_SetPinOutputType>:
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	43d2      	mvns	r2, r2
 8001a72:	401a      	ands	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	434b      	muls	r3, r1
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	605a      	str	r2, [r3, #4]
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <LL_GPIO_SetPinSpeed>:
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6899      	ldr	r1, [r3, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	435b      	muls	r3, r3
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	435b      	muls	r3, r3
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	434b      	muls	r3, r1
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	609a      	str	r2, [r3, #8]
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <LL_GPIO_SetPinPull>:
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	68d9      	ldr	r1, [r3, #12]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	435b      	muls	r3, r3
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	189b      	adds	r3, r3, r2
 8001adc:	43db      	mvns	r3, r3
 8001ade:	400b      	ands	r3, r1
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	435b      	muls	r3, r3
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	434b      	muls	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	60da      	str	r2, [r3, #12]
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <LL_GPIO_SetAFPin_0_7>:
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a19      	ldr	r1, [r3, #32]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	435b      	muls	r3, r3
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	4353      	muls	r3, r2
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	435a      	muls	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	001a      	movs	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	435b      	muls	r3, r3
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	434b      	muls	r3, r1
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	434b      	muls	r3, r1
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	434b      	muls	r3, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	621a      	str	r2, [r3, #32]
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b004      	add	sp, #16
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <LL_GPIO_SetAFPin_8_15>:
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	0a12      	lsrs	r2, r2, #8
 8001b56:	4353      	muls	r3, r2
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	0a12      	lsrs	r2, r2, #8
 8001b5c:	4353      	muls	r3, r2
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	0a12      	lsrs	r2, r2, #8
 8001b62:	435a      	muls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	001a      	movs	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	0a09      	lsrs	r1, r1, #8
 8001b78:	434b      	muls	r3, r1
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	0a09      	lsrs	r1, r1, #8
 8001b7e:	434b      	muls	r3, r1
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	0a09      	lsrs	r1, r1, #8
 8001b84:	434b      	muls	r3, r1
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	434b      	muls	r3, r1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ba6:	e048      	b.n	8001c3a <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4091      	lsls	r1, r2
 8001bb2:	000a      	movs	r2, r1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03a      	beq.n	8001c34 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d003      	beq.n	8001bce <LL_GPIO_Init+0x36>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d10e      	bne.n	8001bec <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff ff56 	bl	8001a88 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff ff39 	bl	8001a5e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff ff63 	bl	8001ac0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d111      	bne.n	8001c26 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2bff      	cmp	r3, #255	; 0xff
 8001c06:	d807      	bhi.n	8001c18 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff ff71 	bl	8001af8 <LL_GPIO_SetAFPin_0_7>
 8001c16:	e006      	b.n	8001c26 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff ff8c 	bl	8001b3e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fef9 	bl	8001a26 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	40da      	lsrs	r2, r3
 8001c42:	1e13      	subs	r3, r2, #0
 8001c44:	d1b0      	bne.n	8001ba8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <LL_I2C_Enable>:
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	601a      	str	r2, [r3, #0]
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <LL_I2C_Disable>:
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	601a      	str	r2, [r3, #0]
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b002      	add	sp, #8
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <LL_I2C_ConfigFilters>:
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <LL_I2C_ConfigFilters+0x2c>)
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0219      	lsls	r1, r3, #8
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	ffffe0ff 	.word	0xffffe0ff

08001cbc <LL_I2C_SetOwnAddress1>:
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	0adb      	lsrs	r3, r3, #11
 8001cce:	02da      	lsls	r2, r3, #11
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	609a      	str	r2, [r3, #8]
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <LL_I2C_EnableOwnAddress1>:
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0212      	lsls	r2, r2, #8
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <LL_I2C_DisableOwnAddress1>:
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <LL_I2C_DisableOwnAddress1+0x1c>)
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	ffff7fff 	.word	0xffff7fff

08001d24 <LL_I2C_SetTiming>:
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	611a      	str	r2, [r3, #16]
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <LL_I2C_SetMode>:
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <LL_I2C_SetMode+0x24>)
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	ffcfffff 	.word	0xffcfffff

08001d64 <LL_I2C_AcknowledgeNextData>:
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <LL_I2C_AcknowledgeNextData+0x24>)
 8001d74:	401a      	ands	r2, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	605a      	str	r2, [r3, #4]
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	ffff7fff 	.word	0xffff7fff

08001d8c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff ff67 	bl	8001c6c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6899      	ldr	r1, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff ff6f 	bl	8001c8c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff ffb4 	bl	8001d24 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff ff46 	bl	8001c50 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff9c 	bl	8001d04 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff ff70 	bl	8001cbc <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff ff7c 	bl	8001ce4 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0011      	movs	r1, r2
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff ffa1 	bl	8001d3c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7ff ffae 	bl	8001d64 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b002      	add	sp, #8
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <LL_TIM_SetPrescaler>:
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <LL_TIM_SetAutoReload>:
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b002      	add	sp, #8
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <LL_TIM_SetRepetitionCounter>:
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <LL_TIM_GenerateEvent_UPDATE>:
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2201      	movs	r2, #1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	615a      	str	r2, [r3, #20]
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a35      	ldr	r2, [pc, #212]	; (8001f60 <LL_TIM_Init+0xe8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d008      	beq.n	8001ea2 <LL_TIM_Init+0x2a>
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	05db      	lsls	r3, r3, #23
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d003      	beq.n	8001ea2 <LL_TIM_Init+0x2a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <LL_TIM_Init+0xec>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d107      	bne.n	8001eb2 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2270      	movs	r2, #112	; 0x70
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <LL_TIM_Init+0xe8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <LL_TIM_Init+0x74>
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	05db      	lsls	r3, r3, #23
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d013      	beq.n	8001eec <LL_TIM_Init+0x74>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <LL_TIM_Init+0xec>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00f      	beq.n	8001eec <LL_TIM_Init+0x74>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <LL_TIM_Init+0xf0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00b      	beq.n	8001eec <LL_TIM_Init+0x74>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <LL_TIM_Init+0xf4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <LL_TIM_Init+0x74>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <LL_TIM_Init+0xf8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <LL_TIM_Init+0x74>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <LL_TIM_Init+0xfc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d106      	bne.n	8001efa <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <LL_TIM_Init+0x100>)
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff ff8e 	bl	8001e2a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	001a      	movs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff ff7a 	bl	8001e12 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <LL_TIM_Init+0xe8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00b      	beq.n	8001f3e <LL_TIM_Init+0xc6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <LL_TIM_Init+0xf4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <LL_TIM_Init+0xc6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <LL_TIM_Init+0xf8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <LL_TIM_Init+0xc6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LL_TIM_Init+0xfc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d106      	bne.n	8001f4c <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0011      	movs	r1, r2
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7ff ff7b 	bl	8001e42 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7ff ff83 	bl	8001e5a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b004      	add	sp, #16
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40002000 	.word	0x40002000
 8001f6c:	40014000 	.word	0x40014000
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40014800 	.word	0x40014800
 8001f78:	fffffcff 	.word	0xfffffcff

08001f7c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe f8c7 	bl	800011c <__udivsi3>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	001a      	movs	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <LL_InitTick+0x30>)
 8001f94:	3a01      	subs	r2, #1
 8001f96:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <LL_InitTick+0x30>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b03      	ldr	r3, [pc, #12]	; (8001fac <LL_InitTick+0x30>)
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001fb8:	23fa      	movs	r3, #250	; 0xfa
 8001fba:	009a      	lsls	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff ffdb 	bl	8001f7c <LL_InitTick>
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <LL_mDelay+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001fde:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	d00c      	beq.n	8002000 <LL_mDelay+0x30>
  {
    Delay++;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001fec:	e008      	b.n	8002000 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <LL_mDelay+0x40>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d002      	beq.n	8002000 <LL_mDelay+0x30>
    {
      Delay--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f3      	bne.n	8001fee <LL_mDelay+0x1e>
    }
  }
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}
 8002010:	e000e010 	.word	0xe000e010

08002014 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <LL_SetSystemCoreClock+0x18>)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	20000008 	.word	0x20000008

08002030 <__errno>:
 8002030:	4b01      	ldr	r3, [pc, #4]	; (8002038 <__errno+0x8>)
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	4770      	bx	lr
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	2000000c 	.word	0x2000000c

0800203c <__libc_init_array>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	2600      	movs	r6, #0
 8002040:	4d0c      	ldr	r5, [pc, #48]	; (8002074 <__libc_init_array+0x38>)
 8002042:	4c0d      	ldr	r4, [pc, #52]	; (8002078 <__libc_init_array+0x3c>)
 8002044:	1b64      	subs	r4, r4, r5
 8002046:	10a4      	asrs	r4, r4, #2
 8002048:	42a6      	cmp	r6, r4
 800204a:	d109      	bne.n	8002060 <__libc_init_array+0x24>
 800204c:	2600      	movs	r6, #0
 800204e:	f000 fc47 	bl	80028e0 <_init>
 8002052:	4d0a      	ldr	r5, [pc, #40]	; (800207c <__libc_init_array+0x40>)
 8002054:	4c0a      	ldr	r4, [pc, #40]	; (8002080 <__libc_init_array+0x44>)
 8002056:	1b64      	subs	r4, r4, r5
 8002058:	10a4      	asrs	r4, r4, #2
 800205a:	42a6      	cmp	r6, r4
 800205c:	d105      	bne.n	800206a <__libc_init_array+0x2e>
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	00b3      	lsls	r3, r6, #2
 8002062:	58eb      	ldr	r3, [r5, r3]
 8002064:	4798      	blx	r3
 8002066:	3601      	adds	r6, #1
 8002068:	e7ee      	b.n	8002048 <__libc_init_array+0xc>
 800206a:	00b3      	lsls	r3, r6, #2
 800206c:	58eb      	ldr	r3, [r5, r3]
 800206e:	4798      	blx	r3
 8002070:	3601      	adds	r6, #1
 8002072:	e7f2      	b.n	800205a <__libc_init_array+0x1e>
 8002074:	08003694 	.word	0x08003694
 8002078:	08003694 	.word	0x08003694
 800207c:	08003694 	.word	0x08003694
 8002080:	08003698 	.word	0x08003698

08002084 <memset>:
 8002084:	0003      	movs	r3, r0
 8002086:	1882      	adds	r2, r0, r2
 8002088:	4293      	cmp	r3, r2
 800208a:	d100      	bne.n	800208e <memset+0xa>
 800208c:	4770      	bx	lr
 800208e:	7019      	strb	r1, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	e7f9      	b.n	8002088 <memset+0x4>

08002094 <siprintf>:
 8002094:	b40e      	push	{r1, r2, r3}
 8002096:	b500      	push	{lr}
 8002098:	490b      	ldr	r1, [pc, #44]	; (80020c8 <siprintf+0x34>)
 800209a:	b09c      	sub	sp, #112	; 0x70
 800209c:	ab1d      	add	r3, sp, #116	; 0x74
 800209e:	9002      	str	r0, [sp, #8]
 80020a0:	9006      	str	r0, [sp, #24]
 80020a2:	9107      	str	r1, [sp, #28]
 80020a4:	9104      	str	r1, [sp, #16]
 80020a6:	4809      	ldr	r0, [pc, #36]	; (80020cc <siprintf+0x38>)
 80020a8:	4909      	ldr	r1, [pc, #36]	; (80020d0 <siprintf+0x3c>)
 80020aa:	cb04      	ldmia	r3!, {r2}
 80020ac:	9105      	str	r1, [sp, #20]
 80020ae:	6800      	ldr	r0, [r0, #0]
 80020b0:	a902      	add	r1, sp, #8
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	f000 f870 	bl	8002198 <_svfiprintf_r>
 80020b8:	2300      	movs	r3, #0
 80020ba:	9a02      	ldr	r2, [sp, #8]
 80020bc:	7013      	strb	r3, [r2, #0]
 80020be:	b01c      	add	sp, #112	; 0x70
 80020c0:	bc08      	pop	{r3}
 80020c2:	b003      	add	sp, #12
 80020c4:	4718      	bx	r3
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	7fffffff 	.word	0x7fffffff
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	ffff0208 	.word	0xffff0208

080020d4 <__ssputs_r>:
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	688e      	ldr	r6, [r1, #8]
 80020d8:	b085      	sub	sp, #20
 80020da:	0007      	movs	r7, r0
 80020dc:	000c      	movs	r4, r1
 80020de:	9203      	str	r2, [sp, #12]
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	429e      	cmp	r6, r3
 80020e4:	d83c      	bhi.n	8002160 <__ssputs_r+0x8c>
 80020e6:	2390      	movs	r3, #144	; 0x90
 80020e8:	898a      	ldrh	r2, [r1, #12]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	421a      	tst	r2, r3
 80020ee:	d034      	beq.n	800215a <__ssputs_r+0x86>
 80020f0:	2503      	movs	r5, #3
 80020f2:	6909      	ldr	r1, [r1, #16]
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	1a5b      	subs	r3, r3, r1
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	6963      	ldr	r3, [r4, #20]
 80020fc:	9802      	ldr	r0, [sp, #8]
 80020fe:	435d      	muls	r5, r3
 8002100:	0feb      	lsrs	r3, r5, #31
 8002102:	195d      	adds	r5, r3, r5
 8002104:	9b01      	ldr	r3, [sp, #4]
 8002106:	106d      	asrs	r5, r5, #1
 8002108:	3301      	adds	r3, #1
 800210a:	181b      	adds	r3, r3, r0
 800210c:	42ab      	cmp	r3, r5
 800210e:	d900      	bls.n	8002112 <__ssputs_r+0x3e>
 8002110:	001d      	movs	r5, r3
 8002112:	0553      	lsls	r3, r2, #21
 8002114:	d532      	bpl.n	800217c <__ssputs_r+0xa8>
 8002116:	0029      	movs	r1, r5
 8002118:	0038      	movs	r0, r7
 800211a:	f000 fb31 	bl	8002780 <_malloc_r>
 800211e:	1e06      	subs	r6, r0, #0
 8002120:	d109      	bne.n	8002136 <__ssputs_r+0x62>
 8002122:	230c      	movs	r3, #12
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	2340      	movs	r3, #64	; 0x40
 8002128:	2001      	movs	r0, #1
 800212a:	89a2      	ldrh	r2, [r4, #12]
 800212c:	4240      	negs	r0, r0
 800212e:	4313      	orrs	r3, r2
 8002130:	81a3      	strh	r3, [r4, #12]
 8002132:	b005      	add	sp, #20
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	9a02      	ldr	r2, [sp, #8]
 8002138:	6921      	ldr	r1, [r4, #16]
 800213a:	f000 faba 	bl	80026b2 <memcpy>
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <__ssputs_r+0xc0>)
 8002142:	401a      	ands	r2, r3
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	4313      	orrs	r3, r2
 8002148:	81a3      	strh	r3, [r4, #12]
 800214a:	9b02      	ldr	r3, [sp, #8]
 800214c:	6126      	str	r6, [r4, #16]
 800214e:	18f6      	adds	r6, r6, r3
 8002150:	6026      	str	r6, [r4, #0]
 8002152:	6165      	str	r5, [r4, #20]
 8002154:	9e01      	ldr	r6, [sp, #4]
 8002156:	1aed      	subs	r5, r5, r3
 8002158:	60a5      	str	r5, [r4, #8]
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	429e      	cmp	r6, r3
 800215e:	d900      	bls.n	8002162 <__ssputs_r+0x8e>
 8002160:	9e01      	ldr	r6, [sp, #4]
 8002162:	0032      	movs	r2, r6
 8002164:	9903      	ldr	r1, [sp, #12]
 8002166:	6820      	ldr	r0, [r4, #0]
 8002168:	f000 faac 	bl	80026c4 <memmove>
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	2000      	movs	r0, #0
 8002170:	1b9b      	subs	r3, r3, r6
 8002172:	60a3      	str	r3, [r4, #8]
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	199e      	adds	r6, r3, r6
 8002178:	6026      	str	r6, [r4, #0]
 800217a:	e7da      	b.n	8002132 <__ssputs_r+0x5e>
 800217c:	002a      	movs	r2, r5
 800217e:	0038      	movs	r0, r7
 8002180:	f000 fb5c 	bl	800283c <_realloc_r>
 8002184:	1e06      	subs	r6, r0, #0
 8002186:	d1e0      	bne.n	800214a <__ssputs_r+0x76>
 8002188:	0038      	movs	r0, r7
 800218a:	6921      	ldr	r1, [r4, #16]
 800218c:	f000 faae 	bl	80026ec <_free_r>
 8002190:	e7c7      	b.n	8002122 <__ssputs_r+0x4e>
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	fffffb7f 	.word	0xfffffb7f

08002198 <_svfiprintf_r>:
 8002198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219a:	b0a1      	sub	sp, #132	; 0x84
 800219c:	9003      	str	r0, [sp, #12]
 800219e:	001d      	movs	r5, r3
 80021a0:	898b      	ldrh	r3, [r1, #12]
 80021a2:	000f      	movs	r7, r1
 80021a4:	0016      	movs	r6, r2
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	d511      	bpl.n	80021ce <_svfiprintf_r+0x36>
 80021aa:	690b      	ldr	r3, [r1, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10e      	bne.n	80021ce <_svfiprintf_r+0x36>
 80021b0:	2140      	movs	r1, #64	; 0x40
 80021b2:	f000 fae5 	bl	8002780 <_malloc_r>
 80021b6:	6038      	str	r0, [r7, #0]
 80021b8:	6138      	str	r0, [r7, #16]
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d105      	bne.n	80021ca <_svfiprintf_r+0x32>
 80021be:	230c      	movs	r3, #12
 80021c0:	9a03      	ldr	r2, [sp, #12]
 80021c2:	3801      	subs	r0, #1
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	b021      	add	sp, #132	; 0x84
 80021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ca:	2340      	movs	r3, #64	; 0x40
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	2300      	movs	r3, #0
 80021d0:	ac08      	add	r4, sp, #32
 80021d2:	6163      	str	r3, [r4, #20]
 80021d4:	3320      	adds	r3, #32
 80021d6:	7663      	strb	r3, [r4, #25]
 80021d8:	3310      	adds	r3, #16
 80021da:	76a3      	strb	r3, [r4, #26]
 80021dc:	9507      	str	r5, [sp, #28]
 80021de:	0035      	movs	r5, r6
 80021e0:	782b      	ldrb	r3, [r5, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <_svfiprintf_r+0x52>
 80021e6:	2b25      	cmp	r3, #37	; 0x25
 80021e8:	d147      	bne.n	800227a <_svfiprintf_r+0xe2>
 80021ea:	1bab      	subs	r3, r5, r6
 80021ec:	9305      	str	r3, [sp, #20]
 80021ee:	42b5      	cmp	r5, r6
 80021f0:	d00c      	beq.n	800220c <_svfiprintf_r+0x74>
 80021f2:	0032      	movs	r2, r6
 80021f4:	0039      	movs	r1, r7
 80021f6:	9803      	ldr	r0, [sp, #12]
 80021f8:	f7ff ff6c 	bl	80020d4 <__ssputs_r>
 80021fc:	1c43      	adds	r3, r0, #1
 80021fe:	d100      	bne.n	8002202 <_svfiprintf_r+0x6a>
 8002200:	e0ae      	b.n	8002360 <_svfiprintf_r+0x1c8>
 8002202:	6962      	ldr	r2, [r4, #20]
 8002204:	9b05      	ldr	r3, [sp, #20]
 8002206:	4694      	mov	ip, r2
 8002208:	4463      	add	r3, ip
 800220a:	6163      	str	r3, [r4, #20]
 800220c:	782b      	ldrb	r3, [r5, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d100      	bne.n	8002214 <_svfiprintf_r+0x7c>
 8002212:	e0a5      	b.n	8002360 <_svfiprintf_r+0x1c8>
 8002214:	2201      	movs	r2, #1
 8002216:	2300      	movs	r3, #0
 8002218:	4252      	negs	r2, r2
 800221a:	6062      	str	r2, [r4, #4]
 800221c:	a904      	add	r1, sp, #16
 800221e:	3254      	adds	r2, #84	; 0x54
 8002220:	1852      	adds	r2, r2, r1
 8002222:	1c6e      	adds	r6, r5, #1
 8002224:	6023      	str	r3, [r4, #0]
 8002226:	60e3      	str	r3, [r4, #12]
 8002228:	60a3      	str	r3, [r4, #8]
 800222a:	7013      	strb	r3, [r2, #0]
 800222c:	65a3      	str	r3, [r4, #88]	; 0x58
 800222e:	2205      	movs	r2, #5
 8002230:	7831      	ldrb	r1, [r6, #0]
 8002232:	4854      	ldr	r0, [pc, #336]	; (8002384 <_svfiprintf_r+0x1ec>)
 8002234:	f000 fa32 	bl	800269c <memchr>
 8002238:	1c75      	adds	r5, r6, #1
 800223a:	2800      	cmp	r0, #0
 800223c:	d11f      	bne.n	800227e <_svfiprintf_r+0xe6>
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	06d3      	lsls	r3, r2, #27
 8002242:	d504      	bpl.n	800224e <_svfiprintf_r+0xb6>
 8002244:	2353      	movs	r3, #83	; 0x53
 8002246:	a904      	add	r1, sp, #16
 8002248:	185b      	adds	r3, r3, r1
 800224a:	2120      	movs	r1, #32
 800224c:	7019      	strb	r1, [r3, #0]
 800224e:	0713      	lsls	r3, r2, #28
 8002250:	d504      	bpl.n	800225c <_svfiprintf_r+0xc4>
 8002252:	2353      	movs	r3, #83	; 0x53
 8002254:	a904      	add	r1, sp, #16
 8002256:	185b      	adds	r3, r3, r1
 8002258:	212b      	movs	r1, #43	; 0x2b
 800225a:	7019      	strb	r1, [r3, #0]
 800225c:	7833      	ldrb	r3, [r6, #0]
 800225e:	2b2a      	cmp	r3, #42	; 0x2a
 8002260:	d016      	beq.n	8002290 <_svfiprintf_r+0xf8>
 8002262:	0035      	movs	r5, r6
 8002264:	2100      	movs	r1, #0
 8002266:	200a      	movs	r0, #10
 8002268:	68e3      	ldr	r3, [r4, #12]
 800226a:	782a      	ldrb	r2, [r5, #0]
 800226c:	1c6e      	adds	r6, r5, #1
 800226e:	3a30      	subs	r2, #48	; 0x30
 8002270:	2a09      	cmp	r2, #9
 8002272:	d94e      	bls.n	8002312 <_svfiprintf_r+0x17a>
 8002274:	2900      	cmp	r1, #0
 8002276:	d111      	bne.n	800229c <_svfiprintf_r+0x104>
 8002278:	e017      	b.n	80022aa <_svfiprintf_r+0x112>
 800227a:	3501      	adds	r5, #1
 800227c:	e7b0      	b.n	80021e0 <_svfiprintf_r+0x48>
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <_svfiprintf_r+0x1ec>)
 8002280:	6822      	ldr	r2, [r4, #0]
 8002282:	1ac0      	subs	r0, r0, r3
 8002284:	2301      	movs	r3, #1
 8002286:	4083      	lsls	r3, r0
 8002288:	4313      	orrs	r3, r2
 800228a:	002e      	movs	r6, r5
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	e7ce      	b.n	800222e <_svfiprintf_r+0x96>
 8002290:	9b07      	ldr	r3, [sp, #28]
 8002292:	1d19      	adds	r1, r3, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	9107      	str	r1, [sp, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db01      	blt.n	80022a0 <_svfiprintf_r+0x108>
 800229c:	930b      	str	r3, [sp, #44]	; 0x2c
 800229e:	e004      	b.n	80022aa <_svfiprintf_r+0x112>
 80022a0:	425b      	negs	r3, r3
 80022a2:	60e3      	str	r3, [r4, #12]
 80022a4:	2302      	movs	r3, #2
 80022a6:	4313      	orrs	r3, r2
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	782b      	ldrb	r3, [r5, #0]
 80022ac:	2b2e      	cmp	r3, #46	; 0x2e
 80022ae:	d10a      	bne.n	80022c6 <_svfiprintf_r+0x12e>
 80022b0:	786b      	ldrb	r3, [r5, #1]
 80022b2:	2b2a      	cmp	r3, #42	; 0x2a
 80022b4:	d135      	bne.n	8002322 <_svfiprintf_r+0x18a>
 80022b6:	9b07      	ldr	r3, [sp, #28]
 80022b8:	3502      	adds	r5, #2
 80022ba:	1d1a      	adds	r2, r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	9207      	str	r2, [sp, #28]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db2b      	blt.n	800231c <_svfiprintf_r+0x184>
 80022c4:	9309      	str	r3, [sp, #36]	; 0x24
 80022c6:	4e30      	ldr	r6, [pc, #192]	; (8002388 <_svfiprintf_r+0x1f0>)
 80022c8:	2203      	movs	r2, #3
 80022ca:	0030      	movs	r0, r6
 80022cc:	7829      	ldrb	r1, [r5, #0]
 80022ce:	f000 f9e5 	bl	800269c <memchr>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d006      	beq.n	80022e4 <_svfiprintf_r+0x14c>
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	1b80      	subs	r0, r0, r6
 80022da:	4083      	lsls	r3, r0
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	3501      	adds	r5, #1
 80022e0:	4313      	orrs	r3, r2
 80022e2:	6023      	str	r3, [r4, #0]
 80022e4:	7829      	ldrb	r1, [r5, #0]
 80022e6:	2206      	movs	r2, #6
 80022e8:	4828      	ldr	r0, [pc, #160]	; (800238c <_svfiprintf_r+0x1f4>)
 80022ea:	1c6e      	adds	r6, r5, #1
 80022ec:	7621      	strb	r1, [r4, #24]
 80022ee:	f000 f9d5 	bl	800269c <memchr>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d03c      	beq.n	8002370 <_svfiprintf_r+0x1d8>
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <_svfiprintf_r+0x1f8>)
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d125      	bne.n	8002348 <_svfiprintf_r+0x1b0>
 80022fc:	2207      	movs	r2, #7
 80022fe:	9b07      	ldr	r3, [sp, #28]
 8002300:	3307      	adds	r3, #7
 8002302:	4393      	bics	r3, r2
 8002304:	3308      	adds	r3, #8
 8002306:	9307      	str	r3, [sp, #28]
 8002308:	6963      	ldr	r3, [r4, #20]
 800230a:	9a04      	ldr	r2, [sp, #16]
 800230c:	189b      	adds	r3, r3, r2
 800230e:	6163      	str	r3, [r4, #20]
 8002310:	e765      	b.n	80021de <_svfiprintf_r+0x46>
 8002312:	4343      	muls	r3, r0
 8002314:	0035      	movs	r5, r6
 8002316:	2101      	movs	r1, #1
 8002318:	189b      	adds	r3, r3, r2
 800231a:	e7a6      	b.n	800226a <_svfiprintf_r+0xd2>
 800231c:	2301      	movs	r3, #1
 800231e:	425b      	negs	r3, r3
 8002320:	e7d0      	b.n	80022c4 <_svfiprintf_r+0x12c>
 8002322:	2300      	movs	r3, #0
 8002324:	200a      	movs	r0, #10
 8002326:	001a      	movs	r2, r3
 8002328:	3501      	adds	r5, #1
 800232a:	6063      	str	r3, [r4, #4]
 800232c:	7829      	ldrb	r1, [r5, #0]
 800232e:	1c6e      	adds	r6, r5, #1
 8002330:	3930      	subs	r1, #48	; 0x30
 8002332:	2909      	cmp	r1, #9
 8002334:	d903      	bls.n	800233e <_svfiprintf_r+0x1a6>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0c5      	beq.n	80022c6 <_svfiprintf_r+0x12e>
 800233a:	9209      	str	r2, [sp, #36]	; 0x24
 800233c:	e7c3      	b.n	80022c6 <_svfiprintf_r+0x12e>
 800233e:	4342      	muls	r2, r0
 8002340:	0035      	movs	r5, r6
 8002342:	2301      	movs	r3, #1
 8002344:	1852      	adds	r2, r2, r1
 8002346:	e7f1      	b.n	800232c <_svfiprintf_r+0x194>
 8002348:	ab07      	add	r3, sp, #28
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	003a      	movs	r2, r7
 800234e:	0021      	movs	r1, r4
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <_svfiprintf_r+0x1fc>)
 8002352:	9803      	ldr	r0, [sp, #12]
 8002354:	e000      	b.n	8002358 <_svfiprintf_r+0x1c0>
 8002356:	bf00      	nop
 8002358:	9004      	str	r0, [sp, #16]
 800235a:	9b04      	ldr	r3, [sp, #16]
 800235c:	3301      	adds	r3, #1
 800235e:	d1d3      	bne.n	8002308 <_svfiprintf_r+0x170>
 8002360:	89bb      	ldrh	r3, [r7, #12]
 8002362:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002364:	065b      	lsls	r3, r3, #25
 8002366:	d400      	bmi.n	800236a <_svfiprintf_r+0x1d2>
 8002368:	e72d      	b.n	80021c6 <_svfiprintf_r+0x2e>
 800236a:	2001      	movs	r0, #1
 800236c:	4240      	negs	r0, r0
 800236e:	e72a      	b.n	80021c6 <_svfiprintf_r+0x2e>
 8002370:	ab07      	add	r3, sp, #28
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	003a      	movs	r2, r7
 8002376:	0021      	movs	r1, r4
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <_svfiprintf_r+0x1fc>)
 800237a:	9803      	ldr	r0, [sp, #12]
 800237c:	f000 f87c 	bl	8002478 <_printf_i>
 8002380:	e7ea      	b.n	8002358 <_svfiprintf_r+0x1c0>
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	08003660 	.word	0x08003660
 8002388:	08003666 	.word	0x08003666
 800238c:	0800366a 	.word	0x0800366a
 8002390:	00000000 	.word	0x00000000
 8002394:	080020d5 	.word	0x080020d5

08002398 <_printf_common>:
 8002398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800239a:	0015      	movs	r5, r2
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	688a      	ldr	r2, [r1, #8]
 80023a0:	690b      	ldr	r3, [r1, #16]
 80023a2:	000c      	movs	r4, r1
 80023a4:	9000      	str	r0, [sp, #0]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	da00      	bge.n	80023ac <_printf_common+0x14>
 80023aa:	0013      	movs	r3, r2
 80023ac:	0022      	movs	r2, r4
 80023ae:	602b      	str	r3, [r5, #0]
 80023b0:	3243      	adds	r2, #67	; 0x43
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	d001      	beq.n	80023bc <_printf_common+0x24>
 80023b8:	3301      	adds	r3, #1
 80023ba:	602b      	str	r3, [r5, #0]
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	d502      	bpl.n	80023c8 <_printf_common+0x30>
 80023c2:	682b      	ldr	r3, [r5, #0]
 80023c4:	3302      	adds	r3, #2
 80023c6:	602b      	str	r3, [r5, #0]
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	2306      	movs	r3, #6
 80023cc:	0017      	movs	r7, r2
 80023ce:	401f      	ands	r7, r3
 80023d0:	421a      	tst	r2, r3
 80023d2:	d027      	beq.n	8002424 <_printf_common+0x8c>
 80023d4:	0023      	movs	r3, r4
 80023d6:	3343      	adds	r3, #67	; 0x43
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	4193      	sbcs	r3, r2
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	0692      	lsls	r2, r2, #26
 80023e2:	d430      	bmi.n	8002446 <_printf_common+0xae>
 80023e4:	0022      	movs	r2, r4
 80023e6:	9901      	ldr	r1, [sp, #4]
 80023e8:	9800      	ldr	r0, [sp, #0]
 80023ea:	9e08      	ldr	r6, [sp, #32]
 80023ec:	3243      	adds	r2, #67	; 0x43
 80023ee:	47b0      	blx	r6
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d025      	beq.n	8002440 <_printf_common+0xa8>
 80023f4:	2306      	movs	r3, #6
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	682a      	ldr	r2, [r5, #0]
 80023fa:	68e1      	ldr	r1, [r4, #12]
 80023fc:	2500      	movs	r5, #0
 80023fe:	4003      	ands	r3, r0
 8002400:	2b04      	cmp	r3, #4
 8002402:	d103      	bne.n	800240c <_printf_common+0x74>
 8002404:	1a8d      	subs	r5, r1, r2
 8002406:	43eb      	mvns	r3, r5
 8002408:	17db      	asrs	r3, r3, #31
 800240a:	401d      	ands	r5, r3
 800240c:	68a3      	ldr	r3, [r4, #8]
 800240e:	6922      	ldr	r2, [r4, #16]
 8002410:	4293      	cmp	r3, r2
 8002412:	dd01      	ble.n	8002418 <_printf_common+0x80>
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	18ed      	adds	r5, r5, r3
 8002418:	2700      	movs	r7, #0
 800241a:	42bd      	cmp	r5, r7
 800241c:	d120      	bne.n	8002460 <_printf_common+0xc8>
 800241e:	2000      	movs	r0, #0
 8002420:	e010      	b.n	8002444 <_printf_common+0xac>
 8002422:	3701      	adds	r7, #1
 8002424:	68e3      	ldr	r3, [r4, #12]
 8002426:	682a      	ldr	r2, [r5, #0]
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	42bb      	cmp	r3, r7
 800242c:	ddd2      	ble.n	80023d4 <_printf_common+0x3c>
 800242e:	0022      	movs	r2, r4
 8002430:	2301      	movs	r3, #1
 8002432:	9901      	ldr	r1, [sp, #4]
 8002434:	9800      	ldr	r0, [sp, #0]
 8002436:	9e08      	ldr	r6, [sp, #32]
 8002438:	3219      	adds	r2, #25
 800243a:	47b0      	blx	r6
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d1f0      	bne.n	8002422 <_printf_common+0x8a>
 8002440:	2001      	movs	r0, #1
 8002442:	4240      	negs	r0, r0
 8002444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002446:	2030      	movs	r0, #48	; 0x30
 8002448:	18e1      	adds	r1, r4, r3
 800244a:	3143      	adds	r1, #67	; 0x43
 800244c:	7008      	strb	r0, [r1, #0]
 800244e:	0021      	movs	r1, r4
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	3145      	adds	r1, #69	; 0x45
 8002454:	7809      	ldrb	r1, [r1, #0]
 8002456:	18a2      	adds	r2, r4, r2
 8002458:	3243      	adds	r2, #67	; 0x43
 800245a:	3302      	adds	r3, #2
 800245c:	7011      	strb	r1, [r2, #0]
 800245e:	e7c1      	b.n	80023e4 <_printf_common+0x4c>
 8002460:	0022      	movs	r2, r4
 8002462:	2301      	movs	r3, #1
 8002464:	9901      	ldr	r1, [sp, #4]
 8002466:	9800      	ldr	r0, [sp, #0]
 8002468:	9e08      	ldr	r6, [sp, #32]
 800246a:	321a      	adds	r2, #26
 800246c:	47b0      	blx	r6
 800246e:	1c43      	adds	r3, r0, #1
 8002470:	d0e6      	beq.n	8002440 <_printf_common+0xa8>
 8002472:	3701      	adds	r7, #1
 8002474:	e7d1      	b.n	800241a <_printf_common+0x82>
	...

08002478 <_printf_i>:
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b08b      	sub	sp, #44	; 0x2c
 800247c:	9206      	str	r2, [sp, #24]
 800247e:	000a      	movs	r2, r1
 8002480:	3243      	adds	r2, #67	; 0x43
 8002482:	9307      	str	r3, [sp, #28]
 8002484:	9005      	str	r0, [sp, #20]
 8002486:	9204      	str	r2, [sp, #16]
 8002488:	7e0a      	ldrb	r2, [r1, #24]
 800248a:	000c      	movs	r4, r1
 800248c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800248e:	2a78      	cmp	r2, #120	; 0x78
 8002490:	d806      	bhi.n	80024a0 <_printf_i+0x28>
 8002492:	2a62      	cmp	r2, #98	; 0x62
 8002494:	d808      	bhi.n	80024a8 <_printf_i+0x30>
 8002496:	2a00      	cmp	r2, #0
 8002498:	d100      	bne.n	800249c <_printf_i+0x24>
 800249a:	e0c0      	b.n	800261e <_printf_i+0x1a6>
 800249c:	2a58      	cmp	r2, #88	; 0x58
 800249e:	d052      	beq.n	8002546 <_printf_i+0xce>
 80024a0:	0026      	movs	r6, r4
 80024a2:	3642      	adds	r6, #66	; 0x42
 80024a4:	7032      	strb	r2, [r6, #0]
 80024a6:	e022      	b.n	80024ee <_printf_i+0x76>
 80024a8:	0010      	movs	r0, r2
 80024aa:	3863      	subs	r0, #99	; 0x63
 80024ac:	2815      	cmp	r0, #21
 80024ae:	d8f7      	bhi.n	80024a0 <_printf_i+0x28>
 80024b0:	f7fd fe2a 	bl	8000108 <__gnu_thumb1_case_shi>
 80024b4:	001f0016 	.word	0x001f0016
 80024b8:	fff6fff6 	.word	0xfff6fff6
 80024bc:	fff6fff6 	.word	0xfff6fff6
 80024c0:	fff6001f 	.word	0xfff6001f
 80024c4:	fff6fff6 	.word	0xfff6fff6
 80024c8:	00a8fff6 	.word	0x00a8fff6
 80024cc:	009a0036 	.word	0x009a0036
 80024d0:	fff6fff6 	.word	0xfff6fff6
 80024d4:	fff600b9 	.word	0xfff600b9
 80024d8:	fff60036 	.word	0xfff60036
 80024dc:	009efff6 	.word	0x009efff6
 80024e0:	0026      	movs	r6, r4
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	3642      	adds	r6, #66	; 0x42
 80024e6:	1d11      	adds	r1, r2, #4
 80024e8:	6019      	str	r1, [r3, #0]
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	7033      	strb	r3, [r6, #0]
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0a7      	b.n	8002642 <_printf_i+0x1ca>
 80024f2:	6808      	ldr	r0, [r1, #0]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	1d0a      	adds	r2, r1, #4
 80024f8:	0605      	lsls	r5, r0, #24
 80024fa:	d50b      	bpl.n	8002514 <_printf_i+0x9c>
 80024fc:	680d      	ldr	r5, [r1, #0]
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	2d00      	cmp	r5, #0
 8002502:	da03      	bge.n	800250c <_printf_i+0x94>
 8002504:	232d      	movs	r3, #45	; 0x2d
 8002506:	9a04      	ldr	r2, [sp, #16]
 8002508:	426d      	negs	r5, r5
 800250a:	7013      	strb	r3, [r2, #0]
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <_printf_i+0x21c>)
 800250e:	270a      	movs	r7, #10
 8002510:	9303      	str	r3, [sp, #12]
 8002512:	e032      	b.n	800257a <_printf_i+0x102>
 8002514:	680d      	ldr	r5, [r1, #0]
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	0641      	lsls	r1, r0, #25
 800251a:	d5f1      	bpl.n	8002500 <_printf_i+0x88>
 800251c:	b22d      	sxth	r5, r5
 800251e:	e7ef      	b.n	8002500 <_printf_i+0x88>
 8002520:	680d      	ldr	r5, [r1, #0]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	1d08      	adds	r0, r1, #4
 8002526:	6018      	str	r0, [r3, #0]
 8002528:	062e      	lsls	r6, r5, #24
 800252a:	d501      	bpl.n	8002530 <_printf_i+0xb8>
 800252c:	680d      	ldr	r5, [r1, #0]
 800252e:	e003      	b.n	8002538 <_printf_i+0xc0>
 8002530:	066d      	lsls	r5, r5, #25
 8002532:	d5fb      	bpl.n	800252c <_printf_i+0xb4>
 8002534:	680d      	ldr	r5, [r1, #0]
 8002536:	b2ad      	uxth	r5, r5
 8002538:	4b56      	ldr	r3, [pc, #344]	; (8002694 <_printf_i+0x21c>)
 800253a:	270a      	movs	r7, #10
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	2a6f      	cmp	r2, #111	; 0x6f
 8002540:	d117      	bne.n	8002572 <_printf_i+0xfa>
 8002542:	2708      	movs	r7, #8
 8002544:	e015      	b.n	8002572 <_printf_i+0xfa>
 8002546:	3145      	adds	r1, #69	; 0x45
 8002548:	700a      	strb	r2, [r1, #0]
 800254a:	4a52      	ldr	r2, [pc, #328]	; (8002694 <_printf_i+0x21c>)
 800254c:	9203      	str	r2, [sp, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	6821      	ldr	r1, [r4, #0]
 8002552:	ca20      	ldmia	r2!, {r5}
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	0608      	lsls	r0, r1, #24
 8002558:	d550      	bpl.n	80025fc <_printf_i+0x184>
 800255a:	07cb      	lsls	r3, r1, #31
 800255c:	d502      	bpl.n	8002564 <_printf_i+0xec>
 800255e:	2320      	movs	r3, #32
 8002560:	4319      	orrs	r1, r3
 8002562:	6021      	str	r1, [r4, #0]
 8002564:	2710      	movs	r7, #16
 8002566:	2d00      	cmp	r5, #0
 8002568:	d103      	bne.n	8002572 <_printf_i+0xfa>
 800256a:	2320      	movs	r3, #32
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	439a      	bics	r2, r3
 8002570:	6022      	str	r2, [r4, #0]
 8002572:	0023      	movs	r3, r4
 8002574:	2200      	movs	r2, #0
 8002576:	3343      	adds	r3, #67	; 0x43
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	6863      	ldr	r3, [r4, #4]
 800257c:	60a3      	str	r3, [r4, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db03      	blt.n	800258a <_printf_i+0x112>
 8002582:	2204      	movs	r2, #4
 8002584:	6821      	ldr	r1, [r4, #0]
 8002586:	4391      	bics	r1, r2
 8002588:	6021      	str	r1, [r4, #0]
 800258a:	2d00      	cmp	r5, #0
 800258c:	d102      	bne.n	8002594 <_printf_i+0x11c>
 800258e:	9e04      	ldr	r6, [sp, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <_printf_i+0x136>
 8002594:	9e04      	ldr	r6, [sp, #16]
 8002596:	0028      	movs	r0, r5
 8002598:	0039      	movs	r1, r7
 800259a:	f7fd fe45 	bl	8000228 <__aeabi_uidivmod>
 800259e:	9b03      	ldr	r3, [sp, #12]
 80025a0:	3e01      	subs	r6, #1
 80025a2:	5c5b      	ldrb	r3, [r3, r1]
 80025a4:	7033      	strb	r3, [r6, #0]
 80025a6:	002b      	movs	r3, r5
 80025a8:	0005      	movs	r5, r0
 80025aa:	429f      	cmp	r7, r3
 80025ac:	d9f3      	bls.n	8002596 <_printf_i+0x11e>
 80025ae:	2f08      	cmp	r7, #8
 80025b0:	d109      	bne.n	80025c6 <_printf_i+0x14e>
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	07db      	lsls	r3, r3, #31
 80025b6:	d506      	bpl.n	80025c6 <_printf_i+0x14e>
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	6922      	ldr	r2, [r4, #16]
 80025bc:	4293      	cmp	r3, r2
 80025be:	dc02      	bgt.n	80025c6 <_printf_i+0x14e>
 80025c0:	2330      	movs	r3, #48	; 0x30
 80025c2:	3e01      	subs	r6, #1
 80025c4:	7033      	strb	r3, [r6, #0]
 80025c6:	9b04      	ldr	r3, [sp, #16]
 80025c8:	1b9b      	subs	r3, r3, r6
 80025ca:	6123      	str	r3, [r4, #16]
 80025cc:	9b07      	ldr	r3, [sp, #28]
 80025ce:	0021      	movs	r1, r4
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	9805      	ldr	r0, [sp, #20]
 80025d4:	9b06      	ldr	r3, [sp, #24]
 80025d6:	aa09      	add	r2, sp, #36	; 0x24
 80025d8:	f7ff fede 	bl	8002398 <_printf_common>
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d135      	bne.n	800264c <_printf_i+0x1d4>
 80025e0:	2001      	movs	r0, #1
 80025e2:	4240      	negs	r0, r0
 80025e4:	b00b      	add	sp, #44	; 0x2c
 80025e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e8:	2220      	movs	r2, #32
 80025ea:	6809      	ldr	r1, [r1, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	6022      	str	r2, [r4, #0]
 80025f0:	0022      	movs	r2, r4
 80025f2:	2178      	movs	r1, #120	; 0x78
 80025f4:	3245      	adds	r2, #69	; 0x45
 80025f6:	7011      	strb	r1, [r2, #0]
 80025f8:	4a27      	ldr	r2, [pc, #156]	; (8002698 <_printf_i+0x220>)
 80025fa:	e7a7      	b.n	800254c <_printf_i+0xd4>
 80025fc:	0648      	lsls	r0, r1, #25
 80025fe:	d5ac      	bpl.n	800255a <_printf_i+0xe2>
 8002600:	b2ad      	uxth	r5, r5
 8002602:	e7aa      	b.n	800255a <_printf_i+0xe2>
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	680d      	ldr	r5, [r1, #0]
 8002608:	1d10      	adds	r0, r2, #4
 800260a:	6949      	ldr	r1, [r1, #20]
 800260c:	6018      	str	r0, [r3, #0]
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	062e      	lsls	r6, r5, #24
 8002612:	d501      	bpl.n	8002618 <_printf_i+0x1a0>
 8002614:	6019      	str	r1, [r3, #0]
 8002616:	e002      	b.n	800261e <_printf_i+0x1a6>
 8002618:	066d      	lsls	r5, r5, #25
 800261a:	d5fb      	bpl.n	8002614 <_printf_i+0x19c>
 800261c:	8019      	strh	r1, [r3, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	9e04      	ldr	r6, [sp, #16]
 8002622:	6123      	str	r3, [r4, #16]
 8002624:	e7d2      	b.n	80025cc <_printf_i+0x154>
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	1d11      	adds	r1, r2, #4
 800262a:	6019      	str	r1, [r3, #0]
 800262c:	6816      	ldr	r6, [r2, #0]
 800262e:	2100      	movs	r1, #0
 8002630:	0030      	movs	r0, r6
 8002632:	6862      	ldr	r2, [r4, #4]
 8002634:	f000 f832 	bl	800269c <memchr>
 8002638:	2800      	cmp	r0, #0
 800263a:	d001      	beq.n	8002640 <_printf_i+0x1c8>
 800263c:	1b80      	subs	r0, r0, r6
 800263e:	6060      	str	r0, [r4, #4]
 8002640:	6863      	ldr	r3, [r4, #4]
 8002642:	6123      	str	r3, [r4, #16]
 8002644:	2300      	movs	r3, #0
 8002646:	9a04      	ldr	r2, [sp, #16]
 8002648:	7013      	strb	r3, [r2, #0]
 800264a:	e7bf      	b.n	80025cc <_printf_i+0x154>
 800264c:	6923      	ldr	r3, [r4, #16]
 800264e:	0032      	movs	r2, r6
 8002650:	9906      	ldr	r1, [sp, #24]
 8002652:	9805      	ldr	r0, [sp, #20]
 8002654:	9d07      	ldr	r5, [sp, #28]
 8002656:	47a8      	blx	r5
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	d0c1      	beq.n	80025e0 <_printf_i+0x168>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	079b      	lsls	r3, r3, #30
 8002660:	d415      	bmi.n	800268e <_printf_i+0x216>
 8002662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002664:	68e0      	ldr	r0, [r4, #12]
 8002666:	4298      	cmp	r0, r3
 8002668:	dabc      	bge.n	80025e4 <_printf_i+0x16c>
 800266a:	0018      	movs	r0, r3
 800266c:	e7ba      	b.n	80025e4 <_printf_i+0x16c>
 800266e:	0022      	movs	r2, r4
 8002670:	2301      	movs	r3, #1
 8002672:	9906      	ldr	r1, [sp, #24]
 8002674:	9805      	ldr	r0, [sp, #20]
 8002676:	9e07      	ldr	r6, [sp, #28]
 8002678:	3219      	adds	r2, #25
 800267a:	47b0      	blx	r6
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	d0af      	beq.n	80025e0 <_printf_i+0x168>
 8002680:	3501      	adds	r5, #1
 8002682:	68e3      	ldr	r3, [r4, #12]
 8002684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	42ab      	cmp	r3, r5
 800268a:	dcf0      	bgt.n	800266e <_printf_i+0x1f6>
 800268c:	e7e9      	b.n	8002662 <_printf_i+0x1ea>
 800268e:	2500      	movs	r5, #0
 8002690:	e7f7      	b.n	8002682 <_printf_i+0x20a>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	08003671 	.word	0x08003671
 8002698:	08003682 	.word	0x08003682

0800269c <memchr>:
 800269c:	b2c9      	uxtb	r1, r1
 800269e:	1882      	adds	r2, r0, r2
 80026a0:	4290      	cmp	r0, r2
 80026a2:	d101      	bne.n	80026a8 <memchr+0xc>
 80026a4:	2000      	movs	r0, #0
 80026a6:	4770      	bx	lr
 80026a8:	7803      	ldrb	r3, [r0, #0]
 80026aa:	428b      	cmp	r3, r1
 80026ac:	d0fb      	beq.n	80026a6 <memchr+0xa>
 80026ae:	3001      	adds	r0, #1
 80026b0:	e7f6      	b.n	80026a0 <memchr+0x4>

080026b2 <memcpy>:
 80026b2:	2300      	movs	r3, #0
 80026b4:	b510      	push	{r4, lr}
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d100      	bne.n	80026bc <memcpy+0xa>
 80026ba:	bd10      	pop	{r4, pc}
 80026bc:	5ccc      	ldrb	r4, [r1, r3]
 80026be:	54c4      	strb	r4, [r0, r3]
 80026c0:	3301      	adds	r3, #1
 80026c2:	e7f8      	b.n	80026b6 <memcpy+0x4>

080026c4 <memmove>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	4288      	cmp	r0, r1
 80026c8:	d902      	bls.n	80026d0 <memmove+0xc>
 80026ca:	188b      	adds	r3, r1, r2
 80026cc:	4298      	cmp	r0, r3
 80026ce:	d303      	bcc.n	80026d8 <memmove+0x14>
 80026d0:	2300      	movs	r3, #0
 80026d2:	e007      	b.n	80026e4 <memmove+0x20>
 80026d4:	5c8b      	ldrb	r3, [r1, r2]
 80026d6:	5483      	strb	r3, [r0, r2]
 80026d8:	3a01      	subs	r2, #1
 80026da:	d2fb      	bcs.n	80026d4 <memmove+0x10>
 80026dc:	bd10      	pop	{r4, pc}
 80026de:	5ccc      	ldrb	r4, [r1, r3]
 80026e0:	54c4      	strb	r4, [r0, r3]
 80026e2:	3301      	adds	r3, #1
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1fa      	bne.n	80026de <memmove+0x1a>
 80026e8:	e7f8      	b.n	80026dc <memmove+0x18>
	...

080026ec <_free_r>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	0005      	movs	r5, r0
 80026f0:	2900      	cmp	r1, #0
 80026f2:	d010      	beq.n	8002716 <_free_r+0x2a>
 80026f4:	1f0c      	subs	r4, r1, #4
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da00      	bge.n	80026fe <_free_r+0x12>
 80026fc:	18e4      	adds	r4, r4, r3
 80026fe:	0028      	movs	r0, r5
 8002700:	f000 f8d4 	bl	80028ac <__malloc_lock>
 8002704:	4a1d      	ldr	r2, [pc, #116]	; (800277c <_free_r+0x90>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <_free_r+0x2c>
 800270c:	6063      	str	r3, [r4, #4]
 800270e:	6014      	str	r4, [r2, #0]
 8002710:	0028      	movs	r0, r5
 8002712:	f000 f8d3 	bl	80028bc <__malloc_unlock>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	42a3      	cmp	r3, r4
 800271a:	d908      	bls.n	800272e <_free_r+0x42>
 800271c:	6821      	ldr	r1, [r4, #0]
 800271e:	1860      	adds	r0, r4, r1
 8002720:	4283      	cmp	r3, r0
 8002722:	d1f3      	bne.n	800270c <_free_r+0x20>
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	1841      	adds	r1, r0, r1
 800272a:	6021      	str	r1, [r4, #0]
 800272c:	e7ee      	b.n	800270c <_free_r+0x20>
 800272e:	001a      	movs	r2, r3
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <_free_r+0x4e>
 8002736:	42a3      	cmp	r3, r4
 8002738:	d9f9      	bls.n	800272e <_free_r+0x42>
 800273a:	6811      	ldr	r1, [r2, #0]
 800273c:	1850      	adds	r0, r2, r1
 800273e:	42a0      	cmp	r0, r4
 8002740:	d10b      	bne.n	800275a <_free_r+0x6e>
 8002742:	6820      	ldr	r0, [r4, #0]
 8002744:	1809      	adds	r1, r1, r0
 8002746:	1850      	adds	r0, r2, r1
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	4283      	cmp	r3, r0
 800274c:	d1e0      	bne.n	8002710 <_free_r+0x24>
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	1841      	adds	r1, r0, r1
 8002754:	6011      	str	r1, [r2, #0]
 8002756:	6053      	str	r3, [r2, #4]
 8002758:	e7da      	b.n	8002710 <_free_r+0x24>
 800275a:	42a0      	cmp	r0, r4
 800275c:	d902      	bls.n	8002764 <_free_r+0x78>
 800275e:	230c      	movs	r3, #12
 8002760:	602b      	str	r3, [r5, #0]
 8002762:	e7d5      	b.n	8002710 <_free_r+0x24>
 8002764:	6821      	ldr	r1, [r4, #0]
 8002766:	1860      	adds	r0, r4, r1
 8002768:	4283      	cmp	r3, r0
 800276a:	d103      	bne.n	8002774 <_free_r+0x88>
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	1841      	adds	r1, r0, r1
 8002772:	6021      	str	r1, [r4, #0]
 8002774:	6063      	str	r3, [r4, #4]
 8002776:	6054      	str	r4, [r2, #4]
 8002778:	e7ca      	b.n	8002710 <_free_r+0x24>
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	200000b0 	.word	0x200000b0

08002780 <_malloc_r>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	2303      	movs	r3, #3
 8002784:	1ccd      	adds	r5, r1, #3
 8002786:	439d      	bics	r5, r3
 8002788:	3508      	adds	r5, #8
 800278a:	0006      	movs	r6, r0
 800278c:	2d0c      	cmp	r5, #12
 800278e:	d21f      	bcs.n	80027d0 <_malloc_r+0x50>
 8002790:	250c      	movs	r5, #12
 8002792:	42a9      	cmp	r1, r5
 8002794:	d81e      	bhi.n	80027d4 <_malloc_r+0x54>
 8002796:	0030      	movs	r0, r6
 8002798:	f000 f888 	bl	80028ac <__malloc_lock>
 800279c:	4925      	ldr	r1, [pc, #148]	; (8002834 <_malloc_r+0xb4>)
 800279e:	680a      	ldr	r2, [r1, #0]
 80027a0:	0014      	movs	r4, r2
 80027a2:	2c00      	cmp	r4, #0
 80027a4:	d11a      	bne.n	80027dc <_malloc_r+0x5c>
 80027a6:	4f24      	ldr	r7, [pc, #144]	; (8002838 <_malloc_r+0xb8>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <_malloc_r+0x38>
 80027ae:	0021      	movs	r1, r4
 80027b0:	0030      	movs	r0, r6
 80027b2:	f000 f869 	bl	8002888 <_sbrk_r>
 80027b6:	6038      	str	r0, [r7, #0]
 80027b8:	0029      	movs	r1, r5
 80027ba:	0030      	movs	r0, r6
 80027bc:	f000 f864 	bl	8002888 <_sbrk_r>
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	d12b      	bne.n	800281c <_malloc_r+0x9c>
 80027c4:	230c      	movs	r3, #12
 80027c6:	0030      	movs	r0, r6
 80027c8:	6033      	str	r3, [r6, #0]
 80027ca:	f000 f877 	bl	80028bc <__malloc_unlock>
 80027ce:	e003      	b.n	80027d8 <_malloc_r+0x58>
 80027d0:	2d00      	cmp	r5, #0
 80027d2:	dade      	bge.n	8002792 <_malloc_r+0x12>
 80027d4:	230c      	movs	r3, #12
 80027d6:	6033      	str	r3, [r6, #0]
 80027d8:	2000      	movs	r0, #0
 80027da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	1b5b      	subs	r3, r3, r5
 80027e0:	d419      	bmi.n	8002816 <_malloc_r+0x96>
 80027e2:	2b0b      	cmp	r3, #11
 80027e4:	d903      	bls.n	80027ee <_malloc_r+0x6e>
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	18e4      	adds	r4, r4, r3
 80027ea:	6025      	str	r5, [r4, #0]
 80027ec:	e003      	b.n	80027f6 <_malloc_r+0x76>
 80027ee:	6863      	ldr	r3, [r4, #4]
 80027f0:	42a2      	cmp	r2, r4
 80027f2:	d10e      	bne.n	8002812 <_malloc_r+0x92>
 80027f4:	600b      	str	r3, [r1, #0]
 80027f6:	0030      	movs	r0, r6
 80027f8:	f000 f860 	bl	80028bc <__malloc_unlock>
 80027fc:	0020      	movs	r0, r4
 80027fe:	2207      	movs	r2, #7
 8002800:	300b      	adds	r0, #11
 8002802:	1d23      	adds	r3, r4, #4
 8002804:	4390      	bics	r0, r2
 8002806:	1ac2      	subs	r2, r0, r3
 8002808:	4298      	cmp	r0, r3
 800280a:	d0e6      	beq.n	80027da <_malloc_r+0x5a>
 800280c:	1a1b      	subs	r3, r3, r0
 800280e:	50a3      	str	r3, [r4, r2]
 8002810:	e7e3      	b.n	80027da <_malloc_r+0x5a>
 8002812:	6053      	str	r3, [r2, #4]
 8002814:	e7ef      	b.n	80027f6 <_malloc_r+0x76>
 8002816:	0022      	movs	r2, r4
 8002818:	6864      	ldr	r4, [r4, #4]
 800281a:	e7c2      	b.n	80027a2 <_malloc_r+0x22>
 800281c:	2303      	movs	r3, #3
 800281e:	1cc4      	adds	r4, r0, #3
 8002820:	439c      	bics	r4, r3
 8002822:	42a0      	cmp	r0, r4
 8002824:	d0e1      	beq.n	80027ea <_malloc_r+0x6a>
 8002826:	1a21      	subs	r1, r4, r0
 8002828:	0030      	movs	r0, r6
 800282a:	f000 f82d 	bl	8002888 <_sbrk_r>
 800282e:	1c43      	adds	r3, r0, #1
 8002830:	d1db      	bne.n	80027ea <_malloc_r+0x6a>
 8002832:	e7c7      	b.n	80027c4 <_malloc_r+0x44>
 8002834:	200000b0 	.word	0x200000b0
 8002838:	200000b4 	.word	0x200000b4

0800283c <_realloc_r>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	0007      	movs	r7, r0
 8002840:	000d      	movs	r5, r1
 8002842:	0016      	movs	r6, r2
 8002844:	2900      	cmp	r1, #0
 8002846:	d105      	bne.n	8002854 <_realloc_r+0x18>
 8002848:	0011      	movs	r1, r2
 800284a:	f7ff ff99 	bl	8002780 <_malloc_r>
 800284e:	0004      	movs	r4, r0
 8002850:	0020      	movs	r0, r4
 8002852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002854:	2a00      	cmp	r2, #0
 8002856:	d103      	bne.n	8002860 <_realloc_r+0x24>
 8002858:	f7ff ff48 	bl	80026ec <_free_r>
 800285c:	0034      	movs	r4, r6
 800285e:	e7f7      	b.n	8002850 <_realloc_r+0x14>
 8002860:	f000 f834 	bl	80028cc <_malloc_usable_size_r>
 8002864:	002c      	movs	r4, r5
 8002866:	42b0      	cmp	r0, r6
 8002868:	d2f2      	bcs.n	8002850 <_realloc_r+0x14>
 800286a:	0031      	movs	r1, r6
 800286c:	0038      	movs	r0, r7
 800286e:	f7ff ff87 	bl	8002780 <_malloc_r>
 8002872:	1e04      	subs	r4, r0, #0
 8002874:	d0ec      	beq.n	8002850 <_realloc_r+0x14>
 8002876:	0029      	movs	r1, r5
 8002878:	0032      	movs	r2, r6
 800287a:	f7ff ff1a 	bl	80026b2 <memcpy>
 800287e:	0029      	movs	r1, r5
 8002880:	0038      	movs	r0, r7
 8002882:	f7ff ff33 	bl	80026ec <_free_r>
 8002886:	e7e3      	b.n	8002850 <_realloc_r+0x14>

08002888 <_sbrk_r>:
 8002888:	2300      	movs	r3, #0
 800288a:	b570      	push	{r4, r5, r6, lr}
 800288c:	4d06      	ldr	r5, [pc, #24]	; (80028a8 <_sbrk_r+0x20>)
 800288e:	0004      	movs	r4, r0
 8002890:	0008      	movs	r0, r1
 8002892:	602b      	str	r3, [r5, #0]
 8002894:	f7ff f862 	bl	800195c <_sbrk>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d103      	bne.n	80028a4 <_sbrk_r+0x1c>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d000      	beq.n	80028a4 <_sbrk_r+0x1c>
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	20000568 	.word	0x20000568

080028ac <__malloc_lock>:
 80028ac:	b510      	push	{r4, lr}
 80028ae:	4802      	ldr	r0, [pc, #8]	; (80028b8 <__malloc_lock+0xc>)
 80028b0:	f000 f814 	bl	80028dc <__retarget_lock_acquire_recursive>
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	20000570 	.word	0x20000570

080028bc <__malloc_unlock>:
 80028bc:	b510      	push	{r4, lr}
 80028be:	4802      	ldr	r0, [pc, #8]	; (80028c8 <__malloc_unlock+0xc>)
 80028c0:	f000 f80d 	bl	80028de <__retarget_lock_release_recursive>
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	20000570 	.word	0x20000570

080028cc <_malloc_usable_size_r>:
 80028cc:	1f0b      	subs	r3, r1, #4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	1f18      	subs	r0, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da01      	bge.n	80028da <_malloc_usable_size_r+0xe>
 80028d6:	580b      	ldr	r3, [r1, r0]
 80028d8:	18c0      	adds	r0, r0, r3
 80028da:	4770      	bx	lr

080028dc <__retarget_lock_acquire_recursive>:
 80028dc:	4770      	bx	lr

080028de <__retarget_lock_release_recursive>:
 80028de:	4770      	bx	lr

080028e0 <_init>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e6:	bc08      	pop	{r3}
 80028e8:	469e      	mov	lr, r3
 80028ea:	4770      	bx	lr

080028ec <_fini>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr
