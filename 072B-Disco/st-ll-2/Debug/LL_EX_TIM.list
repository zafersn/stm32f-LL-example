
LL_EX_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004054  08004054  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004054  08004054  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004054  08004054  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800405c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000078  080040d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  080040d4  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f4c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001468  00000000  00000000  00025fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00027458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00027c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f67  00000000  00000000  00028388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a4e  00000000  00000000  0003c2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ac45  00000000  00000000  00041d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ac982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f28  00000000  00000000  000ac9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003864 	.word	0x08003864

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08003864 	.word	0x08003864

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	2201      	movs	r2, #1
 8000242:	4013      	ands	r3, r2
 8000244:	2b01      	cmp	r3, #1
 8000246:	d101      	bne.n	800024c <LL_I2C_IsActiveFlag_TXE+0x18>
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <LL_I2C_IsActiveFlag_TXE+0x1a>
 800024c:	2300      	movs	r3, #0
}
 800024e:	0018      	movs	r0, r3
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}

08000256 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	2240      	movs	r2, #64	; 0x40
 8000264:	4013      	ands	r3, r2
 8000266:	2b40      	cmp	r3, #64	; 0x40
 8000268:	d101      	bne.n	800026e <LL_I2C_IsActiveFlag_TC+0x18>
 800026a:	2301      	movs	r3, #1
 800026c:	e000      	b.n	8000270 <LL_I2C_IsActiveFlag_TC+0x1a>
 800026e:	2300      	movs	r3, #0
}
 8000270:	0018      	movs	r0, r3
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}

08000278 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	699a      	ldr	r2, [r3, #24]
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	021b      	lsls	r3, r3, #8
 8000288:	401a      	ands	r2, r3
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	021b      	lsls	r3, r3, #8
 800028e:	429a      	cmp	r2, r3
 8000290:	d101      	bne.n	8000296 <LL_I2C_IsActiveFlag_BUSY+0x1e>
 8000292:	2301      	movs	r3, #1
 8000294:	e000      	b.n	8000298 <LL_I2C_IsActiveFlag_BUSY+0x20>
 8000296:	2300      	movs	r3, #0
}
 8000298:	0018      	movs	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}

080002a0 <LL_I2C_SetTransferSize>:
  * @param  I2Cx I2C Instance.
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <LL_I2C_SetTransferSize+0x24>)
 80002b0:	401a      	ands	r2, r3
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	041b      	lsls	r3, r3, #16
 80002b6:	431a      	orrs	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	605a      	str	r2, [r3, #4]
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	ff00ffff 	.word	0xff00ffff

080002c8 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	01d2      	lsls	r2, r2, #7
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	605a      	str	r2, [r3, #4]
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
 80002f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	69fa      	ldr	r2, [r7, #28]
 80002fc:	0d51      	lsrs	r1, r2, #21
 80002fe:	2280      	movs	r2, #128	; 0x80
 8000300:	00d2      	lsls	r2, r2, #3
 8000302:	400a      	ands	r2, r1
 8000304:	490a      	ldr	r1, [pc, #40]	; (8000330 <LL_I2C_HandleTransfer+0x48>)
 8000306:	430a      	orrs	r2, r1
 8000308:	43d2      	mvns	r2, r2
 800030a:	401a      	ands	r2, r3
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4319      	orrs	r1, r3
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	041b      	lsls	r3, r3, #16
 8000316:	4319      	orrs	r1, r3
 8000318:	69bb      	ldr	r3, [r7, #24]
 800031a:	4319      	orrs	r1, r3
 800031c:	69fb      	ldr	r3, [r7, #28]
 800031e:	430b      	orrs	r3, r1
 8000320:	431a      	orrs	r2, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	03ff7bff 	.word	0x03ff7bff

08000334 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	000a      	movs	r2, r1
 800033e:	1cfb      	adds	r3, r7, #3
 8000340:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 8000342:	1cfb      	adds	r3, r7, #3
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	629a      	str	r2, [r3, #40]	; 0x28
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <LL_EXTI_EnableIT_0_31+0x1c>)
 800035e:	6819      	ldr	r1, [r3, #0]
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	430a      	orrs	r2, r1
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	46c0      	nop			; (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	b002      	add	sp, #8
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40010400 	.word	0x40010400

08000374 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800037e:	6859      	ldr	r1, [r3, #4]
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	430a      	orrs	r2, r1
 8000386:	605a      	str	r2, [r3, #4]

}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010400 	.word	0x40010400

08000394 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800039e:	6899      	ldr	r1, [r3, #8]
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	609a      	str	r2, [r3, #8]

}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010400 	.word	0x40010400

080003b4 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	025b      	lsls	r3, r3, #9
 80003c0:	4013      	ands	r3, r2
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80003c4:	4694      	mov	ip, r2
 80003c6:	4463      	add	r3, ip
 80003c8:	425a      	negs	r2, r3
 80003ca:	4153      	adcs	r3, r2
 80003cc:	b2db      	uxtb	r3, r3
}
 80003ce:	0018      	movs	r0, r3
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	e000e010 	.word	0xe000e010
 80003d8:	ffff0000 	.word	0xffff0000

080003dc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <LL_SYSTICK_EnableIT+0x18>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <LL_SYSTICK_EnableIT+0x18>)
 80003e6:	2102      	movs	r1, #2
 80003e8:	430a      	orrs	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	e000e010 	.word	0xe000e010

080003f8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2201      	movs	r2, #1
 8000406:	431a      	orrs	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	601a      	str	r2, [r3, #0]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}

08000414 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000438:	0018      	movs	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	b002      	add	sp, #8
 800043e:	bd80      	pop	{r7, pc}

08000440 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6a1a      	ldr	r2, [r3, #32]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	431a      	orrs	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	621a      	str	r2, [r3, #32]
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}

0800045e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}

08000476 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b002      	add	sp, #8
 800048c:	bd80      	pop	{r7, pc}

0800048e <LL_TIM_OC_GetCompareCH1>:
  * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ae:	2280      	movs	r2, #128	; 0x80
 80004b0:	0212      	lsls	r2, r2, #8
 80004b2:	431a      	orrs	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2202      	movs	r2, #2
 80004cc:	4252      	negs	r2, r2
 80004ce:	611a      	str	r2, [r3, #16]
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2203      	movs	r2, #3
 80004e4:	4252      	negs	r2, r2
 80004e6:	611a      	str	r2, [r3, #16]
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	2202      	movs	r2, #2
 80004fe:	4013      	ands	r3, r2
 8000500:	2b02      	cmp	r3, #2
 8000502:	d101      	bne.n	8000508 <LL_TIM_IsActiveFlag_CC1+0x18>
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <LL_TIM_IsActiveFlag_CC1+0x1a>
 8000508:	2300      	movs	r3, #0
}
 800050a:	0018      	movs	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}

08000512 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	2202      	movs	r2, #2
 8000520:	431a      	orrs	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60da      	str	r2, [r3, #12]
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}

0800052e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	2201      	movs	r2, #1
 800053c:	431a      	orrs	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	615a      	str	r2, [r3, #20]
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}

0800054a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	619a      	str	r2, [r3, #24]
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}

08000562 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <I2C_Handle>:
void SPI_ReadData_MEMS();
void Calgulate_FreqTim14();
void UserBTN_Callback();

static inline uint8_t I2C_Handle(uint8_t memAddr, uint8_t* pData, uint16_t size)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	6039      	str	r1, [r7, #0]
 8000584:	0011      	movs	r1, r2
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	1c02      	adds	r2, r0, #0
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	1c0a      	adds	r2, r1, #0
 8000590:	801a      	strh	r2, [r3, #0]

		int32_t to = 0, timeout = 10;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	230a      	movs	r3, #10
 8000598:	60bb      	str	r3, [r7, #8]
		to = timeout;
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	60fb      	str	r3, [r7, #12]

		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 800059e:	e00a      	b.n	80005b6 <I2C_Handle+0x3a>
			if (LL_SYSTICK_IsActiveCounterFlag()) {
 80005a0:	f7ff ff08 	bl	80003b4 <LL_SYSTICK_IsActiveCounterFlag>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d006      	beq.n	80005b6 <I2C_Handle+0x3a>
				if(to-- == 0) {
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	60fa      	str	r2, [r7, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <I2C_Handle+0x3a>
					return 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e075      	b.n	80006a2 <I2C_Handle+0x126>
		while(LL_I2C_IsActiveFlag_BUSY(I2C2)) {
 80005b6:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <I2C_Handle+0x130>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff fe5d 	bl	8000278 <LL_I2C_IsActiveFlag_BUSY>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d1ee      	bne.n	80005a0 <I2C_Handle+0x24>
				}
			}
		}

		to = timeout;
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	60fb      	str	r3, [r7, #12]
//	  /* Master Generate Start condition */
	  to = timeout;
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	60fb      	str	r3, [r7, #12]
	 LL_I2C_HandleTransfer(I2C2, LCD_SLAVE_ADD, LL_I2C_ADDRSLAVE_7BIT, size+1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	001a      	movs	r2, r3
 80005d2:	4836      	ldr	r0, [pc, #216]	; (80006ac <I2C_Handle+0x130>)
 80005d4:	4b36      	ldr	r3, [pc, #216]	; (80006b0 <I2C_Handle+0x134>)
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2300      	movs	r3, #0
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	0013      	movs	r3, r2
 80005de:	2200      	movs	r2, #0
 80005e0:	2178      	movs	r1, #120	; 0x78
 80005e2:	f7ff fe81 	bl	80002e8 <LL_I2C_HandleTransfer>

	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80005e6:	e00a      	b.n	80005fe <I2C_Handle+0x82>
	  		if (LL_SYSTICK_IsActiveCounterFlag()) {
 80005e8:	f7ff fee4 	bl	80003b4 <LL_SYSTICK_IsActiveCounterFlag>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d006      	beq.n	80005fe <I2C_Handle+0x82>
	  			if(to-- == 0) {
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	60fa      	str	r2, [r7, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <I2C_Handle+0x82>
	  				return 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e051      	b.n	80006a2 <I2C_Handle+0x126>
	  while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <I2C_Handle+0x130>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff fe17 	bl	8000234 <LL_I2C_IsActiveFlag_TXE>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d0ee      	beq.n	80005e8 <I2C_Handle+0x6c>
	  			}
	  		}
	  	}
	  		to = timeout;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	60fb      	str	r3, [r7, #12]
	  		LL_I2C_TransmitData8(I2C2, memAddr);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4a26      	ldr	r2, [pc, #152]	; (80006ac <I2C_Handle+0x130>)
 8000614:	0019      	movs	r1, r3
 8000616:	0010      	movs	r0, r2
 8000618:	f7ff fe8c 	bl	8000334 <LL_I2C_TransmitData8>

	  		do {
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 800061c:	e00a      	b.n	8000634 <I2C_Handle+0xb8>
	  				if (LL_SYSTICK_IsActiveCounterFlag()) {
 800061e:	f7ff fec9 	bl	80003b4 <LL_SYSTICK_IsActiveCounterFlag>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d006      	beq.n	8000634 <I2C_Handle+0xb8>
	  					if(to-- == 0) {
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	60fa      	str	r2, [r7, #12]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <I2C_Handle+0xb8>
	  						return 1;
 8000630:	2301      	movs	r3, #1
 8000632:	e036      	b.n	80006a2 <I2C_Handle+0x126>
	  			while (!(LL_I2C_IsActiveFlag_TXE(I2C2)) && !(LL_I2C_IsActiveFlag_TC(I2C2))) {
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <I2C_Handle+0x130>)
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff fdfc 	bl	8000234 <LL_I2C_IsActiveFlag_TXE>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d105      	bne.n	800064c <I2C_Handle+0xd0>
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <I2C_Handle+0x130>)
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff fe07 	bl	8000256 <LL_I2C_IsActiveFlag_TC>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d0e8      	beq.n	800061e <I2C_Handle+0xa2>
	  					}
	  				}
	  			}
	  			to = timeout;
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60fb      	str	r3, [r7, #12]
	  			LL_I2C_TransmitData8(I2C2, (*pData++));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	603a      	str	r2, [r7, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <I2C_Handle+0x130>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f7ff fe69 	bl	8000334 <LL_I2C_TransmitData8>
	  		} while (--size > 0);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	1d3a      	adds	r2, r7, #4
 8000666:	8812      	ldrh	r2, [r2, #0]
 8000668:	3a01      	subs	r2, #1
 800066a:	801a      	strh	r2, [r3, #0]
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1df      	bne.n	8000634 <I2C_Handle+0xb8>

	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 8000674:	e00a      	b.n	800068c <I2C_Handle+0x110>
	  			if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000676:	f7ff fe9d 	bl	80003b4 <LL_SYSTICK_IsActiveCounterFlag>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d006      	beq.n	800068c <I2C_Handle+0x110>
	  				if(to-- == 0) {
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	60fa      	str	r2, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <I2C_Handle+0x110>
	  					return 1;
 8000688:	2301      	movs	r3, #1
 800068a:	e00a      	b.n	80006a2 <I2C_Handle+0x126>
	  		while (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <I2C_Handle+0x130>)
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff fdd0 	bl	8000234 <LL_I2C_IsActiveFlag_TXE>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d0ee      	beq.n	8000676 <I2C_Handle+0xfa>
	  				}
	  			}
	  		}
	  		LL_I2C_GenerateStopCondition(I2C2);
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <I2C_Handle+0x130>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff fe14 	bl	80002c8 <LL_I2C_GenerateStopCondition>
	  		return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	0018      	movs	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b004      	add	sp, #16
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40005800 	.word	0x40005800
 80006b0:	80002000 	.word	0x80002000

080006b4 <BSL_Startup>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Startup()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	LED_Init();
 80006b8:	f000 f990 	bl	80009dc <LED_Init>
	Display_Init();
 80006bc:	f000 f826 	bl	800070c <Display_Init>
	Init_TIM6();
 80006c0:	f000 f99e 	bl	8000a00 <Init_TIM6>
	TIM_PWM_Init();
 80006c4:	f000 fac6 	bl	8000c54 <TIM_PWM_Init>
	Init_TIM14_INCAP();
 80006c8:	f000 fa42 	bl	8000b50 <Init_TIM14_INCAP>
	Init_TIM15_CH1N();
 80006cc:	f000 f9ac 	bl	8000a28 <Init_TIM15_CH1N>
	Init_USERBTN();
 80006d0:	f000 f9e2 	bl	8000a98 <Init_USERBTN>
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <BSL_Config>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Config()
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 80006de:	f7ff fe7d 	bl	80003dc <LL_SYSTICK_EnableIT>
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <BSL_Control>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Control()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

	while(1)
	{
		if(ms500ms)
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <BSL_Control+0x20>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0fa      	beq.n	80006ec <BSL_Control+0x4>
		{
			ms500ms = false;
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <BSL_Control+0x20>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]

			Display_Test();
 80006fc:	f000 f916 	bl	800092c <Display_Test>

			PWM15_Test();
 8000700:	f000 f9ae 	bl	8000a60 <PWM15_Test>
		if(ms500ms)
 8000704:	e7f2      	b.n	80006ec <BSL_Control+0x4>
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000096 	.word	0x20000096

0800070c <Display_Init>:
  * @brief   init func. for display.
  * @param  ------
  * @retval none
  */
void Display_Init()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
		int status = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]

			LL_I2C_SetTransferSize(I2C2, 50);
 8000716:	4b83      	ldr	r3, [pc, #524]	; (8000924 <Display_Init+0x218>)
 8000718:	2132      	movs	r1, #50	; 0x32
 800071a:	0018      	movs	r0, r3
 800071c:	f7ff fdc0 	bl	80002a0 <LL_I2C_SetTransferSize>
		// Init LCD
			status += ssd1306_WriteCommand(0xAE);   // Display off
 8000720:	20ae      	movs	r0, #174	; 0xae
 8000722:	f000 f93f 	bl	80009a4 <ssd1306_WriteCommand>
 8000726:	0003      	movs	r3, r0
 8000728:	001a      	movs	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	189b      	adds	r3, r3, r2
 800072e:	607b      	str	r3, [r7, #4]
		if (status != 0) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d000      	beq.n	8000738 <Display_Init+0x2c>
 8000736:	e0ef      	b.n	8000918 <Display_Init+0x20c>
			return ;
		}
			status += ssd1306_WriteCommand( 0x20);   // Set Memory Addressing Mode
 8000738:	2020      	movs	r0, #32
 800073a:	f000 f933 	bl	80009a4 <ssd1306_WriteCommand>
 800073e:	0003      	movs	r3, r0
 8000740:	001a      	movs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	189b      	adds	r3, r3, r2
 8000746:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f92b 	bl	80009a4 <ssd1306_WriteCommand>
 800074e:	0003      	movs	r3, r0
 8000750:	001a      	movs	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	189b      	adds	r3, r3, r2
 8000756:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000758:	20b0      	movs	r0, #176	; 0xb0
 800075a:	f000 f923 	bl	80009a4 <ssd1306_WriteCommand>
 800075e:	0003      	movs	r3, r0
 8000760:	001a      	movs	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	189b      	adds	r3, r3, r2
 8000766:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xC8);   // Set COM Output Scan Direction
 8000768:	20c8      	movs	r0, #200	; 0xc8
 800076a:	f000 f91b 	bl	80009a4 <ssd1306_WriteCommand>
 800076e:	0003      	movs	r3, r0
 8000770:	001a      	movs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	189b      	adds	r3, r3, r2
 8000776:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // Set low column address
 8000778:	2000      	movs	r0, #0
 800077a:	f000 f913 	bl	80009a4 <ssd1306_WriteCommand>
 800077e:	0003      	movs	r3, r0
 8000780:	001a      	movs	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	189b      	adds	r3, r3, r2
 8000786:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x10);   // Set high column address
 8000788:	2010      	movs	r0, #16
 800078a:	f000 f90b 	bl	80009a4 <ssd1306_WriteCommand>
 800078e:	0003      	movs	r3, r0
 8000790:	001a      	movs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	189b      	adds	r3, r3, r2
 8000796:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x40);   // Set start line address
 8000798:	2040      	movs	r0, #64	; 0x40
 800079a:	f000 f903 	bl	80009a4 <ssd1306_WriteCommand>
 800079e:	0003      	movs	r3, r0
 80007a0:	001a      	movs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	189b      	adds	r3, r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x81);   // set contrast control register
 80007a8:	2081      	movs	r0, #129	; 0x81
 80007aa:	f000 f8fb 	bl	80009a4 <ssd1306_WriteCommand>
 80007ae:	0003      	movs	r3, r0
 80007b0:	001a      	movs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	189b      	adds	r3, r3, r2
 80007b6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xFF);
 80007b8:	20ff      	movs	r0, #255	; 0xff
 80007ba:	f000 f8f3 	bl	80009a4 <ssd1306_WriteCommand>
 80007be:	0003      	movs	r3, r0
 80007c0:	001a      	movs	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	189b      	adds	r3, r3, r2
 80007c6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA1);   // Set segment re-map 0 to 127
 80007c8:	20a1      	movs	r0, #161	; 0xa1
 80007ca:	f000 f8eb 	bl	80009a4 <ssd1306_WriteCommand>
 80007ce:	0003      	movs	r3, r0
 80007d0:	001a      	movs	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	189b      	adds	r3, r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA6);   // Set normal display
 80007d8:	20a6      	movs	r0, #166	; 0xa6
 80007da:	f000 f8e3 	bl	80009a4 <ssd1306_WriteCommand>
 80007de:	0003      	movs	r3, r0
 80007e0:	001a      	movs	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	189b      	adds	r3, r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA8);   // Set multiplex ratio(1 to 64)
 80007e8:	20a8      	movs	r0, #168	; 0xa8
 80007ea:	f000 f8db 	bl	80009a4 <ssd1306_WriteCommand>
 80007ee:	0003      	movs	r3, r0
 80007f0:	001a      	movs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	189b      	adds	r3, r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x1F);	// ( SSD1306_HEIGHT == 32)
 80007f8:	201f      	movs	r0, #31
 80007fa:	f000 f8d3 	bl	80009a4 <ssd1306_WriteCommand>
 80007fe:	0003      	movs	r3, r0
 8000800:	001a      	movs	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	189b      	adds	r3, r3, r2
 8000806:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000808:	20a4      	movs	r0, #164	; 0xa4
 800080a:	f000 f8cb 	bl	80009a4 <ssd1306_WriteCommand>
 800080e:	0003      	movs	r3, r0
 8000810:	001a      	movs	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	189b      	adds	r3, r3, r2
 8000816:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD3);   // Set display offset
 8000818:	20d3      	movs	r0, #211	; 0xd3
 800081a:	f000 f8c3 	bl	80009a4 <ssd1306_WriteCommand>
 800081e:	0003      	movs	r3, r0
 8000820:	001a      	movs	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	189b      	adds	r3, r3, r2
 8000826:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x00);   // No offset
 8000828:	2000      	movs	r0, #0
 800082a:	f000 f8bb 	bl	80009a4 <ssd1306_WriteCommand>
 800082e:	0003      	movs	r3, r0
 8000830:	001a      	movs	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	189b      	adds	r3, r3, r2
 8000836:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000838:	20d5      	movs	r0, #213	; 0xd5
 800083a:	f000 f8b3 	bl	80009a4 <ssd1306_WriteCommand>
 800083e:	0003      	movs	r3, r0
 8000840:	001a      	movs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	189b      	adds	r3, r3, r2
 8000846:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xF0);   // Set divide ratio
 8000848:	20f0      	movs	r0, #240	; 0xf0
 800084a:	f000 f8ab 	bl	80009a4 <ssd1306_WriteCommand>
 800084e:	0003      	movs	r3, r0
 8000850:	001a      	movs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	189b      	adds	r3, r3, r2
 8000856:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xD9);   // Set pre-charge period
 8000858:	20d9      	movs	r0, #217	; 0xd9
 800085a:	f000 f8a3 	bl	80009a4 <ssd1306_WriteCommand>
 800085e:	0003      	movs	r3, r0
 8000860:	001a      	movs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	189b      	adds	r3, r3, r2
 8000866:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x22);
 8000868:	2022      	movs	r0, #34	; 0x22
 800086a:	f000 f89b 	bl	80009a4 <ssd1306_WriteCommand>
 800086e:	0003      	movs	r3, r0
 8000870:	001a      	movs	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	189b      	adds	r3, r3, r2
 8000876:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xDA);   // Set com pins hardware configuration
 8000878:	20da      	movs	r0, #218	; 0xda
 800087a:	f000 f893 	bl	80009a4 <ssd1306_WriteCommand>
 800087e:	0003      	movs	r3, r0
 8000880:	001a      	movs	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	189b      	adds	r3, r3, r2
 8000886:	607b      	str	r3, [r7, #4]
		#ifdef SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0x32);   // Enable COM left/right remap
		#else
		    status += ssd1306_WriteCommand( 0x02);   // Do not use COM left/right remap
 8000888:	2002      	movs	r0, #2
 800088a:	f000 f88b 	bl	80009a4 <ssd1306_WriteCommand>
 800088e:	0003      	movs	r3, r0
 8000890:	001a      	movs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	189b      	adds	r3, r3, r2
 8000896:	607b      	str	r3, [r7, #4]
		#endif // SSD1306_COM_LR_REMAP
		    status += ssd1306_WriteCommand( 0xDB);   // Set vcomh
 8000898:	20db      	movs	r0, #219	; 0xdb
 800089a:	f000 f883 	bl	80009a4 <ssd1306_WriteCommand>
 800089e:	0003      	movs	r3, r0
 80008a0:	001a      	movs	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	189b      	adds	r3, r3, r2
 80008a6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x20);   // 0x20,0.77xVcc
 80008a8:	2020      	movs	r0, #32
 80008aa:	f000 f87b 	bl	80009a4 <ssd1306_WriteCommand>
 80008ae:	0003      	movs	r3, r0
 80008b0:	001a      	movs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	189b      	adds	r3, r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x8D);   // Set DC-DC enable
 80008b8:	208d      	movs	r0, #141	; 0x8d
 80008ba:	f000 f873 	bl	80009a4 <ssd1306_WriteCommand>
 80008be:	0003      	movs	r3, r0
 80008c0:	001a      	movs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	189b      	adds	r3, r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0x14);   //
 80008c8:	2014      	movs	r0, #20
 80008ca:	f000 f86b 	bl	80009a4 <ssd1306_WriteCommand>
 80008ce:	0003      	movs	r3, r0
 80008d0:	001a      	movs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	189b      	adds	r3, r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
		    status += ssd1306_WriteCommand( 0xAF);   // Turn on SSD1306 panel
 80008d8:	20af      	movs	r0, #175	; 0xaf
 80008da:	f000 f863 	bl	80009a4 <ssd1306_WriteCommand>
 80008de:	0003      	movs	r3, r0
 80008e0:	001a      	movs	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	189b      	adds	r3, r3, r2
 80008e6:	607b      	str	r3, [r7, #4]

		    if (status != 0) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d116      	bne.n	800091c <Display_Init+0x210>
		        return ;
		    }
		    LL_mDelay(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f002 fb30 	bl	8002f54 <LL_mDelay>
			ssd1306_Fill(White);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fa21 	bl	8000d3c <ssd1306_Fill>
			ssd1306_UpdateScreen();
 80008fa:	f000 f9cb 	bl	8000c94 <ssd1306_UpdateScreen>
			  // Set default values for screen object
			SSD1306.CurrentX = 0;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <Display_Init+0x21c>)
 8000900:	2200      	movs	r2, #0
 8000902:	801a      	strh	r2, [r3, #0]
			SSD1306.CurrentY = 0;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <Display_Init+0x21c>)
 8000906:	2200      	movs	r2, #0
 8000908:	805a      	strh	r2, [r3, #2]

			SSD1306.Initialized = 1;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <Display_Init+0x21c>)
 800090c:	2201      	movs	r2, #1
 800090e:	715a      	strb	r2, [r3, #5]
			LL_mDelay(100);
 8000910:	2064      	movs	r0, #100	; 0x64
 8000912:	f002 fb1f 	bl	8002f54 <LL_mDelay>
 8000916:	e002      	b.n	800091e <Display_Init+0x212>
			return ;
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	e000      	b.n	800091e <Display_Init+0x212>
		        return ;
 800091c:	46c0      	nop			; (mov r8, r8)

}
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40005800 	.word	0x40005800
 8000928:	200000c8 	.word	0x200000c8

0800092c <Display_Test>:


void Display_Test()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0c0      	sub	sp, #256	; 0x100
 8000930:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 fa02 	bl	8000d3c <ssd1306_Fill>
	/*for (int i = 0; i < 128; i++) {
		ssd1306_DrawPixel(i, 10, White);
	}*/
	char tBuf[255];
	sprintf(tBuf,"expctF:%d",(int)expect_freq);
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <Display_Test+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	4915      	ldr	r1, [pc, #84]	; (8000994 <Display_Test+0x68>)
 8000940:	003b      	movs	r3, r7
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fb68 	bl	8003018 <siprintf>
	ssd1306_SetCursor(0, 10);
 8000948:	210a      	movs	r1, #10
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fab4 	bl	8000eb8 <ssd1306_SetCursor>
	ssd1306_WriteString(tBuf, Font_7x10, White);
 8000950:	4a11      	ldr	r2, [pc, #68]	; (8000998 <Display_Test+0x6c>)
 8000952:	0038      	movs	r0, r7
 8000954:	2301      	movs	r3, #1
 8000956:	6811      	ldr	r1, [r2, #0]
 8000958:	6852      	ldr	r2, [r2, #4]
 800095a:	f000 fa13 	bl	8000d84 <ssd1306_WriteString>
	sprintf(tBuf,"msredF:%d",(int)freqTim14);
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <Display_Test+0x70>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	001a      	movs	r2, r3
 8000964:	490e      	ldr	r1, [pc, #56]	; (80009a0 <Display_Test+0x74>)
 8000966:	003b      	movs	r3, r7
 8000968:	0018      	movs	r0, r3
 800096a:	f002 fb55 	bl	8003018 <siprintf>
	ssd1306_SetCursor(0, 20);
 800096e:	2114      	movs	r1, #20
 8000970:	2000      	movs	r0, #0
 8000972:	f000 faa1 	bl	8000eb8 <ssd1306_SetCursor>
	ssd1306_WriteString(tBuf, Font_7x10, White);
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <Display_Test+0x6c>)
 8000978:	0038      	movs	r0, r7
 800097a:	2301      	movs	r3, #1
 800097c:	6811      	ldr	r1, [r2, #0]
 800097e:	6852      	ldr	r2, [r2, #4]
 8000980:	f000 fa00 	bl	8000d84 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000984:	f000 f986 	bl	8000c94 <ssd1306_UpdateScreen>
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b040      	add	sp, #256	; 0x100
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000ac 	.word	0x200000ac
 8000994:	0800387c 	.word	0x0800387c
 8000998:	20000008 	.word	0x20000008
 800099c:	200000a8 	.word	0x200000a8
 80009a0:	08003888 	.word	0x08003888

080009a4 <ssd1306_WriteCommand>:
static uint8_t ssd1306_WriteCommand(uint8_t command)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	701a      	strb	r2, [r3, #0]
	uint8_t memAdd= 0x00;
 80009b0:	200f      	movs	r0, #15
 80009b2:	183b      	adds	r3, r7, r0
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	uint16_t size = 1;
 80009b8:	210c      	movs	r1, #12
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2201      	movs	r2, #1
 80009be:	801a      	strh	r2, [r3, #0]
	return I2C_Handle(memAdd,&command,size);
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	1df9      	adds	r1, r7, #7
 80009c6:	183b      	adds	r3, r7, r0
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fdd6 	bl	800057c <I2C_Handle>
 80009d0:	0003      	movs	r3, r0
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <LED_Init>:
void LED_Init()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	LED1_OFF();
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <LED_Init+0x20>)
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff fdbc 	bl	8000562 <LL_GPIO_ResetOutputPin>
	LED2_OFF();
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <LED_Init+0x20>)
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff fdb7 	bl	8000562 <LL_GPIO_ResetOutputPin>
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	48000800 	.word	0x48000800

08000a00 <Init_TIM6>:
void Init_TIM6(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <Init_TIM6+0x24>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fd5a 	bl	80004c0 <LL_TIM_ClearFlag_UPDATE>
	/* Enable counter */
	LL_TIM_EnableCounter(TIM6);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <Init_TIM6+0x24>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fcf2 	bl	80003f8 <LL_TIM_EnableCounter>

	/* Force update generation */
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <Init_TIM6+0x24>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff fd89 	bl	800052e <LL_TIM_GenerateEvent_UPDATE>
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	40001000 	.word	0x40001000

08000a28 <Init_TIM15_CH1N>:
void Init_TIM15_CH1N(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM15);
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <Init_TIM15_CH1N+0x34>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fd46 	bl	80004c0 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_CC_EnableChannel(TIM15, 		LL_TIM_CHANNEL_CH1N);
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <Init_TIM15_CH1N+0x34>)
 8000a36:	2104      	movs	r1, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fd01 	bl	8000440 <LL_TIM_CC_EnableChannel>

	/* Enable counter */
	LL_TIM_EnableCounter(TIM15);
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <Init_TIM15_CH1N+0x34>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fcd9 	bl	80003f8 <LL_TIM_EnableCounter>
	LL_TIM_EnableAllOutputs(TIM15);
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <Init_TIM15_CH1N+0x34>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff fd2a 	bl	80004a2 <LL_TIM_EnableAllOutputs>

	/* Force update generation */
	LL_TIM_GenerateEvent_UPDATE(TIM15);
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <Init_TIM15_CH1N+0x34>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fd6c 	bl	800052e <LL_TIM_GenerateEvent_UPDATE>

}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40014000 	.word	0x40014000

08000a60 <PWM15_Test>:
void PWM15_Test()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
		LL_TIM_OC_SetCompareCH1(TIM15, LL_TIM_GetAutoReload(TIM15)/2);
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <PWM15_Test+0x30>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fce0 	bl	800042c <LL_TIM_GetAutoReload>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <PWM15_Test+0x30>)
 8000a72:	0019      	movs	r1, r3
 8000a74:	0010      	movs	r0, r2
 8000a76:	f7ff fcf2 	bl	800045e <LL_TIM_OC_SetCompareCH1>
		LL_TIM_SetAutoReload(TIM15,	currentFreq);
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <PWM15_Test+0x34>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <PWM15_Test+0x30>)
 8000a80:	0019      	movs	r1, r3
 8000a82:	0010      	movs	r0, r2
 8000a84:	f7ff fcc6 	bl	8000414 <LL_TIM_SetAutoReload>

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40014000 	.word	0x40014000
 8000a94:	20000000 	.word	0x20000000

08000a98 <Init_USERBTN>:

void Init_USERBTN()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	expect_freq = LL_TIM_GetAutoReload(TIM15)/2;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <Init_USERBTN+0x2c>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fcc4 	bl	800042c <LL_TIM_GetAutoReload>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	085a      	lsrs	r2, r3, #1
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <Init_USERBTN+0x30>)
 8000aaa:	601a      	str	r2, [r3, #0]
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_0);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fc51 	bl	8000354 <LL_EXTI_EnableIT_0_31>
	LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_0);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fc6e 	bl	8000394 <LL_EXTI_EnableRisingTrig_0_31>
	LL_EXTI_EnableEvent_0_31(LL_EXTI_LINE_0);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fc5b 	bl	8000374 <LL_EXTI_EnableEvent_0_31>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40014000 	.word	0x40014000
 8000ac8:	200000ac 	.word	0x200000ac

08000acc <UserBTN_Callback>:
void UserBTN_Callback()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	static char swtch = 1;

	(swtch == 1) ? (currentFreq += 100 ) : (currentFreq -= 100);
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <UserBTN_Callback+0x6c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d106      	bne.n	8000ae6 <UserBTN_Callback+0x1a>
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <UserBTN_Callback+0x70>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3364      	adds	r3, #100	; 0x64
 8000ade:	001a      	movs	r2, r3
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <UserBTN_Callback+0x70>)
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e005      	b.n	8000af2 <UserBTN_Callback+0x26>
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <UserBTN_Callback+0x70>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3b64      	subs	r3, #100	; 0x64
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <UserBTN_Callback+0x70>)
 8000af0:	601a      	str	r2, [r3, #0]
	if(currentFreq >= 65535)
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <UserBTN_Callback+0x70>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <UserBTN_Callback+0x74>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d906      	bls.n	8000b0a <UserBTN_Callback+0x3e>
	{
		swtch = 0;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <UserBTN_Callback+0x6c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
		currentFreq = 65535;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <UserBTN_Callback+0x70>)
 8000b04:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <UserBTN_Callback+0x78>)
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e009      	b.n	8000b1e <UserBTN_Callback+0x52>
	}
	else if( currentFreq <= 100)
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <UserBTN_Callback+0x70>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b64      	cmp	r3, #100	; 0x64
 8000b10:	d805      	bhi.n	8000b1e <UserBTN_Callback+0x52>
	{
		swtch = 1;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <UserBTN_Callback+0x6c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
		currentFreq = 100;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <UserBTN_Callback+0x70>)
 8000b1a:	2264      	movs	r2, #100	; 0x64
 8000b1c:	601a      	str	r2, [r3, #0]
	}
	expect_freq = 48000000 /48 / (currentFreq );
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <UserBTN_Callback+0x70>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	0019      	movs	r1, r3
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <UserBTN_Callback+0x7c>)
 8000b26:	f7ff faf9 	bl	800011c <__udivsi3>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <UserBTN_Callback+0x80>)
 8000b30:	601a      	str	r2, [r3, #0]

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0000fffe 	.word	0x0000fffe
 8000b44:	0000ffff 	.word	0x0000ffff
 8000b48:	000f4240 	.word	0x000f4240
 8000b4c:	200000ac 	.word	0x200000ac

08000b50 <Init_TIM14_INCAP>:
void Init_TIM14_INCAP(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_CC1(TIM14);
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <Init_TIM14_INCAP+0x24>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fcdb 	bl	8000512 <LL_TIM_EnableIT_CC1>
	LL_TIM_CC_EnableChannel(TIM14, 		LL_TIM_CHANNEL_CH1);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <Init_TIM14_INCAP+0x24>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fc6d 	bl	8000440 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM14);
 8000b66:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <Init_TIM14_INCAP+0x24>)
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff fc45 	bl	80003f8 <LL_TIM_EnableCounter>

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40002000 	.word	0x40002000

08000b78 <Calgulate_FreqTim14>:

void Calgulate_FreqTim14()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_CC1(TIM14))
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <Calgulate_FreqTim14+0xc0>)
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fcb5 	bl	80004f0 <LL_TIM_IsActiveFlag_CC1>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d052      	beq.n	8000c30 <Calgulate_FreqTim14+0xb8>
	{
		LL_TIM_ClearFlag_CC1(TIM14);
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <Calgulate_FreqTim14+0xc0>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff fca3 	bl	80004d8 <LL_TIM_ClearFlag_CC1>
		LL_TIM_ClearFlag_UPDATE(TIM14);
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <Calgulate_FreqTim14+0xc0>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fc93 	bl	80004c0 <LL_TIM_ClearFlag_UPDATE>

		if(TIM14->CCER == LL_TIM_CHANNEL_CH1)
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <Calgulate_FreqTim14+0xc0>)
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d146      	bne.n	8000c30 <Calgulate_FreqTim14+0xb8>
		{
			if(!IS_TIM_CC1_INSTANCE(TIM14))
			return;
			if(is_first_capture == 0)
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <Calgulate_FreqTim14+0xc4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10a      	bne.n	8000bc0 <Calgulate_FreqTim14+0x48>
			{
				ic_value1 = LL_TIM_OC_GetCompareCH1(TIM14);
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <Calgulate_FreqTim14+0xc0>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fc6e 	bl	800048e <LL_TIM_OC_GetCompareCH1>
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <Calgulate_FreqTim14+0xc8>)
 8000bb6:	601a      	str	r2, [r3, #0]
				is_first_capture = 1;
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <Calgulate_FreqTim14+0xc4>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e037      	b.n	8000c30 <Calgulate_FreqTim14+0xb8>
			}
			else if(is_first_capture == 1)
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <Calgulate_FreqTim14+0xc4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d133      	bne.n	8000c30 <Calgulate_FreqTim14+0xb8>
			{
				ic_value2 = LL_TIM_OC_GetCompareCH1(TIM14);
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <Calgulate_FreqTim14+0xc0>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fc5f 	bl	800048e <LL_TIM_OC_GetCompareCH1>
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <Calgulate_FreqTim14+0xcc>)
 8000bd4:	601a      	str	r2, [r3, #0]

				if(ic_value2 > ic_value1)
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <Calgulate_FreqTim14+0xcc>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <Calgulate_FreqTim14+0xc8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d907      	bls.n	8000bf2 <Calgulate_FreqTim14+0x7a>
				{
					difference = ic_value2 - ic_value1;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <Calgulate_FreqTim14+0xcc>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <Calgulate_FreqTim14+0xc8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <Calgulate_FreqTim14+0xd0>)
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e00f      	b.n	8000c12 <Calgulate_FreqTim14+0x9a>
				}
				else if(ic_value2 < ic_value1)
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <Calgulate_FreqTim14+0xcc>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <Calgulate_FreqTim14+0xc8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d209      	bcs.n	8000c12 <Calgulate_FreqTim14+0x9a>
				{
					difference = (0xffff - ic_value1) + ic_value2 + 1;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <Calgulate_FreqTim14+0xcc>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <Calgulate_FreqTim14+0xc8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	0252      	lsls	r2, r2, #9
 8000c0c:	189a      	adds	r2, r3, r2
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <Calgulate_FreqTim14+0xd0>)
 8000c10:	601a      	str	r2, [r3, #0]
				{
				//	Error_Handler();
				}
	//			LL_RCC_ClocksTypeDef RCC_Clocks;
	//			LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
				uint32_t PCLK1_Frequency = 48000000;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <Calgulate_FreqTim14+0xd4>)
 8000c14:	607b      	str	r3, [r7, #4]
				freqTim14 = PCLK1_Frequency / difference;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <Calgulate_FreqTim14+0xd0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fa7d 	bl	800011c <__udivsi3>
 8000c22:	0003      	movs	r3, r0
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <Calgulate_FreqTim14+0xd8>)
 8000c28:	601a      	str	r2, [r3, #0]
				is_first_capture = 0;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <Calgulate_FreqTim14+0xc4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
			}

		}
	}
}
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40002000 	.word	0x40002000
 8000c3c:	200000a0 	.word	0x200000a0
 8000c40:	20000098 	.word	0x20000098
 8000c44:	2000009c 	.word	0x2000009c
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	02dc6c00 	.word	0x02dc6c00
 8000c50:	200000a8 	.word	0x200000a8

08000c54 <TIM_PWM_Init>:

void TIM_PWM_Init()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH4(TIM3, 0);
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <TIM_PWM_Init+0x3c>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fc0a 	bl	8000476 <LL_TIM_OC_SetCompareCH4>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	015b      	lsls	r3, r3, #5
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <TIM_PWM_Init+0x3c>)
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0010      	movs	r0, r2
 8000c6c:	f7ff fbe8 	bl	8000440 <LL_TIM_CC_EnableChannel>
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <TIM_PWM_Init+0x3c>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff fc24 	bl	80004c0 <LL_TIM_ClearFlag_UPDATE>
	/* Enable counter */
	LL_TIM_EnableCounter(TIM3);
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <TIM_PWM_Init+0x3c>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fbbc 	bl	80003f8 <LL_TIM_EnableCounter>

	/* Force update generation */
	LL_TIM_GenerateEvent_UPDATE(TIM3);
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <TIM_PWM_Init+0x3c>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fc53 	bl	800052e <LL_TIM_GenerateEvent_UPDATE>


}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	40000400 	.word	0x40000400

08000c94 <ssd1306_UpdateScreen>:
  * @brief   Write the screenbuffer with changed to the screen
  * @param  ------
  * @retval none
  */
void ssd1306_UpdateScreen()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
    uint8_t i;
    int sum = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]

    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e02f      	b.n	8000d06 <ssd1306_UpdateScreen+0x72>
    	sum+= ssd1306_WriteCommand( 0xB0 + i);
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	3b50      	subs	r3, #80	; 0x50
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fe78 	bl	80009a4 <ssd1306_WriteCommand>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	189b      	adds	r3, r3, r2
 8000cbc:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x00);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fe70 	bl	80009a4 <ssd1306_WriteCommand>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	189b      	adds	r3, r3, r2
 8000ccc:	603b      	str	r3, [r7, #0]
    	sum+= ssd1306_WriteCommand( 0x10);
 8000cce:	2010      	movs	r0, #16
 8000cd0:	f7ff fe68 	bl	80009a4 <ssd1306_WriteCommand>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	189b      	adds	r3, r3, r2
 8000cdc:	603b      	str	r3, [r7, #0]
    	sum+= I2C_Handle(0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	01da      	lsls	r2, r3, #7
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <ssd1306_UpdateScreen+0xa0>)
 8000ce6:	18d3      	adds	r3, r2, r3
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	0019      	movs	r1, r3
 8000cec:	2040      	movs	r0, #64	; 0x40
 8000cee:	f7ff fc45 	bl	800057c <I2C_Handle>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	189b      	adds	r3, r3, r2
 8000cfa:	603b      	str	r3, [r7, #0]
    for (i = 0; i < SSD1306_HEIGHT/4; i++) {
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	3201      	adds	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d9cb      	bls.n	8000ca6 <ssd1306_UpdateScreen+0x12>
    }
    if(sum != 0)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <ssd1306_UpdateScreen+0x8c>
    {
    	LED1_ON();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <ssd1306_UpdateScreen+0xa4>)
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff fc16 	bl	800054a <LL_GPIO_SetOutputPin>
    }
    else
    {
    	LED2_ON();
    }
}
 8000d1e:	e004      	b.n	8000d2a <ssd1306_UpdateScreen+0x96>
    	LED2_ON();
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <ssd1306_UpdateScreen+0xa4>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff fc10 	bl	800054a <LL_GPIO_SetOutputPin>
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200000d0 	.word	0x200000d0
 8000d38:	48000800 	.word	0x48000800

08000d3c <ssd1306_Fill>:
  * @brief   Fill the whole screen with the given color
  * @param  ------
  * @retval none
  */
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	0002      	movs	r2, r0
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	701a      	strb	r2, [r3, #0]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e00e      	b.n	8000d6c <ssd1306_Fill+0x30>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <ssd1306_Fill+0x1e>
 8000d56:	2100      	movs	r1, #0
 8000d58:	e000      	b.n	8000d5c <ssd1306_Fill+0x20>
 8000d5a:	21ff      	movs	r1, #255	; 0xff
 8000d5c:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <ssd1306_Fill+0x44>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	1c0a      	adds	r2, r1, #0
 8000d64:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3eb      	bcc.n	8000d4e <ssd1306_Fill+0x12>
    }
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000d0 	.word	0x200000d0

08000d84 <ssd1306_WriteString>:
  * @brief   Write full string to screenbuffer
  * @param  ------
  * @retval none
  */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	1d38      	adds	r0, r7, #4
 8000d8e:	6001      	str	r1, [r0, #0]
 8000d90:	6042      	str	r2, [r0, #4]
 8000d92:	001a      	movs	r2, r3
 8000d94:	1cfb      	adds	r3, r7, #3
 8000d96:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str)
 8000d98:	e014      	b.n	8000dc4 <ssd1306_WriteString+0x40>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	7818      	ldrb	r0, [r3, #0]
 8000d9e:	1cfb      	adds	r3, r7, #3
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	1d3a      	adds	r2, r7, #4
 8000da4:	6811      	ldr	r1, [r2, #0]
 8000da6:	6852      	ldr	r2, [r2, #4]
 8000da8:	f000 f8a0 	bl	8000eec <ssd1306_WriteChar>
 8000dac:	0003      	movs	r3, r0
 8000dae:	001a      	movs	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d002      	beq.n	8000dbe <ssd1306_WriteString+0x3a>
        {
            // Char could not be written
            return *str;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	e008      	b.n	8000dd0 <ssd1306_WriteString+0x4c>
        }

        // Next char
        str++;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1e6      	bne.n	8000d9a <ssd1306_WriteString+0x16>
    }

    // Everything ok
    return *str;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <ssd1306_DrawPixel>:
  * 		Y => Y Coordinate
  * 		color => Pixel color
  * @retval none
  */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	0004      	movs	r4, r0
 8000de0:	0008      	movs	r0, r1
 8000de2:	0011      	movs	r1, r2
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	1c22      	adds	r2, r4, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	1dbb      	adds	r3, r7, #6
 8000dec:	1c02      	adds	r2, r0, #0
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	1d7b      	adds	r3, r7, #5
 8000df2:	1c0a      	adds	r2, r1, #0
 8000df4:	701a      	strb	r2, [r3, #0]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db52      	blt.n	8000ea6 <ssd1306_DrawPixel+0xce>
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b1f      	cmp	r3, #31
 8000e06:	d84e      	bhi.n	8000ea6 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <ssd1306_DrawPixel+0xd8>)
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <ssd1306_DrawPixel+0x46>
    {
        color = (SSD1306_COLOR)!color;
 8000e10:	1d7b      	adds	r3, r7, #5
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	425a      	negs	r2, r3
 8000e16:	4153      	adcs	r3, r2
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	1d7b      	adds	r3, r7, #5
 8000e1c:	701a      	strb	r2, [r3, #0]
    }

    // Draw in the correct color
    if (color == White)
 8000e1e:	1d7b      	adds	r3, r7, #5
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d11e      	bne.n	8000e64 <ssd1306_DrawPixel+0x8c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	1dbb      	adds	r3, r7, #6
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	b2d8      	uxtb	r0, r3
 8000e32:	0003      	movs	r3, r0
 8000e34:	01db      	lsls	r3, r3, #7
 8000e36:	18d3      	adds	r3, r2, r3
 8000e38:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <ssd1306_DrawPixel+0xdc>)
 8000e3a:	5cd3      	ldrb	r3, [r2, r3]
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	1dbb      	adds	r3, r7, #6
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2107      	movs	r1, #7
 8000e44:	400b      	ands	r3, r1
 8000e46:	2101      	movs	r1, #1
 8000e48:	4099      	lsls	r1, r3
 8000e4a:	000b      	movs	r3, r1
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b259      	sxtb	r1, r3
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	0003      	movs	r3, r0
 8000e58:	01db      	lsls	r3, r3, #7
 8000e5a:	18d3      	adds	r3, r2, r3
 8000e5c:	b2c9      	uxtb	r1, r1
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <ssd1306_DrawPixel+0xdc>)
 8000e60:	54d1      	strb	r1, [r2, r3]
 8000e62:	e021      	b.n	8000ea8 <ssd1306_DrawPixel+0xd0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	b2d8      	uxtb	r0, r3
 8000e70:	0003      	movs	r3, r0
 8000e72:	01db      	lsls	r3, r3, #7
 8000e74:	18d3      	adds	r3, r2, r3
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <ssd1306_DrawPixel+0xdc>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	1dba      	adds	r2, r7, #6
 8000e7e:	7812      	ldrb	r2, [r2, #0]
 8000e80:	2107      	movs	r1, #7
 8000e82:	400a      	ands	r2, r1
 8000e84:	2101      	movs	r1, #1
 8000e86:	4091      	lsls	r1, r2
 8000e88:	000a      	movs	r2, r1
 8000e8a:	b252      	sxtb	r2, r2
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	b252      	sxtb	r2, r2
 8000e90:	4013      	ands	r3, r2
 8000e92:	b259      	sxtb	r1, r3
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	0003      	movs	r3, r0
 8000e9a:	01db      	lsls	r3, r3, #7
 8000e9c:	18d3      	adds	r3, r2, r3
 8000e9e:	b2c9      	uxtb	r1, r1
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <ssd1306_DrawPixel+0xdc>)
 8000ea2:	54d1      	strb	r1, [r2, r3]
 8000ea4:	e000      	b.n	8000ea8 <ssd1306_DrawPixel+0xd0>
        return;
 8000ea6:	46c0      	nop			; (mov r8, r8)
    }
}
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b003      	add	sp, #12
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	200000c8 	.word	0x200000c8
 8000eb4:	200000d0 	.word	0x200000d0

08000eb8 <ssd1306_SetCursor>:
  * @param  x      => axis
  * 		y      => axis
  * @retval none
  */
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	1c0a      	adds	r2, r1, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <ssd1306_SetCursor+0x30>)
 8000ed2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <ssd1306_SetCursor+0x30>)
 8000edc:	805a      	strh	r2, [r3, #2]
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	200000c8 	.word	0x200000c8

08000eec <ssd1306_WriteChar>:
  * 		Font    => Font to use
  * 		color   => Black or White
  * @retval char
  */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0004      	movs	r4, r0
 8000ef4:	1d38      	adds	r0, r7, #4
 8000ef6:	6001      	str	r1, [r0, #0]
 8000ef8:	6042      	str	r2, [r0, #4]
 8000efa:	0019      	movs	r1, r3
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	1c22      	adds	r2, r4, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	230e      	movs	r3, #14
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	1c0a      	adds	r2, r1, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	001a      	movs	r2, r3
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	18d3      	adds	r3, r2, r3
 8000f18:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1a:	dc07      	bgt.n	8000f2c <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000f1e:	885b      	ldrh	r3, [r3, #2]
 8000f20:	001a      	movs	r2, r3
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	dd01      	ble.n	8000f30 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e066      	b.n	8000ffe <ssd1306_WriteChar+0x112>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	e051      	b.n	8000fda <ssd1306_WriteChar+0xee>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3b20      	subs	r3, #32
 8000f42:	1d39      	adds	r1, r7, #4
 8000f44:	7849      	ldrb	r1, [r1, #1]
 8000f46:	434b      	muls	r3, r1
 8000f48:	0019      	movs	r1, r3
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	18cb      	adds	r3, r1, r3
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	e035      	b.n	8000fc8 <ssd1306_WriteChar+0xdc>
        {
            if ((b << j) & 0x8000)
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	409a      	lsls	r2, r3
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	4013      	ands	r3, r2
 8000f68:	d014      	beq.n	8000f94 <ssd1306_WriteChar+0xa8>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	18d3      	adds	r3, r2, r3
 8000f76:	b2d8      	uxtb	r0, r3
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	230e      	movs	r3, #14
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	f7ff ff23 	bl	8000dd8 <ssd1306_DrawPixel>
 8000f92:	e016      	b.n	8000fc2 <ssd1306_WriteChar+0xd6>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	18d3      	adds	r3, r2, r3
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	18d3      	adds	r3, r2, r3
 8000fae:	b2d9      	uxtb	r1, r3
 8000fb0:	230e      	movs	r3, #14
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	425a      	negs	r2, r3
 8000fb8:	4153      	adcs	r3, r2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	f7ff ff0b 	bl	8000dd8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d3c3      	bcc.n	8000f5c <ssd1306_WriteChar+0x70>
    for (i = 0; i < Font.FontHeight; i++)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	001a      	movs	r2, r3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d3a7      	bcc.n	8000f36 <ssd1306_WriteChar+0x4a>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <ssd1306_WriteChar+0x11c>)
 8000ff6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b009      	add	sp, #36	; 0x24
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	200000c8 	.word	0x200000c8

0800100c <BSL_Tick>:
    LL_mDelay(Period);
  }
}

void BSL_Tick()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	static __IO uint32_t cntr_ms_50 = 0;
	static __IO uint32_t cntr_ms_500 = 0;
	static __IO uint32_t cntr_ms_3000 = 0;

	if(++cntr_ms_50 >49)
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <BSL_Tick+0x60>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <BSL_Tick+0x60>)
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	2b31      	cmp	r3, #49	; 0x31
 800101c:	d905      	bls.n	800102a <BSL_Tick+0x1e>
	{
		ms50ms = true;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <BSL_Tick+0x64>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
		cntr_ms_50 = 0;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <BSL_Tick+0x60>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
	}
	if(++cntr_ms_500 >499)
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <BSL_Tick+0x68>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <BSL_Tick+0x68>)
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	22fa      	movs	r2, #250	; 0xfa
 8001036:	0052      	lsls	r2, r2, #1
 8001038:	4293      	cmp	r3, r2
 800103a:	d305      	bcc.n	8001048 <BSL_Tick+0x3c>
		{
			ms500ms = true;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <BSL_Tick+0x6c>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
			cntr_ms_500 = 0;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <BSL_Tick+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
		}
	if(++cntr_ms_3000 > 2999)
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <BSL_Tick+0x70>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <BSL_Tick+0x70>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <BSL_Tick+0x74>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d905      	bls.n	8001064 <BSL_Tick+0x58>
	{
		ms3000ms = true;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <BSL_Tick+0x78>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
		cntr_ms_3000 = 0;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <BSL_Tick+0x70>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
	}
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	200000b0 	.word	0x200000b0
 8001070:	20000094 	.word	0x20000094
 8001074:	200000b4 	.word	0x200000b4
 8001078:	20000096 	.word	0x20000096
 800107c:	200000b8 	.word	0x200000b8
 8001080:	00000bb7 	.word	0x00000bb7
 8001084:	20000095 	.word	0x20000095

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	0002      	movs	r2, r0
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b7f      	cmp	r3, #127	; 0x7f
 800109a:	d809      	bhi.n	80010b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	001a      	movs	r2, r3
 80010a2:	231f      	movs	r3, #31
 80010a4:	401a      	ands	r2, r3
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_EnableIRQ+0x30>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	4091      	lsls	r1, r2
 80010ac:	000a      	movs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
  }
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	0002      	movs	r2, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b7f      	cmp	r3, #127	; 0x7f
 80010d0:	d828      	bhi.n	8001124 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d2:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <__NVIC_SetPriority+0xd4>)
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	33c0      	adds	r3, #192	; 0xc0
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	589b      	ldr	r3, [r3, r2]
 80010e2:	1dfa      	adds	r2, r7, #7
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	0011      	movs	r1, r2
 80010e8:	2203      	movs	r2, #3
 80010ea:	400a      	ands	r2, r1
 80010ec:	00d2      	lsls	r2, r2, #3
 80010ee:	21ff      	movs	r1, #255	; 0xff
 80010f0:	4091      	lsls	r1, r2
 80010f2:	000a      	movs	r2, r1
 80010f4:	43d2      	mvns	r2, r2
 80010f6:	401a      	ands	r2, r3
 80010f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	019b      	lsls	r3, r3, #6
 80010fe:	22ff      	movs	r2, #255	; 0xff
 8001100:	401a      	ands	r2, r3
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	0018      	movs	r0, r3
 8001108:	2303      	movs	r3, #3
 800110a:	4003      	ands	r3, r0
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001110:	481f      	ldr	r0, [pc, #124]	; (8001190 <__NVIC_SetPriority+0xd4>)
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b25b      	sxtb	r3, r3
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	430a      	orrs	r2, r1
 800111c:	33c0      	adds	r3, #192	; 0xc0
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001122:	e031      	b.n	8001188 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <__NVIC_SetPriority+0xd8>)
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0019      	movs	r1, r3
 800112c:	230f      	movs	r3, #15
 800112e:	400b      	ands	r3, r1
 8001130:	3b08      	subs	r3, #8
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3306      	adds	r3, #6
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	18d3      	adds	r3, r2, r3
 800113a:	3304      	adds	r3, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1dfa      	adds	r2, r7, #7
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	0011      	movs	r1, r2
 8001144:	2203      	movs	r2, #3
 8001146:	400a      	ands	r2, r1
 8001148:	00d2      	lsls	r2, r2, #3
 800114a:	21ff      	movs	r1, #255	; 0xff
 800114c:	4091      	lsls	r1, r2
 800114e:	000a      	movs	r2, r1
 8001150:	43d2      	mvns	r2, r2
 8001152:	401a      	ands	r2, r3
 8001154:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	22ff      	movs	r2, #255	; 0xff
 800115c:	401a      	ands	r2, r3
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	0018      	movs	r0, r3
 8001164:	2303      	movs	r3, #3
 8001166:	4003      	ands	r3, r0
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <__NVIC_SetPriority+0xd8>)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	001c      	movs	r4, r3
 8001174:	230f      	movs	r3, #15
 8001176:	4023      	ands	r3, r4
 8001178:	3b08      	subs	r3, #8
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	430a      	orrs	r2, r1
 800117e:	3306      	adds	r3, #6
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	18c3      	adds	r3, r0, r3
 8001184:	3304      	adds	r3, #4
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b003      	add	sp, #12
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <LL_I2C_EnableClockStretching>:
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a03      	ldr	r2, [pc, #12]	; (80011b4 <LL_I2C_EnableClockStretching+0x1c>)
 80011a6:	401a      	ands	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	fffdffff 	.word	0xfffdffff

080011b8 <LL_I2C_DisableGeneralCall>:
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <LL_I2C_DisableGeneralCall+0x1c>)
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	fff7ffff 	.word	0xfff7ffff

080011d8 <LL_I2C_SetOwnAddress2>:
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <LL_I2C_SetOwnAddress2+0x28>)
 80011ea:	401a      	ands	r2, r3
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	60da      	str	r2, [r3, #12]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	fffff801 	.word	0xfffff801

08001204 <LL_I2C_DisableOwnAddress2>:
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <LL_I2C_DisableOwnAddress2+0x1c>)
 8001212:	401a      	ands	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	ffff7fff 	.word	0xffff7fff

08001224 <LL_I2C_EnableAutoEndMode>:
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0492      	lsls	r2, r2, #18
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	605a      	str	r2, [r3, #4]
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <LL_RCC_HSI_Enable+0x18>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <LL_RCC_HSI_Enable+0x18>)
 800124e:	2101      	movs	r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	40021000 	.word	0x40021000

08001260 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <LL_RCC_HSI_IsReady+0x1c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	3b02      	subs	r3, #2
 800126e:	425a      	negs	r2, r3
 8001270:	4153      	adcs	r3, r2
 8001272:	b2db      	uxtb	r3, r3
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40021000 	.word	0x40021000

08001280 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	22f8      	movs	r2, #248	; 0xf8
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	00da      	lsls	r2, r3, #3
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000

080012a8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <LL_RCC_SetSysClkSource+0x24>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4393      	bics	r3, r2
 80012b8:	0019      	movs	r1, r3
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <LL_RCC_SetSysClkSource+0x24>)
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	430a      	orrs	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	40021000 	.word	0x40021000

080012d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <LL_RCC_GetSysClkSource+0x14>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	220c      	movs	r2, #12
 80012da:	4013      	ands	r3, r2
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	40021000 	.word	0x40021000

080012e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <LL_RCC_SetAHBPrescaler+0x24>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	22f0      	movs	r2, #240	; 0xf0
 80012f6:	4393      	bics	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <LL_RCC_SetAHBPrescaler+0x24>)
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	430a      	orrs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000

08001310 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <LL_RCC_SetAPB1Prescaler+0x24>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <LL_RCC_SetAPB1Prescaler+0x28>)
 800131e:	4013      	ands	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40021000 	.word	0x40021000
 8001338:	fffff8ff 	.word	0xfffff8ff

0800133c <LL_RCC_ConfigMCO>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
#if defined(RCC_CFGR_MCOPRE)
#if defined(RCC_CFGR_PLLNODIV)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE | RCC_CFGR_PLLNODIV, MCOxSource | MCOxPrescaler);
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <LL_RCC_ConfigMCO+0x28>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	0a19      	lsrs	r1, r3, #8
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	431a      	orrs	r2, r3
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <LL_RCC_ConfigMCO+0x28>)
 8001356:	430a      	orrs	r2, r1
 8001358:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
#endif /* RCC_CFGR_PLLNODIV */
#else
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL, MCOxSource);
#endif /* RCC_CFGR_MCOPRE */
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	40021000 	.word	0x40021000

08001368 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <LL_RCC_PLL_Enable+0x18>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <LL_RCC_PLL_Enable+0x18>)
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	0449      	lsls	r1, r1, #17
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000

08001384 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <LL_RCC_PLL_IsReady+0x24>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	049b      	lsls	r3, r3, #18
 8001390:	4013      	ands	r3, r2
 8001392:	22fe      	movs	r2, #254	; 0xfe
 8001394:	0612      	lsls	r2, r2, #24
 8001396:	4694      	mov	ip, r2
 8001398:	4463      	add	r3, ip
 800139a:	425a      	negs	r2, r3
 800139c:	4153      	adcs	r3, r2
 800139e:	b2db      	uxtb	r3, r3
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	40021000 	.word	0x40021000

080013ac <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 80013be:	4013      	ands	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80013ca:	430a      	orrs	r2, r1
 80013cc:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	220f      	movs	r2, #15
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	430a      	orrs	r2, r1
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b004      	add	sp, #16
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	ffc27fff 	.word	0xffc27fff

080013f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <LL_AHB1_GRP1_EnableClock+0x28>)
 80013fa:	6959      	ldr	r1, [r3, #20]
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <LL_AHB1_GRP1_EnableClock+0x28>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	430a      	orrs	r2, r1
 8001402:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4013      	ands	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b004      	add	sp, #16
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000

0800141c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <LL_APB1_GRP1_EnableClock+0x28>)
 8001426:	69d9      	ldr	r1, [r3, #28]
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <LL_APB1_GRP1_EnableClock+0x28>)
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	430a      	orrs	r2, r1
 800142e:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <LL_APB1_GRP1_EnableClock+0x28>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000

08001448 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <LL_APB1_GRP2_EnableClock+0x28>)
 8001452:	6999      	ldr	r1, [r3, #24]
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <LL_APB1_GRP2_EnableClock+0x28>)
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	430a      	orrs	r2, r1
 800145a:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <LL_APB1_GRP2_EnableClock+0x28>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <LL_SYSCFG_SetEXTISource+0x48>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	21ff      	movs	r1, #255	; 0xff
 8001484:	400b      	ands	r3, r1
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	589b      	ldr	r3, [r3, r2]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	0c12      	lsrs	r2, r2, #16
 8001490:	210f      	movs	r1, #15
 8001492:	4091      	lsls	r1, r2
 8001494:	000a      	movs	r2, r1
 8001496:	43d2      	mvns	r2, r2
 8001498:	401a      	ands	r2, r3
 800149a:	0011      	movs	r1, r2
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	0c1b      	lsrs	r3, r3, #16
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	409a      	lsls	r2, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <LL_SYSCFG_SetEXTISource+0x48>)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	24ff      	movs	r4, #255	; 0xff
 80014aa:	4023      	ands	r3, r4
 80014ac:	430a      	orrs	r2, r1
 80014ae:	3302      	adds	r3, #2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	501a      	str	r2, [r3, r0]
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b003      	add	sp, #12
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	40010000 	.word	0x40010000

080014c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <LL_FLASH_SetLatency+0x24>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4393      	bics	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <LL_FLASH_SetLatency+0x24>)
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	40022000 	.word	0x40022000

080014e8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <LL_FLASH_GetLatency+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	40022000 	.word	0x40022000

08001500 <LL_TIM_EnableARRPreload>:
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <LL_TIM_DisableARRPreload>:
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	4393      	bics	r3, r2
 800152c:	001a      	movs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <LL_TIM_OC_DisableFast>:
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d01e      	beq.n	800158a <LL_TIM_OC_DisableFast+0x4e>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b04      	cmp	r3, #4
 8001550:	d019      	beq.n	8001586 <LL_TIM_OC_DisableFast+0x4a>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b10      	cmp	r3, #16
 8001556:	d014      	beq.n	8001582 <LL_TIM_OC_DisableFast+0x46>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b40      	cmp	r3, #64	; 0x40
 800155c:	d00f      	beq.n	800157e <LL_TIM_OC_DisableFast+0x42>
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	429a      	cmp	r2, r3
 8001566:	d008      	beq.n	800157a <LL_TIM_OC_DisableFast+0x3e>
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	429a      	cmp	r2, r3
 8001570:	d101      	bne.n	8001576 <LL_TIM_OC_DisableFast+0x3a>
 8001572:	2305      	movs	r3, #5
 8001574:	e00a      	b.n	800158c <LL_TIM_OC_DisableFast+0x50>
 8001576:	2306      	movs	r3, #6
 8001578:	e008      	b.n	800158c <LL_TIM_OC_DisableFast+0x50>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <LL_TIM_OC_DisableFast+0x50>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <LL_TIM_OC_DisableFast+0x50>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <LL_TIM_OC_DisableFast+0x50>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_TIM_OC_DisableFast+0x50>
 800158a:	2300      	movs	r3, #0
 800158c:	200f      	movs	r0, #15
 800158e:	183a      	adds	r2, r7, r0
 8001590:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3318      	adds	r3, #24
 8001596:	0019      	movs	r1, r3
 8001598:	183b      	adds	r3, r7, r0
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LL_TIM_OC_DisableFast+0x8c>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	18cb      	adds	r3, r1, r3
 80015a2:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	183a      	adds	r2, r7, r0
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <LL_TIM_OC_DisableFast+0x90>)
 80015ae:	5c8a      	ldrb	r2, [r1, r2]
 80015b0:	0011      	movs	r1, r2
 80015b2:	2204      	movs	r2, #4
 80015b4:	408a      	lsls	r2, r1
 80015b6:	43d2      	mvns	r2, r2
 80015b8:	401a      	ands	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	08004000 	.word	0x08004000
 80015cc:	08004008 	.word	0x08004008

080015d0 <LL_TIM_OC_EnablePreload>:
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d01e      	beq.n	800161e <LL_TIM_OC_EnablePreload+0x4e>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d019      	beq.n	800161a <LL_TIM_OC_EnablePreload+0x4a>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b10      	cmp	r3, #16
 80015ea:	d014      	beq.n	8001616 <LL_TIM_OC_EnablePreload+0x46>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b40      	cmp	r3, #64	; 0x40
 80015f0:	d00f      	beq.n	8001612 <LL_TIM_OC_EnablePreload+0x42>
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d008      	beq.n	800160e <LL_TIM_OC_EnablePreload+0x3e>
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	429a      	cmp	r2, r3
 8001604:	d101      	bne.n	800160a <LL_TIM_OC_EnablePreload+0x3a>
 8001606:	2305      	movs	r3, #5
 8001608:	e00a      	b.n	8001620 <LL_TIM_OC_EnablePreload+0x50>
 800160a:	2306      	movs	r3, #6
 800160c:	e008      	b.n	8001620 <LL_TIM_OC_EnablePreload+0x50>
 800160e:	2304      	movs	r3, #4
 8001610:	e006      	b.n	8001620 <LL_TIM_OC_EnablePreload+0x50>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <LL_TIM_OC_EnablePreload+0x50>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <LL_TIM_OC_EnablePreload+0x50>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_TIM_OC_EnablePreload+0x50>
 800161e:	2300      	movs	r3, #0
 8001620:	200f      	movs	r0, #15
 8001622:	183a      	adds	r2, r7, r0
 8001624:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3318      	adds	r3, #24
 800162a:	0019      	movs	r1, r3
 800162c:	183b      	adds	r3, r7, r0
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <LL_TIM_OC_EnablePreload+0x88>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	18cb      	adds	r3, r1, r3
 8001636:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	183b      	adds	r3, r7, r0
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4906      	ldr	r1, [pc, #24]	; (800165c <LL_TIM_OC_EnablePreload+0x8c>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	0019      	movs	r1, r3
 8001646:	2308      	movs	r3, #8
 8001648:	408b      	lsls	r3, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b004      	add	sp, #16
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08004000 	.word	0x08004000
 800165c:	08004008 	.word	0x08004008

08001660 <LL_TIM_IC_SetActiveInput>:
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d01e      	beq.n	80016b0 <LL_TIM_IC_SetActiveInput+0x50>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d019      	beq.n	80016ac <LL_TIM_IC_SetActiveInput+0x4c>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d014      	beq.n	80016a8 <LL_TIM_IC_SetActiveInput+0x48>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b40      	cmp	r3, #64	; 0x40
 8001682:	d00f      	beq.n	80016a4 <LL_TIM_IC_SetActiveInput+0x44>
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	429a      	cmp	r2, r3
 800168c:	d008      	beq.n	80016a0 <LL_TIM_IC_SetActiveInput+0x40>
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	429a      	cmp	r2, r3
 8001696:	d101      	bne.n	800169c <LL_TIM_IC_SetActiveInput+0x3c>
 8001698:	2305      	movs	r3, #5
 800169a:	e00a      	b.n	80016b2 <LL_TIM_IC_SetActiveInput+0x52>
 800169c:	2306      	movs	r3, #6
 800169e:	e008      	b.n	80016b2 <LL_TIM_IC_SetActiveInput+0x52>
 80016a0:	2304      	movs	r3, #4
 80016a2:	e006      	b.n	80016b2 <LL_TIM_IC_SetActiveInput+0x52>
 80016a4:	2303      	movs	r3, #3
 80016a6:	e004      	b.n	80016b2 <LL_TIM_IC_SetActiveInput+0x52>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e002      	b.n	80016b2 <LL_TIM_IC_SetActiveInput+0x52>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <LL_TIM_IC_SetActiveInput+0x52>
 80016b0:	2300      	movs	r3, #0
 80016b2:	2017      	movs	r0, #23
 80016b4:	183a      	adds	r2, r7, r0
 80016b6:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3318      	adds	r3, #24
 80016bc:	0019      	movs	r1, r3
 80016be:	183b      	adds	r3, r7, r0
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LL_TIM_IC_SetActiveInput+0x9c>)
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	18cb      	adds	r3, r1, r3
 80016c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	183a      	adds	r2, r7, r0
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	490b      	ldr	r1, [pc, #44]	; (8001700 <LL_TIM_IC_SetActiveInput+0xa0>)
 80016d4:	5c8a      	ldrb	r2, [r1, r2]
 80016d6:	0011      	movs	r1, r2
 80016d8:	2203      	movs	r2, #3
 80016da:	408a      	lsls	r2, r1
 80016dc:	43d2      	mvns	r2, r2
 80016de:	401a      	ands	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	1839      	adds	r1, r7, r0
 80016e6:	7809      	ldrb	r1, [r1, #0]
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <LL_TIM_IC_SetActiveInput+0xa0>)
 80016ea:	5c41      	ldrb	r1, [r0, r1]
 80016ec:	408b      	lsls	r3, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b006      	add	sp, #24
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	08004000 	.word	0x08004000
 8001700:	08004010 	.word	0x08004010

08001704 <LL_TIM_IC_SetPrescaler>:
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d01e      	beq.n	8001754 <LL_TIM_IC_SetPrescaler+0x50>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d019      	beq.n	8001750 <LL_TIM_IC_SetPrescaler+0x4c>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b10      	cmp	r3, #16
 8001720:	d014      	beq.n	800174c <LL_TIM_IC_SetPrescaler+0x48>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d00f      	beq.n	8001748 <LL_TIM_IC_SetPrescaler+0x44>
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	429a      	cmp	r2, r3
 8001730:	d008      	beq.n	8001744 <LL_TIM_IC_SetPrescaler+0x40>
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	429a      	cmp	r2, r3
 800173a:	d101      	bne.n	8001740 <LL_TIM_IC_SetPrescaler+0x3c>
 800173c:	2305      	movs	r3, #5
 800173e:	e00a      	b.n	8001756 <LL_TIM_IC_SetPrescaler+0x52>
 8001740:	2306      	movs	r3, #6
 8001742:	e008      	b.n	8001756 <LL_TIM_IC_SetPrescaler+0x52>
 8001744:	2304      	movs	r3, #4
 8001746:	e006      	b.n	8001756 <LL_TIM_IC_SetPrescaler+0x52>
 8001748:	2303      	movs	r3, #3
 800174a:	e004      	b.n	8001756 <LL_TIM_IC_SetPrescaler+0x52>
 800174c:	2302      	movs	r3, #2
 800174e:	e002      	b.n	8001756 <LL_TIM_IC_SetPrescaler+0x52>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <LL_TIM_IC_SetPrescaler+0x52>
 8001754:	2300      	movs	r3, #0
 8001756:	2017      	movs	r0, #23
 8001758:	183a      	adds	r2, r7, r0
 800175a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3318      	adds	r3, #24
 8001760:	0019      	movs	r1, r3
 8001762:	183b      	adds	r3, r7, r0
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <LL_TIM_IC_SetPrescaler+0x9c>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	18cb      	adds	r3, r1, r3
 800176c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	183a      	adds	r2, r7, r0
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	490b      	ldr	r1, [pc, #44]	; (80017a4 <LL_TIM_IC_SetPrescaler+0xa0>)
 8001778:	5c8a      	ldrb	r2, [r1, r2]
 800177a:	0011      	movs	r1, r2
 800177c:	220c      	movs	r2, #12
 800177e:	408a      	lsls	r2, r1
 8001780:	43d2      	mvns	r2, r2
 8001782:	401a      	ands	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	1839      	adds	r1, r7, r0
 800178a:	7809      	ldrb	r1, [r1, #0]
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <LL_TIM_IC_SetPrescaler+0xa0>)
 800178e:	5c41      	ldrb	r1, [r0, r1]
 8001790:	408b      	lsls	r3, r1
 8001792:	431a      	orrs	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	601a      	str	r2, [r3, #0]
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b006      	add	sp, #24
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	08004000 	.word	0x08004000
 80017a4:	08004010 	.word	0x08004010

080017a8 <LL_TIM_IC_SetFilter>:
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d01e      	beq.n	80017f8 <LL_TIM_IC_SetFilter+0x50>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d019      	beq.n	80017f4 <LL_TIM_IC_SetFilter+0x4c>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d014      	beq.n	80017f0 <LL_TIM_IC_SetFilter+0x48>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b40      	cmp	r3, #64	; 0x40
 80017ca:	d00f      	beq.n	80017ec <LL_TIM_IC_SetFilter+0x44>
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d008      	beq.n	80017e8 <LL_TIM_IC_SetFilter+0x40>
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	429a      	cmp	r2, r3
 80017de:	d101      	bne.n	80017e4 <LL_TIM_IC_SetFilter+0x3c>
 80017e0:	2305      	movs	r3, #5
 80017e2:	e00a      	b.n	80017fa <LL_TIM_IC_SetFilter+0x52>
 80017e4:	2306      	movs	r3, #6
 80017e6:	e008      	b.n	80017fa <LL_TIM_IC_SetFilter+0x52>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e006      	b.n	80017fa <LL_TIM_IC_SetFilter+0x52>
 80017ec:	2303      	movs	r3, #3
 80017ee:	e004      	b.n	80017fa <LL_TIM_IC_SetFilter+0x52>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e002      	b.n	80017fa <LL_TIM_IC_SetFilter+0x52>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LL_TIM_IC_SetFilter+0x52>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2017      	movs	r0, #23
 80017fc:	183a      	adds	r2, r7, r0
 80017fe:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3318      	adds	r3, #24
 8001804:	0019      	movs	r1, r3
 8001806:	183b      	adds	r3, r7, r0
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LL_TIM_IC_SetFilter+0x9c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	18cb      	adds	r3, r1, r3
 8001810:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	183a      	adds	r2, r7, r0
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	490b      	ldr	r1, [pc, #44]	; (8001848 <LL_TIM_IC_SetFilter+0xa0>)
 800181c:	5c8a      	ldrb	r2, [r1, r2]
 800181e:	0011      	movs	r1, r2
 8001820:	22f0      	movs	r2, #240	; 0xf0
 8001822:	408a      	lsls	r2, r1
 8001824:	43d2      	mvns	r2, r2
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	1839      	adds	r1, r7, r0
 800182e:	7809      	ldrb	r1, [r1, #0]
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <LL_TIM_IC_SetFilter+0xa0>)
 8001832:	5c41      	ldrb	r1, [r0, r1]
 8001834:	408b      	lsls	r3, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b006      	add	sp, #24
 8001842:	bd80      	pop	{r7, pc}
 8001844:	08004000 	.word	0x08004000
 8001848:	08004010 	.word	0x08004010

0800184c <LL_TIM_IC_SetPolarity>:
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d01e      	beq.n	800189c <LL_TIM_IC_SetPolarity+0x50>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d019      	beq.n	8001898 <LL_TIM_IC_SetPolarity+0x4c>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d014      	beq.n	8001894 <LL_TIM_IC_SetPolarity+0x48>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b40      	cmp	r3, #64	; 0x40
 800186e:	d00f      	beq.n	8001890 <LL_TIM_IC_SetPolarity+0x44>
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	429a      	cmp	r2, r3
 8001878:	d008      	beq.n	800188c <LL_TIM_IC_SetPolarity+0x40>
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	429a      	cmp	r2, r3
 8001882:	d101      	bne.n	8001888 <LL_TIM_IC_SetPolarity+0x3c>
 8001884:	2305      	movs	r3, #5
 8001886:	e00a      	b.n	800189e <LL_TIM_IC_SetPolarity+0x52>
 8001888:	2306      	movs	r3, #6
 800188a:	e008      	b.n	800189e <LL_TIM_IC_SetPolarity+0x52>
 800188c:	2304      	movs	r3, #4
 800188e:	e006      	b.n	800189e <LL_TIM_IC_SetPolarity+0x52>
 8001890:	2303      	movs	r3, #3
 8001892:	e004      	b.n	800189e <LL_TIM_IC_SetPolarity+0x52>
 8001894:	2302      	movs	r3, #2
 8001896:	e002      	b.n	800189e <LL_TIM_IC_SetPolarity+0x52>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <LL_TIM_IC_SetPolarity+0x52>
 800189c:	2300      	movs	r3, #0
 800189e:	2017      	movs	r0, #23
 80018a0:	183a      	adds	r2, r7, r0
 80018a2:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	183a      	adds	r2, r7, r0
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	490a      	ldr	r1, [pc, #40]	; (80018d8 <LL_TIM_IC_SetPolarity+0x8c>)
 80018ae:	5c8a      	ldrb	r2, [r1, r2]
 80018b0:	0011      	movs	r1, r2
 80018b2:	220a      	movs	r2, #10
 80018b4:	408a      	lsls	r2, r1
 80018b6:	43d2      	mvns	r2, r2
 80018b8:	401a      	ands	r2, r3
 80018ba:	183b      	adds	r3, r7, r0
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4906      	ldr	r1, [pc, #24]	; (80018d8 <LL_TIM_IC_SetPolarity+0x8c>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	408b      	lsls	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	621a      	str	r2, [r3, #32]
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b006      	add	sp, #24
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	08004018 	.word	0x08004018

080018dc <LL_TIM_SetTriggerOutput>:
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2270      	movs	r2, #112	; 0x70
 80018ec:	4393      	bics	r3, r2
 80018ee:	001a      	movs	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}

08001900 <LL_TIM_DisableMasterSlaveMode>:
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	4393      	bics	r3, r2
 8001910:	001a      	movs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}

0800191e <LL_TIM_EnableIT_UPDATE>:
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60da      	str	r2, [r3, #12]
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}

0800193a <LL_GPIO_SetPinMode>:
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	435b      	muls	r3, r3
 800194e:	001a      	movs	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	189b      	adds	r3, r3, r2
 8001956:	43db      	mvns	r3, r3
 8001958:	400b      	ands	r3, r1
 800195a:	001a      	movs	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	435b      	muls	r3, r3
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	434b      	muls	r3, r1
 8001964:	431a      	orrs	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}

08001972 <LL_GPIO_SetPinPull>:
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68d9      	ldr	r1, [r3, #12]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	435b      	muls	r3, r3
 8001986:	001a      	movs	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	189b      	adds	r3, r3, r2
 800198e:	43db      	mvns	r3, r3
 8001990:	400b      	ands	r3, r1
 8001992:	001a      	movs	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	435b      	muls	r3, r3
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	434b      	muls	r3, r1
 800199c:	431a      	orrs	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	60da      	str	r2, [r3, #12]
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b004      	add	sp, #16
 80019a8:	bd80      	pop	{r7, pc}

080019aa <LL_GPIO_ResetOutputPin>:
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff fd3e 	bl	8001448 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	055b      	lsls	r3, r3, #21
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff fd23 	bl	800141c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d6:	f000 f813 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019da:	f000 facb 	bl	8001f74 <MX_GPIO_Init>
  MX_TIM6_Init();
 80019de:	f000 f96b 	bl	8001cb8 <MX_TIM6_Init>
  MX_TIM3_Init();
 80019e2:	f000 f8df 	bl	8001ba4 <MX_TIM3_Init>
  MX_TIM15_Init();
 80019e6:	f000 fa0f 	bl	8001e08 <MX_TIM15_Init>
  MX_TIM14_Init();
 80019ea:	f000 f999 	bl	8001d20 <MX_TIM14_Init>
  MX_I2C2_Init();
 80019ee:	f000 f84f 	bl	8001a90 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BSL_Startup();
 80019f2:	f7fe fe5f 	bl	80006b4 <BSL_Startup>

  BSL_Config();
 80019f6:	f7fe fe70 	bl	80006da <BSL_Config>

  BSL_Control();
 80019fa:	f7fe fe75 	bl	80006e8 <BSL_Control>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <main+0x3c>

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7ff fd5b 	bl	80014c0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	f7ff fd6c 	bl	80014e8 <LL_FLASH_GetLatency>
 8001a10:	0003      	movs	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d1fa      	bne.n	8001a0c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001a16:	f7ff fc15 	bl	8001244 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	f7ff fc20 	bl	8001260 <LL_RCC_HSI_IsReady>
 8001a20:	0003      	movs	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d1fa      	bne.n	8001a1c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a26:	2010      	movs	r0, #16
 8001a28:	f7ff fc2a 	bl	8001280 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PREDIV_DIV_1);
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	0359      	lsls	r1, r3, #13
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	2200      	movs	r2, #0
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff fcb8 	bl	80013ac <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001a3c:	f7ff fc94 	bl	8001368 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	f7ff fc9f 	bl	8001384 <LL_RCC_PLL_IsReady>
 8001a46:	0003      	movs	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d1fa      	bne.n	8001a42 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fc4b 	bl	80012e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fc5c 	bl	8001310 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7ff fc25 	bl	80012a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	f7ff fc36 	bl	80012d0 <LL_RCC_GetSysClkSource>
 8001a64:	0003      	movs	r3, r0
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d1fa      	bne.n	8001a60 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <SystemClock_Config+0x8c>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f001 fa61 	bl	8002f34 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <SystemClock_Config+0x8c>)
 8001a74:	0018      	movs	r0, r3
 8001a76:	f001 fa8f 	bl	8002f98 <LL_SetSystemCoreClock>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_1);
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	04db      	lsls	r3, r3, #19
 8001a7e:	2100      	movs	r1, #0
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff fc5b 	bl	800133c <LL_RCC_ConfigMCO>
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	02dc6c00 	.word	0x02dc6c00

08001a90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b08f      	sub	sp, #60	; 0x3c
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001a96:	241c      	movs	r4, #28
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	231c      	movs	r3, #28
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f001 fab1 	bl	8003008 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	2318      	movs	r3, #24
 8001aac:	001a      	movs	r2, r3
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f001 faaa 	bl	8003008 <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	02db      	lsls	r3, r3, #11
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff fc99 	bl	80013f0 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	00d2      	lsls	r2, r2, #3
 8001ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2202      	movs	r2, #2
 8001aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2203      	movs	r2, #3
 8001ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <MX_I2C2_Init+0x108>)
 8001ae8:	0019      	movs	r1, r3
 8001aea:	0010      	movs	r0, r2
 8001aec:	f000 fd2e 	bl	800254c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2202      	movs	r2, #2
 8001afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2203      	movs	r2, #3
 8001b02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2201      	movs	r2, #1
 8001b08:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2201      	movs	r2, #1
 8001b14:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <MX_I2C2_Init+0x108>)
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	0010      	movs	r0, r2
 8001b1e:	f000 fd15 	bl	800254c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	03db      	lsls	r3, r3, #15
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff fc78 	bl	800141c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_I2C2_Init+0x10c>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff fb68 	bl	8001204 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_I2C2_Init+0x10c>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff fb3e 	bl	80011b8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_I2C2_Init+0x10c>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff fb2a 	bl	8001198 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001b44:	0021      	movs	r1, r4
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x2010091A;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <MX_I2C2_Init+0x110>)
 8001b50:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <MX_I2C2_Init+0x10c>)
 8001b74:	0019      	movs	r1, r3
 8001b76:	0010      	movs	r0, r2
 8001b78:	f000 fde2 	bl	8002740 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_I2C2_Init+0x10c>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7ff fb50 	bl	8001224 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <MX_I2C2_Init+0x10c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff fb24 	bl	80011d8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b00f      	add	sp, #60	; 0x3c
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	40005800 	.word	0x40005800
 8001ba0:	2010091a 	.word	0x2010091a

08001ba4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001baa:	253c      	movs	r5, #60	; 0x3c
 8001bac:	197b      	adds	r3, r7, r5
 8001bae:	0018      	movs	r0, r3
 8001bb0:	2314      	movs	r3, #20
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f001 fa27 	bl	8003008 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001bba:	241c      	movs	r4, #28
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f001 fa1f 	bl	8003008 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	0018      	movs	r0, r3
 8001bce:	2318      	movs	r3, #24
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f001 fa18 	bl	8003008 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7ff fc1f 	bl	800141c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	222f      	movs	r2, #47	; 0x2f
 8001be2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001be4:	197b      	adds	r3, r7, r5
 8001be6:	2200      	movs	r2, #0
 8001be8:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9999;
 8001bea:	197b      	adds	r3, r7, r5
 8001bec:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <MX_TIM3_Init+0x108>)
 8001bee:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001bf0:	197b      	adds	r3, r7, r5
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001bf6:	197b      	adds	r3, r7, r5
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <MX_TIM3_Init+0x10c>)
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f000 fe45 	bl	800288c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <MX_TIM3_Init+0x10c>)
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff fc89 	bl	800151c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <MX_TIM3_Init+0x10c>)
 8001c10:	0019      	movs	r1, r3
 8001c12:	0010      	movs	r0, r2
 8001c14:	f7ff fcdc 	bl	80015d0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001c18:	0021      	movs	r1, r4
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2260      	movs	r2, #96	; 0x60
 8001c1e:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001c38:	187a      	adds	r2, r7, r1
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	481c      	ldr	r0, [pc, #112]	; (8001cb0 <MX_TIM3_Init+0x10c>)
 8001c40:	0019      	movs	r1, r3
 8001c42:	f000 fea5 	bl	8002990 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <MX_TIM3_Init+0x10c>)
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f7ff fc74 	bl	800153c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_TIM3_Init+0x10c>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff fe3f 	bl	80018dc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_TIM3_Init+0x10c>)
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff fe4d 	bl	8001900 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	031b      	lsls	r3, r3, #12
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff fbc0 	bl	80013f0 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC9   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = TIM3_CH4LD5_Pin_Pin;
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(TIM3_CH4LD5_Pin_GPIO_Port, &GPIO_InitStruct);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <MX_TIM3_Init+0x110>)
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	f000 fc55 	bl	800254c <LL_GPIO_Init>

}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b014      	add	sp, #80	; 0x50
 8001ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	0000270f 	.word	0x0000270f
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	48000800 	.word	0x48000800

08001cb8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	2314      	movs	r3, #20
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f001 f99e 	bl	8003008 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001ccc:	2010      	movs	r0, #16
 8001cce:	f7ff fba5 	bl	800141c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 47;
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	222f      	movs	r2, #47	; 0x2f
 8001ce2:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <MX_TIM6_Init+0x64>)
 8001ce8:	0019      	movs	r1, r3
 8001cea:	0010      	movs	r0, r2
 8001cec:	f000 fdce 	bl	800288c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <MX_TIM6_Init+0x64>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff fc12 	bl	800151c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_TIM6_Init+0x64>)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fded 	bl	80018dc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_TIM6_Init+0x64>)
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff fdfb 	bl	8001900 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM6);
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <MX_TIM6_Init+0x64>)
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff fe06 	bl	800191e <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM6_Init 2 */

}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b006      	add	sp, #24
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	40001000 	.word	0x40001000

08001d20 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b08d      	sub	sp, #52	; 0x34
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d26:	241c      	movs	r4, #28
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	2314      	movs	r3, #20
 8001d2e:	001a      	movs	r2, r3
 8001d30:	2100      	movs	r1, #0
 8001d32:	f001 f969 	bl	8003008 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	0018      	movs	r0, r3
 8001d3a:	2318      	movs	r3, #24
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f001 f962 	bl	8003008 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff fb67 	bl	800141c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fb4c 	bl	80013f0 <LL_AHB1_GRP1_EnableClock>
  /**TIM14 GPIO Configuration
  PA4   ------> TIM14_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2202      	movs	r2, #2
 8001d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2204      	movs	r2, #4
 8001d7a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	1d3a      	adds	r2, r7, #4
 8001d7e:	2390      	movs	r3, #144	; 0x90
 8001d80:	05db      	lsls	r3, r3, #23
 8001d82:	0011      	movs	r1, r2
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 fbe1 	bl	800254c <LL_GPIO_Init>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM14_IRQn, 0);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2013      	movs	r0, #19
 8001d8e:	f7ff f995 	bl	80010bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM14_IRQn);
 8001d92:	2013      	movs	r0, #19
 8001d94:	f7ff f978 	bl	8001088 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8001da4:	193b      	adds	r3, r7, r4
 8001da6:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <MX_TIM14_Init+0xe0>)
 8001da8:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8001db0:	193b      	adds	r3, r7, r4
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <MX_TIM14_Init+0xe4>)
 8001db4:	0019      	movs	r1, r3
 8001db6:	0010      	movs	r0, r2
 8001db8:	f000 fd68 	bl	800288c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM14);
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_TIM14_Init+0xe4>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff fb9e 	bl	8001500 <LL_TIM_EnableARRPreload>
  LL_TIM_IC_SetActiveInput(TIM14, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	025b      	lsls	r3, r3, #9
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <MX_TIM14_Init+0xe4>)
 8001dca:	001a      	movs	r2, r3
 8001dcc:	2101      	movs	r1, #1
 8001dce:	f7ff fc47 	bl	8001660 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM14, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_TIM14_Init+0xe4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff fc93 	bl	8001704 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM14, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_TIM14_Init+0xe4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	2101      	movs	r1, #1
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff fcdf 	bl	80017a8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM14, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_TIM14_Init+0xe4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	2101      	movs	r1, #1
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fd2b 	bl	800184c <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b00d      	add	sp, #52	; 0x34
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	0000ffff 	.word	0x0000ffff
 8001e04:	40002000 	.word	0x40002000

08001e08 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0a:	b09b      	sub	sp, #108	; 0x6c
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e0e:	2654      	movs	r6, #84	; 0x54
 8001e10:	19bb      	adds	r3, r7, r6
 8001e12:	0018      	movs	r0, r3
 8001e14:	2314      	movs	r3, #20
 8001e16:	001a      	movs	r2, r3
 8001e18:	2100      	movs	r1, #0
 8001e1a:	f001 f8f5 	bl	8003008 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001e1e:	2434      	movs	r4, #52	; 0x34
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	0018      	movs	r0, r3
 8001e24:	2320      	movs	r3, #32
 8001e26:	001a      	movs	r2, r3
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f001 f8ed 	bl	8003008 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001e2e:	251c      	movs	r5, #28
 8001e30:	197b      	adds	r3, r7, r5
 8001e32:	0018      	movs	r0, r3
 8001e34:	2318      	movs	r3, #24
 8001e36:	001a      	movs	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f001 f8e5 	bl	8003008 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	0018      	movs	r0, r3
 8001e42:	2318      	movs	r3, #24
 8001e44:	001a      	movs	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	f001 f8de 	bl	8003008 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM15);
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff faf9 	bl	8001448 <LL_APB1_GRP2_EnableClock>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8001e56:	19bb      	adds	r3, r7, r6
 8001e58:	222f      	movs	r2, #47	; 0x2f
 8001e5a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e5c:	0031      	movs	r1, r6
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9999;
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	4a41      	ldr	r2, [pc, #260]	; (8001f6c <MX_TIM15_Init+0x164>)
 8001e68:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	4a3d      	ldr	r2, [pc, #244]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	f000 fd05 	bl	800288c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff fb49 	bl	800151c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH1);
 8001e8a:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff fb9e 	bl	80015d0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001e94:	0021      	movs	r1, r4
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2260      	movs	r2, #96	; 0x60
 8001e9a:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	4829      	ldr	r0, [pc, #164]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001eca:	001a      	movs	r2, r3
 8001ecc:	2101      	movs	r1, #1
 8001ece:	f000 fd5f 	bl	8002990 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH1);
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fb30 	bl	800153c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_RESET);
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fcfb 	bl	80018dc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fd09 	bl	8001900 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001eee:	0029      	movs	r1, r5
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  TIM_BDTRInitStruct.DeadTime = 0;
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2200      	movs	r2, #0
 8001f06:	731a      	strb	r2, [r3, #12]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	81da      	strh	r2, [r3, #14]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0192      	lsls	r2, r2, #6
 8001f14:	611a      	str	r2, [r3, #16]
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  LL_TIM_BDTR_Init(TIM15, &TIM_BDTRInitStruct);
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <MX_TIM15_Init+0x168>)
 8001f20:	0019      	movs	r1, r3
 8001f22:	0010      	movs	r0, r2
 8001f24:	f000 fd8e 	bl	8002a44 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	029b      	lsls	r3, r3, #10
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff fa5f 	bl	80013f0 <LL_AHB1_GRP1_EnableClock>
  /**TIM15 GPIO Configuration
  PA1   ------> TIM15_CH1N
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2202      	movs	r2, #2
 8001f36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2205      	movs	r2, #5
 8001f54:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	1d3a      	adds	r2, r7, #4
 8001f58:	2390      	movs	r3, #144	; 0x90
 8001f5a:	05db      	lsls	r3, r3, #23
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 faf4 	bl	800254c <LL_GPIO_Init>

}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b01b      	add	sp, #108	; 0x6c
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6c:	0000270f 	.word	0x0000270f
 8001f70:	40014000 	.word	0x40014000

08001f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001f7a:	2418      	movs	r4, #24
 8001f7c:	193b      	adds	r3, r7, r4
 8001f7e:	0018      	movs	r0, r3
 8001f80:	2308      	movs	r3, #8
 8001f82:	001a      	movs	r2, r3
 8001f84:	2100      	movs	r1, #0
 8001f86:	f001 f83f 	bl	8003008 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	003b      	movs	r3, r7
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	2318      	movs	r3, #24
 8001f90:	001a      	movs	r2, r3
 8001f92:	2100      	movs	r1, #0
 8001f94:	f001 f838 	bl	8003008 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff fa27 	bl	80013f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	02db      	lsls	r3, r3, #11
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff fa22 	bl	80013f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	031b      	lsls	r3, r3, #12
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff fa1d 	bl	80013f0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD6_Pin_GPIO_Port, LD6_Pin_Pin);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <MX_GPIO_Init+0xd4>)
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7ff fcf5 	bl	80019aa <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fa56 	bl	8001474 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(USER_BTN_GPIO_Port, USER_BTN_Pin, LL_GPIO_PULL_NO);
 8001fc8:	2390      	movs	r3, #144	; 0x90
 8001fca:	05db      	lsls	r3, r3, #23
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2101      	movs	r1, #1
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff fcce 	bl	8001972 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_BTN_GPIO_Port, USER_BTN_Pin, LL_GPIO_MODE_INPUT);
 8001fd6:	2390      	movs	r3, #144	; 0x90
 8001fd8:	05db      	lsls	r3, r3, #23
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2101      	movs	r1, #1
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7ff fcab 	bl	800193a <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001fe4:	0021      	movs	r1, r4
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2201      	movs	r2, #1
 8001ff0:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f961 	bl	80022c8 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD6_Pin_Pin;
 8002006:	003b      	movs	r3, r7
 8002008:	2240      	movs	r2, #64	; 0x40
 800200a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800200c:	003b      	movs	r3, r7
 800200e:	2201      	movs	r2, #1
 8002010:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002012:	003b      	movs	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002018:	003b      	movs	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800201e:	003b      	movs	r3, r7
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD6_Pin_GPIO_Port, &GPIO_InitStruct);
 8002024:	003b      	movs	r3, r7
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <MX_GPIO_Init+0xd4>)
 8002028:	0019      	movs	r1, r3
 800202a:	0010      	movs	r0, r2
 800202c:	f000 fa8e 	bl	800254c <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 8002030:	2100      	movs	r1, #0
 8002032:	2005      	movs	r0, #5
 8002034:	f7ff f842 	bl	80010bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002038:	2005      	movs	r0, #5
 800203a:	f7ff f825 	bl	8001088 <__NVIC_EnableIRQ>

}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b009      	add	sp, #36	; 0x24
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	48000800 	.word	0x48000800

0800204c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	425a      	negs	r2, r3
 8002062:	4153      	adcs	r3, r2
 8002064:	b2db      	uxtb	r3, r3
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	40010400 	.word	0x40010400

08002074 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <LL_EXTI_ClearFlag_0_31+0x18>)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	615a      	str	r2, [r3, #20]
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40010400 	.word	0x40010400

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSL_Tick();
 80020b4:	f7fe ffaa 	bl	800100c <BSL_Tick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7ff ffc2 	bl	800204c <LL_EXTI_IsActiveFlag_0_31>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d004      	beq.n	80020d6 <EXTI0_1_IRQHandler+0x18>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff ffd1 	bl	8002074 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    UserBTN_Callback();
 80020d2:	f7fe fcfb 	bl	8000acc <UserBTN_Callback>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	Calgulate_FreqTim14();
 80020e0:	f7fe fd4a 	bl	8000b78 <Calgulate_FreqTim14>
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	18d3      	adds	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f000 ff4a 	bl	8002fb4 <__errno>
 8002120:	0003      	movs	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	2301      	movs	r3, #1
 8002128:	425b      	negs	r3, r3
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	18d2      	adds	r2, r2, r3
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20004000 	.word	0x20004000
 800214c:	00000400 	.word	0x00000400
 8002150:	200000bc 	.word	0x200000bc
 8002154:	200004e0 	.word	0x200004e0

08002158 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002166:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800216a:	490e      	ldr	r1, [pc, #56]	; (80021a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <LoopForever+0xe>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002180:	4c0b      	ldr	r4, [pc, #44]	; (80021b0 <LoopForever+0x16>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800218e:	f7ff ffe3 	bl	8002158 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002192:	f000 ff15 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002196:	f7ff fc14 	bl	80019c2 <main>

0800219a <LoopForever>:

LoopForever:
    b LoopForever
 800219a:	e7fe      	b.n	800219a <LoopForever>
  ldr   r0, =_estack
 800219c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80021a8:	0800405c 	.word	0x0800405c
  ldr r2, =_sbss
 80021ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80021b0:	200004e0 	.word	0x200004e0

080021b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_COMP_IRQHandler>
	...

080021b8 <LL_EXTI_EnableIT_0_31>:
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <LL_EXTI_EnableIT_0_31+0x1c>)
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <LL_EXTI_EnableIT_0_31+0x1c>)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010400 	.word	0x40010400

080021d8 <LL_EXTI_DisableIT_0_31>:
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <LL_EXTI_DisableIT_0_31+0x20>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <LL_EXTI_DisableIT_0_31+0x20>)
 80021ea:	400a      	ands	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40010400 	.word	0x40010400

080021fc <LL_EXTI_EnableEvent_0_31>:
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40010400 	.word	0x40010400

0800221c <LL_EXTI_DisableEvent_0_31>:
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <LL_EXTI_DisableEvent_0_31+0x20>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	43d9      	mvns	r1, r3
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <LL_EXTI_DisableEvent_0_31+0x20>)
 800222e:	400a      	ands	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	40010400 	.word	0x40010400

08002240 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010400 	.word	0x40010400

08002260 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	43d9      	mvns	r1, r3
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002272:	400a      	ands	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	40010400 	.word	0x40010400

08002284 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800228e:	68d9      	ldr	r1, [r3, #12]
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40010400 	.word	0x40010400

080022a4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]
}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	40010400 	.word	0x40010400

080022c8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80022d0:	230f      	movs	r3, #15
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	791b      	ldrb	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d100      	bne.n	80022e2 <LL_EXTI_Init+0x1a>
 80022e0:	e068      	b.n	80023b4 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d100      	bne.n	80022ec <LL_EXTI_Init+0x24>
 80022ea:	e06e      	b.n	80023ca <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	795b      	ldrb	r3, [r3, #5]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d01b      	beq.n	800232c <LL_EXTI_Init+0x64>
 80022f4:	dc25      	bgt.n	8002342 <LL_EXTI_Init+0x7a>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <LL_EXTI_Init+0x38>
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00b      	beq.n	8002316 <LL_EXTI_Init+0x4e>
 80022fe:	e020      	b.n	8002342 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff ff89 	bl	800221c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff ff52 	bl	80021b8 <LL_EXTI_EnableIT_0_31>
          break;
 8002314:	e01a      	b.n	800234c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff ff5c 	bl	80021d8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff ff69 	bl	80021fc <LL_EXTI_EnableEvent_0_31>
          break;
 800232a:	e00f      	b.n	800234c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff ff41 	bl	80021b8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff ff5e 	bl	80021fc <LL_EXTI_EnableEvent_0_31>
          break;
 8002340:	e004      	b.n	800234c <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
          break;
 800234a:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	799b      	ldrb	r3, [r3, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d03a      	beq.n	80023ca <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	799b      	ldrb	r3, [r3, #6]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d01b      	beq.n	8002394 <LL_EXTI_Init+0xcc>
 800235c:	dc25      	bgt.n	80023aa <LL_EXTI_Init+0xe2>
 800235e:	2b01      	cmp	r3, #1
 8002360:	d002      	beq.n	8002368 <LL_EXTI_Init+0xa0>
 8002362:	2b02      	cmp	r3, #2
 8002364:	d00b      	beq.n	800237e <LL_EXTI_Init+0xb6>
 8002366:	e020      	b.n	80023aa <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff ff99 	bl	80022a4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ff62 	bl	8002240 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800237c:	e026      	b.n	80023cc <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff ff6c 	bl	8002260 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff ff79 	bl	8002284 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002392:	e01b      	b.n	80023cc <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff ff51 	bl	8002240 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff ff6e 	bl	8002284 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80023a8:	e010      	b.n	80023cc <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 80023aa:	230f      	movs	r3, #15
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
            break;
 80023b2:	e00b      	b.n	80023cc <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7ff ff0d 	bl	80021d8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff ff2a 	bl	800221c <LL_EXTI_DisableEvent_0_31>
 80023c8:	e000      	b.n	80023cc <LL_EXTI_Init+0x104>
      }
 80023ca:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	781b      	ldrb	r3, [r3, #0]
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}

080023da <LL_GPIO_SetPinMode>:
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	435b      	muls	r3, r3
 80023ee:	001a      	movs	r2, r3
 80023f0:	0013      	movs	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	43db      	mvns	r3, r3
 80023f8:	400b      	ands	r3, r1
 80023fa:	001a      	movs	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	435b      	muls	r3, r3
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	434b      	muls	r3, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}

08002412 <LL_GPIO_SetPinOutputType>:
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	43d2      	mvns	r2, r2
 8002426:	401a      	ands	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	434b      	muls	r3, r1
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bd80      	pop	{r7, pc}

0800243c <LL_GPIO_SetPinSpeed>:
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	435b      	muls	r3, r3
 8002450:	001a      	movs	r2, r3
 8002452:	0013      	movs	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	189b      	adds	r3, r3, r2
 8002458:	43db      	mvns	r3, r3
 800245a:	400b      	ands	r3, r1
 800245c:	001a      	movs	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	435b      	muls	r3, r3
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	434b      	muls	r3, r1
 8002466:	431a      	orrs	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	609a      	str	r2, [r3, #8]
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b004      	add	sp, #16
 8002472:	bd80      	pop	{r7, pc}

08002474 <LL_GPIO_SetPinPull>:
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68d9      	ldr	r1, [r3, #12]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	435b      	muls	r3, r3
 8002488:	001a      	movs	r2, r3
 800248a:	0013      	movs	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	189b      	adds	r3, r3, r2
 8002490:	43db      	mvns	r3, r3
 8002492:	400b      	ands	r3, r1
 8002494:	001a      	movs	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	435b      	muls	r3, r3
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	434b      	muls	r3, r1
 800249e:	431a      	orrs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b004      	add	sp, #16
 80024aa:	bd80      	pop	{r7, pc}

080024ac <LL_GPIO_SetAFPin_0_7>:
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a19      	ldr	r1, [r3, #32]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	435b      	muls	r3, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4353      	muls	r3, r2
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	435a      	muls	r2, r3
 80024c8:	0013      	movs	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	43db      	mvns	r3, r3
 80024d0:	400b      	ands	r3, r1
 80024d2:	001a      	movs	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	435b      	muls	r3, r3
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	434b      	muls	r3, r1
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	434b      	muls	r3, r1
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	434b      	muls	r3, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b004      	add	sp, #16
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <LL_GPIO_SetAFPin_8_15>:
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	0a12      	lsrs	r2, r2, #8
 800250a:	4353      	muls	r3, r2
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	0a12      	lsrs	r2, r2, #8
 8002510:	4353      	muls	r3, r2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	0a12      	lsrs	r2, r2, #8
 8002516:	435a      	muls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	43db      	mvns	r3, r3
 8002520:	400b      	ands	r3, r1
 8002522:	001a      	movs	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	0a09      	lsrs	r1, r1, #8
 800252c:	434b      	muls	r3, r1
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	0a09      	lsrs	r1, r1, #8
 8002532:	434b      	muls	r3, r1
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	0a09      	lsrs	r1, r1, #8
 8002538:	434b      	muls	r3, r1
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	434b      	muls	r3, r1
 800253e:	431a      	orrs	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b004      	add	sp, #16
 800254a:	bd80      	pop	{r7, pc}

0800254c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800255a:	e048      	b.n	80025ee <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4091      	lsls	r1, r2
 8002566:	000a      	movs	r2, r1
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03a      	beq.n	80025e8 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d003      	beq.n	8002582 <LL_GPIO_Init+0x36>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d10e      	bne.n	80025a0 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f7ff ff56 	bl	800243c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6819      	ldr	r1, [r3, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f7ff ff39 	bl	8002412 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff ff63 	bl	8002474 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d111      	bne.n	80025da <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2bff      	cmp	r3, #255	; 0xff
 80025ba:	d807      	bhi.n	80025cc <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff ff71 	bl	80024ac <LL_GPIO_SetAFPin_0_7>
 80025ca:	e006      	b.n	80025da <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff ff8c 	bl	80024f2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff fef9 	bl	80023da <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3301      	adds	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	40da      	lsrs	r2, r3
 80025f6:	1e13      	subs	r3, r2, #0
 80025f8:	d1b0      	bne.n	800255c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bd80      	pop	{r7, pc}

08002604 <LL_I2C_Enable>:
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <LL_I2C_Disable>:
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2201      	movs	r2, #1
 800262e:	4393      	bics	r3, r2
 8002630:	001a      	movs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <LL_I2C_ConfigFilters>:
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <LL_I2C_ConfigFilters+0x2c>)
 8002652:	401a      	ands	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0219      	lsls	r1, r3, #8
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	430b      	orrs	r3, r1
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b004      	add	sp, #16
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	ffffe0ff 	.word	0xffffe0ff

08002670 <LL_I2C_SetOwnAddress1>:
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	0adb      	lsrs	r3, r3, #11
 8002682:	02da      	lsls	r2, r3, #11
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	430b      	orrs	r3, r1
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}

08002698 <LL_I2C_EnableOwnAddress1>:
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	0212      	lsls	r2, r2, #8
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <LL_I2C_DisableOwnAddress1>:
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <LL_I2C_DisableOwnAddress1+0x1c>)
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	ffff7fff 	.word	0xffff7fff

080026d8 <LL_I2C_SetTiming>:
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	611a      	str	r2, [r3, #16]
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <LL_I2C_SetMode>:
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <LL_I2C_SetMode+0x24>)
 8002700:	401a      	ands	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	ffcfffff 	.word	0xffcfffff

08002718 <LL_I2C_AcknowledgeNextData>:
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <LL_I2C_AcknowledgeNextData+0x24>)
 8002728:	401a      	ands	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	605a      	str	r2, [r3, #4]
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	ffff7fff 	.word	0xffff7fff

08002740 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff ff67 	bl	8002620 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0018      	movs	r0, r3
 800275e:	f7ff ff6f 	bl	8002640 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff ffb4 	bl	80026d8 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f7ff ff46 	bl	8002604 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff ff9c 	bl	80026b8 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff ff70 	bl	8002670 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f7ff ff7c 	bl	8002698 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7ff ffa1 	bl	80026f0 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0011      	movs	r1, r2
 80027b6:	0018      	movs	r0, r3
 80027b8:	f7ff ffae 	bl	8002718 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <LL_TIM_SetPrescaler>:
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}

080027de <LL_TIM_SetAutoReload>:
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <LL_TIM_SetRepetitionCounter>:
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}

0800280e <LL_TIM_OC_SetCompareCH1>:
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}

08002826 <LL_TIM_OC_SetCompareCH2>:
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}

0800283e <LL_TIM_OC_SetCompareCH3>:
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}

08002856 <LL_TIM_OC_SetCompareCH4>:
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}

0800286e <LL_TIM_GenerateEvent_UPDATE>:
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2201      	movs	r2, #1
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	615a      	str	r2, [r3, #20]
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <LL_TIM_Init+0xe8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d008      	beq.n	80028b6 <LL_TIM_Init+0x2a>
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d003      	beq.n	80028b6 <LL_TIM_Init+0x2a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a31      	ldr	r2, [pc, #196]	; (8002978 <LL_TIM_Init+0xec>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d107      	bne.n	80028c6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2270      	movs	r2, #112	; 0x70
 80028ba:	4393      	bics	r3, r2
 80028bc:	001a      	movs	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a2a      	ldr	r2, [pc, #168]	; (8002974 <LL_TIM_Init+0xe8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d018      	beq.n	8002900 <LL_TIM_Init+0x74>
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	05db      	lsls	r3, r3, #23
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d013      	beq.n	8002900 <LL_TIM_Init+0x74>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a27      	ldr	r2, [pc, #156]	; (8002978 <LL_TIM_Init+0xec>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00f      	beq.n	8002900 <LL_TIM_Init+0x74>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <LL_TIM_Init+0xf0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00b      	beq.n	8002900 <LL_TIM_Init+0x74>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a25      	ldr	r2, [pc, #148]	; (8002980 <LL_TIM_Init+0xf4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <LL_TIM_Init+0x74>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <LL_TIM_Init+0xf8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <LL_TIM_Init+0x74>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a23      	ldr	r2, [pc, #140]	; (8002988 <LL_TIM_Init+0xfc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d106      	bne.n	800290e <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a22      	ldr	r2, [pc, #136]	; (800298c <LL_TIM_Init+0x100>)
 8002904:	401a      	ands	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ff5e 	bl	80027de <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	001a      	movs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0011      	movs	r1, r2
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff ff4a 	bl	80027c6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <LL_TIM_Init+0xe8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <LL_TIM_Init+0xc6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a10      	ldr	r2, [pc, #64]	; (8002980 <LL_TIM_Init+0xf4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <LL_TIM_Init+0xc6>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <LL_TIM_Init+0xf8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <LL_TIM_Init+0xc6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <LL_TIM_Init+0xfc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d106      	bne.n	8002960 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0011      	movs	r1, r2
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ff4b 	bl	80027f6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff ff83 	bl	800286e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b004      	add	sp, #16
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40002000 	.word	0x40002000
 8002980:	40014000 	.word	0x40014000
 8002984:	40014400 	.word	0x40014400
 8002988:	40014800 	.word	0x40014800
 800298c:	fffffcff 	.word	0xfffffcff

08002990 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800299c:	2317      	movs	r3, #23
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	015b      	lsls	r3, r3, #5
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d036      	beq.n	8002a1c <LL_TIM_OC_Init+0x8c>
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d83c      	bhi.n	8002a32 <LL_TIM_OC_Init+0xa2>
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	429a      	cmp	r2, r3
 80029c0:	d021      	beq.n	8002a06 <LL_TIM_OC_Init+0x76>
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d832      	bhi.n	8002a32 <LL_TIM_OC_Init+0xa2>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d003      	beq.n	80029da <LL_TIM_OC_Init+0x4a>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d00b      	beq.n	80029f0 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80029d8:	e02b      	b.n	8002a32 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80029da:	2317      	movs	r3, #23
 80029dc:	18fc      	adds	r4, r7, r3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f883 	bl	8002af0 <OC1Config>
 80029ea:	0003      	movs	r3, r0
 80029ec:	7023      	strb	r3, [r4, #0]
      break;
 80029ee:	e021      	b.n	8002a34 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80029f0:	2317      	movs	r3, #23
 80029f2:	18fc      	adds	r4, r7, r3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f8fc 	bl	8002bf8 <OC2Config>
 8002a00:	0003      	movs	r3, r0
 8002a02:	7023      	strb	r3, [r4, #0]
      break;
 8002a04:	e016      	b.n	8002a34 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002a06:	2317      	movs	r3, #23
 8002a08:	18fc      	adds	r4, r7, r3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	0011      	movs	r1, r2
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f97b 	bl	8002d0c <OC3Config>
 8002a16:	0003      	movs	r3, r0
 8002a18:	7023      	strb	r3, [r4, #0]
      break;
 8002a1a:	e00b      	b.n	8002a34 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a1c:	2317      	movs	r3, #23
 8002a1e:	18fc      	adds	r4, r7, r3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0011      	movs	r1, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f9fa 	bl	8002e20 <OC4Config>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	7023      	strb	r3, [r4, #0]
      break;
 8002a30:	e000      	b.n	8002a34 <LL_TIM_OC_Init+0xa4>
      break;
 8002a32:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002a34:	2317      	movs	r3, #23
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	781b      	ldrb	r3, [r3, #0]
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b007      	add	sp, #28
 8002a40:	bd90      	pop	{r4, r7, pc}
	...

08002a44 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	22ff      	movs	r2, #255	; 0xff
 8002a56:	4393      	bics	r3, r2
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	7b12      	ldrb	r2, [r2, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <LL_TIM_BDTR_Init+0x90>)
 8002a64:	401a      	ands	r2, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <LL_TIM_BDTR_Init+0x94>)
 8002a72:	401a      	ands	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <LL_TIM_BDTR_Init+0x98>)
 8002a80:	401a      	ands	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <LL_TIM_BDTR_Init+0x9c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	89d2      	ldrh	r2, [r2, #14]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <LL_TIM_BDTR_Init+0xa0>)
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <LL_TIM_BDTR_Init+0xa4>)
 8002aaa:	401a      	ands	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <LL_TIM_BDTR_Init+0xa8>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	fffffcff 	.word	0xfffffcff
 8002ad8:	fffffbff 	.word	0xfffffbff
 8002adc:	fffff7ff 	.word	0xfffff7ff
 8002ae0:	ffffefff 	.word	0xffffefff
 8002ae4:	ffffdfff 	.word	0xffffdfff
 8002ae8:	ffffbfff 	.word	0xffffbfff
 8002aec:	ffff7fff 	.word	0xffff7fff

08002af0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	2201      	movs	r2, #1
 8002b00:	4393      	bics	r3, r2
 8002b02:	001a      	movs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4393      	bics	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2270      	movs	r2, #112	; 0x70
 8002b26:	4393      	bics	r3, r2
 8002b28:	001a      	movs	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2202      	movs	r2, #2
 8002b36:	4393      	bics	r3, r2
 8002b38:	001a      	movs	r2, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4393      	bics	r3, r2
 8002b48:	001a      	movs	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <OC1Config+0xf0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <OC1Config+0x82>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <OC1Config+0xf4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <OC1Config+0x82>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <OC1Config+0xf8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d003      	beq.n	8002b72 <OC1Config+0x82>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <OC1Config+0xfc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d120      	bne.n	8002bb4 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2208      	movs	r2, #8
 8002b76:	4393      	bics	r3, r2
 8002b78:	001a      	movs	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2204      	movs	r2, #4
 8002b88:	4393      	bics	r3, r2
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <OC1Config+0x100>)
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <OC1Config+0x104>)
 8002ba8:	401a      	ands	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff fe20 	bl	800280e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800
 8002bf0:	fffffeff 	.word	0xfffffeff
 8002bf4:	fffffdff 	.word	0xfffffdff

08002bf8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	2210      	movs	r2, #16
 8002c08:	4393      	bics	r3, r2
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a31      	ldr	r2, [pc, #196]	; (8002cec <OC2Config+0xf4>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a30      	ldr	r2, [pc, #192]	; (8002cf0 <OC2Config+0xf8>)
 8002c2e:	401a      	ands	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	4393      	bics	r3, r2
 8002c40:	001a      	movs	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2210      	movs	r2, #16
 8002c50:	4393      	bics	r3, r2
 8002c52:	001a      	movs	r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <OC2Config+0xfc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <OC2Config+0x86>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <OC2Config+0x100>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <OC2Config+0x86>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <OC2Config+0x104>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <OC2Config+0x86>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <OC2Config+0x108>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d121      	bne.n	8002cc2 <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	4393      	bics	r3, r2
 8002c84:	001a      	movs	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	019b      	lsls	r3, r3, #6
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	4393      	bics	r3, r2
 8002c96:	001a      	movs	r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <OC2Config+0x10c>)
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <OC2Config+0x110>)
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0011      	movs	r1, r2
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7ff fda5 	bl	8002826 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b006      	add	sp, #24
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fffffcff 	.word	0xfffffcff
 8002cf0:	ffff8fff 	.word	0xffff8fff
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40014400 	.word	0x40014400
 8002d00:	40014800 	.word	0x40014800
 8002d04:	fffffbff 	.word	0xfffffbff
 8002d08:	fffff7ff 	.word	0xfffff7ff

08002d0c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a37      	ldr	r2, [pc, #220]	; (8002df8 <OC3Config+0xec>)
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2203      	movs	r2, #3
 8002d38:	4393      	bics	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2270      	movs	r2, #112	; 0x70
 8002d40:	4393      	bics	r3, r2
 8002d42:	001a      	movs	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <OC3Config+0xf0>)
 8002d50:	401a      	ands	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <OC3Config+0xec>)
 8002d60:	401a      	ands	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <OC3Config+0xf4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <OC3Config+0x80>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a23      	ldr	r2, [pc, #140]	; (8002e04 <OC3Config+0xf8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <OC3Config+0x80>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <OC3Config+0xfc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <OC3Config+0x80>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <OC3Config+0x100>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11f      	bne.n	8002dcc <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <OC3Config+0x104>)
 8002d90:	401a      	ands	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	029b      	lsls	r3, r3, #10
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <OC3Config+0x108>)
 8002da0:	401a      	ands	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <OC3Config+0x10c>)
 8002db0:	401a      	ands	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <OC3Config+0x110>)
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	015b      	lsls	r3, r3, #5
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff fd2c 	bl	800283e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b006      	add	sp, #24
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	fffffeff 	.word	0xfffffeff
 8002dfc:	fffffdff 	.word	0xfffffdff
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40014000 	.word	0x40014000
 8002e08:	40014400 	.word	0x40014400
 8002e0c:	40014800 	.word	0x40014800
 8002e10:	fffff7ff 	.word	0xfffff7ff
 8002e14:	fffffbff 	.word	0xfffffbff
 8002e18:	ffffefff 	.word	0xffffefff
 8002e1c:	ffffdfff 	.word	0xffffdfff

08002e20 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <OC4Config+0xbc>)
 8002e30:	401a      	ands	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <OC4Config+0xc0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <OC4Config+0xc4>)
 8002e54:	401a      	ands	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <OC4Config+0xc8>)
 8002e64:	401a      	ands	r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	031b      	lsls	r3, r3, #12
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <OC4Config+0xbc>)
 8002e74:	401a      	ands	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	031b      	lsls	r3, r3, #12
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <OC4Config+0xcc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <OC4Config+0x80>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <OC4Config+0xd0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <OC4Config+0x80>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <OC4Config+0xd4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <OC4Config+0x80>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <OC4Config+0xd8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d107      	bne.n	8002eb0 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	4a16      	ldr	r2, [pc, #88]	; (8002efc <OC4Config+0xdc>)
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	019b      	lsls	r3, r3, #6
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0011      	movs	r1, r2
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff fcc6 	bl	8002856 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	ffffefff 	.word	0xffffefff
 8002ee0:	fffffcff 	.word	0xfffffcff
 8002ee4:	ffff8fff 	.word	0xffff8fff
 8002ee8:	ffffdfff 	.word	0xffffdfff
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40014800 	.word	0x40014800
 8002efc:	ffffbfff 	.word	0xffffbfff

08002f00 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fd f905 	bl	800011c <__udivsi3>
 8002f12:	0003      	movs	r3, r0
 8002f14:	001a      	movs	r2, r3
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <LL_InitTick+0x30>)
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <LL_InitTick+0x30>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <LL_InitTick+0x30>)
 8002f24:	2205      	movs	r2, #5
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002f3c:	23fa      	movs	r3, #250	; 0xfa
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff ffdb 	bl	8002f00 <LL_InitTick>
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <LL_mDelay+0x40>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002f62:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3301      	adds	r3, #1
 8002f68:	d00c      	beq.n	8002f84 <LL_mDelay+0x30>
  {
    Delay++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002f70:	e008      	b.n	8002f84 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <LL_mDelay+0x40>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d002      	beq.n	8002f84 <LL_mDelay+0x30>
    {
      Delay--;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f3      	bne.n	8002f72 <LL_mDelay+0x1e>
    }
  }
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	e000e010 	.word	0xe000e010

08002f98 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <LL_SetSystemCoreClock+0x18>)
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000010 	.word	0x20000010

08002fb4 <__errno>:
 8002fb4:	4b01      	ldr	r3, [pc, #4]	; (8002fbc <__errno+0x8>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	4770      	bx	lr
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	20000014 	.word	0x20000014

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	4d0c      	ldr	r5, [pc, #48]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc6:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	f000 fc47 	bl	8003864 <_init>
 8002fd6:	4d0a      	ldr	r5, [pc, #40]	; (8003000 <__libc_init_array+0x40>)
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	; (8003004 <__libc_init_array+0x44>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	00b3      	lsls	r3, r6, #2
 8002fe6:	58eb      	ldr	r3, [r5, r3]
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	00b3      	lsls	r3, r6, #2
 8002ff0:	58eb      	ldr	r3, [r5, r3]
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08004054 	.word	0x08004054
 8002ffc:	08004054 	.word	0x08004054
 8003000:	08004054 	.word	0x08004054
 8003004:	08004058 	.word	0x08004058

08003008 <memset>:
 8003008:	0003      	movs	r3, r0
 800300a:	1882      	adds	r2, r0, r2
 800300c:	4293      	cmp	r3, r2
 800300e:	d100      	bne.n	8003012 <memset+0xa>
 8003010:	4770      	bx	lr
 8003012:	7019      	strb	r1, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	e7f9      	b.n	800300c <memset+0x4>

08003018 <siprintf>:
 8003018:	b40e      	push	{r1, r2, r3}
 800301a:	b500      	push	{lr}
 800301c:	490b      	ldr	r1, [pc, #44]	; (800304c <siprintf+0x34>)
 800301e:	b09c      	sub	sp, #112	; 0x70
 8003020:	ab1d      	add	r3, sp, #116	; 0x74
 8003022:	9002      	str	r0, [sp, #8]
 8003024:	9006      	str	r0, [sp, #24]
 8003026:	9107      	str	r1, [sp, #28]
 8003028:	9104      	str	r1, [sp, #16]
 800302a:	4809      	ldr	r0, [pc, #36]	; (8003050 <siprintf+0x38>)
 800302c:	4909      	ldr	r1, [pc, #36]	; (8003054 <siprintf+0x3c>)
 800302e:	cb04      	ldmia	r3!, {r2}
 8003030:	9105      	str	r1, [sp, #20]
 8003032:	6800      	ldr	r0, [r0, #0]
 8003034:	a902      	add	r1, sp, #8
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	f000 f870 	bl	800311c <_svfiprintf_r>
 800303c:	2300      	movs	r3, #0
 800303e:	9a02      	ldr	r2, [sp, #8]
 8003040:	7013      	strb	r3, [r2, #0]
 8003042:	b01c      	add	sp, #112	; 0x70
 8003044:	bc08      	pop	{r3}
 8003046:	b003      	add	sp, #12
 8003048:	4718      	bx	r3
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	7fffffff 	.word	0x7fffffff
 8003050:	20000014 	.word	0x20000014
 8003054:	ffff0208 	.word	0xffff0208

08003058 <__ssputs_r>:
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	688e      	ldr	r6, [r1, #8]
 800305c:	b085      	sub	sp, #20
 800305e:	0007      	movs	r7, r0
 8003060:	000c      	movs	r4, r1
 8003062:	9203      	str	r2, [sp, #12]
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	429e      	cmp	r6, r3
 8003068:	d83c      	bhi.n	80030e4 <__ssputs_r+0x8c>
 800306a:	2390      	movs	r3, #144	; 0x90
 800306c:	898a      	ldrh	r2, [r1, #12]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	421a      	tst	r2, r3
 8003072:	d034      	beq.n	80030de <__ssputs_r+0x86>
 8003074:	2503      	movs	r5, #3
 8003076:	6909      	ldr	r1, [r1, #16]
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	1a5b      	subs	r3, r3, r1
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	6963      	ldr	r3, [r4, #20]
 8003080:	9802      	ldr	r0, [sp, #8]
 8003082:	435d      	muls	r5, r3
 8003084:	0feb      	lsrs	r3, r5, #31
 8003086:	195d      	adds	r5, r3, r5
 8003088:	9b01      	ldr	r3, [sp, #4]
 800308a:	106d      	asrs	r5, r5, #1
 800308c:	3301      	adds	r3, #1
 800308e:	181b      	adds	r3, r3, r0
 8003090:	42ab      	cmp	r3, r5
 8003092:	d900      	bls.n	8003096 <__ssputs_r+0x3e>
 8003094:	001d      	movs	r5, r3
 8003096:	0553      	lsls	r3, r2, #21
 8003098:	d532      	bpl.n	8003100 <__ssputs_r+0xa8>
 800309a:	0029      	movs	r1, r5
 800309c:	0038      	movs	r0, r7
 800309e:	f000 fb31 	bl	8003704 <_malloc_r>
 80030a2:	1e06      	subs	r6, r0, #0
 80030a4:	d109      	bne.n	80030ba <__ssputs_r+0x62>
 80030a6:	230c      	movs	r3, #12
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	2340      	movs	r3, #64	; 0x40
 80030ac:	2001      	movs	r0, #1
 80030ae:	89a2      	ldrh	r2, [r4, #12]
 80030b0:	4240      	negs	r0, r0
 80030b2:	4313      	orrs	r3, r2
 80030b4:	81a3      	strh	r3, [r4, #12]
 80030b6:	b005      	add	sp, #20
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ba:	9a02      	ldr	r2, [sp, #8]
 80030bc:	6921      	ldr	r1, [r4, #16]
 80030be:	f000 faba 	bl	8003636 <memcpy>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <__ssputs_r+0xc0>)
 80030c6:	401a      	ands	r2, r3
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	4313      	orrs	r3, r2
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	9b02      	ldr	r3, [sp, #8]
 80030d0:	6126      	str	r6, [r4, #16]
 80030d2:	18f6      	adds	r6, r6, r3
 80030d4:	6026      	str	r6, [r4, #0]
 80030d6:	6165      	str	r5, [r4, #20]
 80030d8:	9e01      	ldr	r6, [sp, #4]
 80030da:	1aed      	subs	r5, r5, r3
 80030dc:	60a5      	str	r5, [r4, #8]
 80030de:	9b01      	ldr	r3, [sp, #4]
 80030e0:	429e      	cmp	r6, r3
 80030e2:	d900      	bls.n	80030e6 <__ssputs_r+0x8e>
 80030e4:	9e01      	ldr	r6, [sp, #4]
 80030e6:	0032      	movs	r2, r6
 80030e8:	9903      	ldr	r1, [sp, #12]
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	f000 faac 	bl	8003648 <memmove>
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	2000      	movs	r0, #0
 80030f4:	1b9b      	subs	r3, r3, r6
 80030f6:	60a3      	str	r3, [r4, #8]
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	199e      	adds	r6, r3, r6
 80030fc:	6026      	str	r6, [r4, #0]
 80030fe:	e7da      	b.n	80030b6 <__ssputs_r+0x5e>
 8003100:	002a      	movs	r2, r5
 8003102:	0038      	movs	r0, r7
 8003104:	f000 fb5c 	bl	80037c0 <_realloc_r>
 8003108:	1e06      	subs	r6, r0, #0
 800310a:	d1e0      	bne.n	80030ce <__ssputs_r+0x76>
 800310c:	0038      	movs	r0, r7
 800310e:	6921      	ldr	r1, [r4, #16]
 8003110:	f000 faae 	bl	8003670 <_free_r>
 8003114:	e7c7      	b.n	80030a6 <__ssputs_r+0x4e>
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	fffffb7f 	.word	0xfffffb7f

0800311c <_svfiprintf_r>:
 800311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311e:	b0a1      	sub	sp, #132	; 0x84
 8003120:	9003      	str	r0, [sp, #12]
 8003122:	001d      	movs	r5, r3
 8003124:	898b      	ldrh	r3, [r1, #12]
 8003126:	000f      	movs	r7, r1
 8003128:	0016      	movs	r6, r2
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	d511      	bpl.n	8003152 <_svfiprintf_r+0x36>
 800312e:	690b      	ldr	r3, [r1, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10e      	bne.n	8003152 <_svfiprintf_r+0x36>
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	f000 fae5 	bl	8003704 <_malloc_r>
 800313a:	6038      	str	r0, [r7, #0]
 800313c:	6138      	str	r0, [r7, #16]
 800313e:	2800      	cmp	r0, #0
 8003140:	d105      	bne.n	800314e <_svfiprintf_r+0x32>
 8003142:	230c      	movs	r3, #12
 8003144:	9a03      	ldr	r2, [sp, #12]
 8003146:	3801      	subs	r0, #1
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	b021      	add	sp, #132	; 0x84
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314e:	2340      	movs	r3, #64	; 0x40
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	2300      	movs	r3, #0
 8003154:	ac08      	add	r4, sp, #32
 8003156:	6163      	str	r3, [r4, #20]
 8003158:	3320      	adds	r3, #32
 800315a:	7663      	strb	r3, [r4, #25]
 800315c:	3310      	adds	r3, #16
 800315e:	76a3      	strb	r3, [r4, #26]
 8003160:	9507      	str	r5, [sp, #28]
 8003162:	0035      	movs	r5, r6
 8003164:	782b      	ldrb	r3, [r5, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <_svfiprintf_r+0x52>
 800316a:	2b25      	cmp	r3, #37	; 0x25
 800316c:	d147      	bne.n	80031fe <_svfiprintf_r+0xe2>
 800316e:	1bab      	subs	r3, r5, r6
 8003170:	9305      	str	r3, [sp, #20]
 8003172:	42b5      	cmp	r5, r6
 8003174:	d00c      	beq.n	8003190 <_svfiprintf_r+0x74>
 8003176:	0032      	movs	r2, r6
 8003178:	0039      	movs	r1, r7
 800317a:	9803      	ldr	r0, [sp, #12]
 800317c:	f7ff ff6c 	bl	8003058 <__ssputs_r>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d100      	bne.n	8003186 <_svfiprintf_r+0x6a>
 8003184:	e0ae      	b.n	80032e4 <_svfiprintf_r+0x1c8>
 8003186:	6962      	ldr	r2, [r4, #20]
 8003188:	9b05      	ldr	r3, [sp, #20]
 800318a:	4694      	mov	ip, r2
 800318c:	4463      	add	r3, ip
 800318e:	6163      	str	r3, [r4, #20]
 8003190:	782b      	ldrb	r3, [r5, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d100      	bne.n	8003198 <_svfiprintf_r+0x7c>
 8003196:	e0a5      	b.n	80032e4 <_svfiprintf_r+0x1c8>
 8003198:	2201      	movs	r2, #1
 800319a:	2300      	movs	r3, #0
 800319c:	4252      	negs	r2, r2
 800319e:	6062      	str	r2, [r4, #4]
 80031a0:	a904      	add	r1, sp, #16
 80031a2:	3254      	adds	r2, #84	; 0x54
 80031a4:	1852      	adds	r2, r2, r1
 80031a6:	1c6e      	adds	r6, r5, #1
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	60e3      	str	r3, [r4, #12]
 80031ac:	60a3      	str	r3, [r4, #8]
 80031ae:	7013      	strb	r3, [r2, #0]
 80031b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80031b2:	2205      	movs	r2, #5
 80031b4:	7831      	ldrb	r1, [r6, #0]
 80031b6:	4854      	ldr	r0, [pc, #336]	; (8003308 <_svfiprintf_r+0x1ec>)
 80031b8:	f000 fa32 	bl	8003620 <memchr>
 80031bc:	1c75      	adds	r5, r6, #1
 80031be:	2800      	cmp	r0, #0
 80031c0:	d11f      	bne.n	8003202 <_svfiprintf_r+0xe6>
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	06d3      	lsls	r3, r2, #27
 80031c6:	d504      	bpl.n	80031d2 <_svfiprintf_r+0xb6>
 80031c8:	2353      	movs	r3, #83	; 0x53
 80031ca:	a904      	add	r1, sp, #16
 80031cc:	185b      	adds	r3, r3, r1
 80031ce:	2120      	movs	r1, #32
 80031d0:	7019      	strb	r1, [r3, #0]
 80031d2:	0713      	lsls	r3, r2, #28
 80031d4:	d504      	bpl.n	80031e0 <_svfiprintf_r+0xc4>
 80031d6:	2353      	movs	r3, #83	; 0x53
 80031d8:	a904      	add	r1, sp, #16
 80031da:	185b      	adds	r3, r3, r1
 80031dc:	212b      	movs	r1, #43	; 0x2b
 80031de:	7019      	strb	r1, [r3, #0]
 80031e0:	7833      	ldrb	r3, [r6, #0]
 80031e2:	2b2a      	cmp	r3, #42	; 0x2a
 80031e4:	d016      	beq.n	8003214 <_svfiprintf_r+0xf8>
 80031e6:	0035      	movs	r5, r6
 80031e8:	2100      	movs	r1, #0
 80031ea:	200a      	movs	r0, #10
 80031ec:	68e3      	ldr	r3, [r4, #12]
 80031ee:	782a      	ldrb	r2, [r5, #0]
 80031f0:	1c6e      	adds	r6, r5, #1
 80031f2:	3a30      	subs	r2, #48	; 0x30
 80031f4:	2a09      	cmp	r2, #9
 80031f6:	d94e      	bls.n	8003296 <_svfiprintf_r+0x17a>
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d111      	bne.n	8003220 <_svfiprintf_r+0x104>
 80031fc:	e017      	b.n	800322e <_svfiprintf_r+0x112>
 80031fe:	3501      	adds	r5, #1
 8003200:	e7b0      	b.n	8003164 <_svfiprintf_r+0x48>
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <_svfiprintf_r+0x1ec>)
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	1ac0      	subs	r0, r0, r3
 8003208:	2301      	movs	r3, #1
 800320a:	4083      	lsls	r3, r0
 800320c:	4313      	orrs	r3, r2
 800320e:	002e      	movs	r6, r5
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	e7ce      	b.n	80031b2 <_svfiprintf_r+0x96>
 8003214:	9b07      	ldr	r3, [sp, #28]
 8003216:	1d19      	adds	r1, r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	9107      	str	r1, [sp, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db01      	blt.n	8003224 <_svfiprintf_r+0x108>
 8003220:	930b      	str	r3, [sp, #44]	; 0x2c
 8003222:	e004      	b.n	800322e <_svfiprintf_r+0x112>
 8003224:	425b      	negs	r3, r3
 8003226:	60e3      	str	r3, [r4, #12]
 8003228:	2302      	movs	r3, #2
 800322a:	4313      	orrs	r3, r2
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	782b      	ldrb	r3, [r5, #0]
 8003230:	2b2e      	cmp	r3, #46	; 0x2e
 8003232:	d10a      	bne.n	800324a <_svfiprintf_r+0x12e>
 8003234:	786b      	ldrb	r3, [r5, #1]
 8003236:	2b2a      	cmp	r3, #42	; 0x2a
 8003238:	d135      	bne.n	80032a6 <_svfiprintf_r+0x18a>
 800323a:	9b07      	ldr	r3, [sp, #28]
 800323c:	3502      	adds	r5, #2
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	9207      	str	r2, [sp, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db2b      	blt.n	80032a0 <_svfiprintf_r+0x184>
 8003248:	9309      	str	r3, [sp, #36]	; 0x24
 800324a:	4e30      	ldr	r6, [pc, #192]	; (800330c <_svfiprintf_r+0x1f0>)
 800324c:	2203      	movs	r2, #3
 800324e:	0030      	movs	r0, r6
 8003250:	7829      	ldrb	r1, [r5, #0]
 8003252:	f000 f9e5 	bl	8003620 <memchr>
 8003256:	2800      	cmp	r0, #0
 8003258:	d006      	beq.n	8003268 <_svfiprintf_r+0x14c>
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	1b80      	subs	r0, r0, r6
 800325e:	4083      	lsls	r3, r0
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	3501      	adds	r5, #1
 8003264:	4313      	orrs	r3, r2
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	7829      	ldrb	r1, [r5, #0]
 800326a:	2206      	movs	r2, #6
 800326c:	4828      	ldr	r0, [pc, #160]	; (8003310 <_svfiprintf_r+0x1f4>)
 800326e:	1c6e      	adds	r6, r5, #1
 8003270:	7621      	strb	r1, [r4, #24]
 8003272:	f000 f9d5 	bl	8003620 <memchr>
 8003276:	2800      	cmp	r0, #0
 8003278:	d03c      	beq.n	80032f4 <_svfiprintf_r+0x1d8>
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <_svfiprintf_r+0x1f8>)
 800327c:	2b00      	cmp	r3, #0
 800327e:	d125      	bne.n	80032cc <_svfiprintf_r+0x1b0>
 8003280:	2207      	movs	r2, #7
 8003282:	9b07      	ldr	r3, [sp, #28]
 8003284:	3307      	adds	r3, #7
 8003286:	4393      	bics	r3, r2
 8003288:	3308      	adds	r3, #8
 800328a:	9307      	str	r3, [sp, #28]
 800328c:	6963      	ldr	r3, [r4, #20]
 800328e:	9a04      	ldr	r2, [sp, #16]
 8003290:	189b      	adds	r3, r3, r2
 8003292:	6163      	str	r3, [r4, #20]
 8003294:	e765      	b.n	8003162 <_svfiprintf_r+0x46>
 8003296:	4343      	muls	r3, r0
 8003298:	0035      	movs	r5, r6
 800329a:	2101      	movs	r1, #1
 800329c:	189b      	adds	r3, r3, r2
 800329e:	e7a6      	b.n	80031ee <_svfiprintf_r+0xd2>
 80032a0:	2301      	movs	r3, #1
 80032a2:	425b      	negs	r3, r3
 80032a4:	e7d0      	b.n	8003248 <_svfiprintf_r+0x12c>
 80032a6:	2300      	movs	r3, #0
 80032a8:	200a      	movs	r0, #10
 80032aa:	001a      	movs	r2, r3
 80032ac:	3501      	adds	r5, #1
 80032ae:	6063      	str	r3, [r4, #4]
 80032b0:	7829      	ldrb	r1, [r5, #0]
 80032b2:	1c6e      	adds	r6, r5, #1
 80032b4:	3930      	subs	r1, #48	; 0x30
 80032b6:	2909      	cmp	r1, #9
 80032b8:	d903      	bls.n	80032c2 <_svfiprintf_r+0x1a6>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0c5      	beq.n	800324a <_svfiprintf_r+0x12e>
 80032be:	9209      	str	r2, [sp, #36]	; 0x24
 80032c0:	e7c3      	b.n	800324a <_svfiprintf_r+0x12e>
 80032c2:	4342      	muls	r2, r0
 80032c4:	0035      	movs	r5, r6
 80032c6:	2301      	movs	r3, #1
 80032c8:	1852      	adds	r2, r2, r1
 80032ca:	e7f1      	b.n	80032b0 <_svfiprintf_r+0x194>
 80032cc:	ab07      	add	r3, sp, #28
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	003a      	movs	r2, r7
 80032d2:	0021      	movs	r1, r4
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <_svfiprintf_r+0x1fc>)
 80032d6:	9803      	ldr	r0, [sp, #12]
 80032d8:	e000      	b.n	80032dc <_svfiprintf_r+0x1c0>
 80032da:	bf00      	nop
 80032dc:	9004      	str	r0, [sp, #16]
 80032de:	9b04      	ldr	r3, [sp, #16]
 80032e0:	3301      	adds	r3, #1
 80032e2:	d1d3      	bne.n	800328c <_svfiprintf_r+0x170>
 80032e4:	89bb      	ldrh	r3, [r7, #12]
 80032e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032e8:	065b      	lsls	r3, r3, #25
 80032ea:	d400      	bmi.n	80032ee <_svfiprintf_r+0x1d2>
 80032ec:	e72d      	b.n	800314a <_svfiprintf_r+0x2e>
 80032ee:	2001      	movs	r0, #1
 80032f0:	4240      	negs	r0, r0
 80032f2:	e72a      	b.n	800314a <_svfiprintf_r+0x2e>
 80032f4:	ab07      	add	r3, sp, #28
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	003a      	movs	r2, r7
 80032fa:	0021      	movs	r1, r4
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <_svfiprintf_r+0x1fc>)
 80032fe:	9803      	ldr	r0, [sp, #12]
 8003300:	f000 f87c 	bl	80033fc <_printf_i>
 8003304:	e7ea      	b.n	80032dc <_svfiprintf_r+0x1c0>
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	0800401f 	.word	0x0800401f
 800330c:	08004025 	.word	0x08004025
 8003310:	08004029 	.word	0x08004029
 8003314:	00000000 	.word	0x00000000
 8003318:	08003059 	.word	0x08003059

0800331c <_printf_common>:
 800331c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800331e:	0015      	movs	r5, r2
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	688a      	ldr	r2, [r1, #8]
 8003324:	690b      	ldr	r3, [r1, #16]
 8003326:	000c      	movs	r4, r1
 8003328:	9000      	str	r0, [sp, #0]
 800332a:	4293      	cmp	r3, r2
 800332c:	da00      	bge.n	8003330 <_printf_common+0x14>
 800332e:	0013      	movs	r3, r2
 8003330:	0022      	movs	r2, r4
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	3243      	adds	r2, #67	; 0x43
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	2a00      	cmp	r2, #0
 800333a:	d001      	beq.n	8003340 <_printf_common+0x24>
 800333c:	3301      	adds	r3, #1
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	069b      	lsls	r3, r3, #26
 8003344:	d502      	bpl.n	800334c <_printf_common+0x30>
 8003346:	682b      	ldr	r3, [r5, #0]
 8003348:	3302      	adds	r3, #2
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	2306      	movs	r3, #6
 8003350:	0017      	movs	r7, r2
 8003352:	401f      	ands	r7, r3
 8003354:	421a      	tst	r2, r3
 8003356:	d027      	beq.n	80033a8 <_printf_common+0x8c>
 8003358:	0023      	movs	r3, r4
 800335a:	3343      	adds	r3, #67	; 0x43
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	4193      	sbcs	r3, r2
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	0692      	lsls	r2, r2, #26
 8003366:	d430      	bmi.n	80033ca <_printf_common+0xae>
 8003368:	0022      	movs	r2, r4
 800336a:	9901      	ldr	r1, [sp, #4]
 800336c:	9800      	ldr	r0, [sp, #0]
 800336e:	9e08      	ldr	r6, [sp, #32]
 8003370:	3243      	adds	r2, #67	; 0x43
 8003372:	47b0      	blx	r6
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d025      	beq.n	80033c4 <_printf_common+0xa8>
 8003378:	2306      	movs	r3, #6
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	682a      	ldr	r2, [r5, #0]
 800337e:	68e1      	ldr	r1, [r4, #12]
 8003380:	2500      	movs	r5, #0
 8003382:	4003      	ands	r3, r0
 8003384:	2b04      	cmp	r3, #4
 8003386:	d103      	bne.n	8003390 <_printf_common+0x74>
 8003388:	1a8d      	subs	r5, r1, r2
 800338a:	43eb      	mvns	r3, r5
 800338c:	17db      	asrs	r3, r3, #31
 800338e:	401d      	ands	r5, r3
 8003390:	68a3      	ldr	r3, [r4, #8]
 8003392:	6922      	ldr	r2, [r4, #16]
 8003394:	4293      	cmp	r3, r2
 8003396:	dd01      	ble.n	800339c <_printf_common+0x80>
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	18ed      	adds	r5, r5, r3
 800339c:	2700      	movs	r7, #0
 800339e:	42bd      	cmp	r5, r7
 80033a0:	d120      	bne.n	80033e4 <_printf_common+0xc8>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e010      	b.n	80033c8 <_printf_common+0xac>
 80033a6:	3701      	adds	r7, #1
 80033a8:	68e3      	ldr	r3, [r4, #12]
 80033aa:	682a      	ldr	r2, [r5, #0]
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	42bb      	cmp	r3, r7
 80033b0:	ddd2      	ble.n	8003358 <_printf_common+0x3c>
 80033b2:	0022      	movs	r2, r4
 80033b4:	2301      	movs	r3, #1
 80033b6:	9901      	ldr	r1, [sp, #4]
 80033b8:	9800      	ldr	r0, [sp, #0]
 80033ba:	9e08      	ldr	r6, [sp, #32]
 80033bc:	3219      	adds	r2, #25
 80033be:	47b0      	blx	r6
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d1f0      	bne.n	80033a6 <_printf_common+0x8a>
 80033c4:	2001      	movs	r0, #1
 80033c6:	4240      	negs	r0, r0
 80033c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033ca:	2030      	movs	r0, #48	; 0x30
 80033cc:	18e1      	adds	r1, r4, r3
 80033ce:	3143      	adds	r1, #67	; 0x43
 80033d0:	7008      	strb	r0, [r1, #0]
 80033d2:	0021      	movs	r1, r4
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	3145      	adds	r1, #69	; 0x45
 80033d8:	7809      	ldrb	r1, [r1, #0]
 80033da:	18a2      	adds	r2, r4, r2
 80033dc:	3243      	adds	r2, #67	; 0x43
 80033de:	3302      	adds	r3, #2
 80033e0:	7011      	strb	r1, [r2, #0]
 80033e2:	e7c1      	b.n	8003368 <_printf_common+0x4c>
 80033e4:	0022      	movs	r2, r4
 80033e6:	2301      	movs	r3, #1
 80033e8:	9901      	ldr	r1, [sp, #4]
 80033ea:	9800      	ldr	r0, [sp, #0]
 80033ec:	9e08      	ldr	r6, [sp, #32]
 80033ee:	321a      	adds	r2, #26
 80033f0:	47b0      	blx	r6
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d0e6      	beq.n	80033c4 <_printf_common+0xa8>
 80033f6:	3701      	adds	r7, #1
 80033f8:	e7d1      	b.n	800339e <_printf_common+0x82>
	...

080033fc <_printf_i>:
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	b08b      	sub	sp, #44	; 0x2c
 8003400:	9206      	str	r2, [sp, #24]
 8003402:	000a      	movs	r2, r1
 8003404:	3243      	adds	r2, #67	; 0x43
 8003406:	9307      	str	r3, [sp, #28]
 8003408:	9005      	str	r0, [sp, #20]
 800340a:	9204      	str	r2, [sp, #16]
 800340c:	7e0a      	ldrb	r2, [r1, #24]
 800340e:	000c      	movs	r4, r1
 8003410:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003412:	2a78      	cmp	r2, #120	; 0x78
 8003414:	d806      	bhi.n	8003424 <_printf_i+0x28>
 8003416:	2a62      	cmp	r2, #98	; 0x62
 8003418:	d808      	bhi.n	800342c <_printf_i+0x30>
 800341a:	2a00      	cmp	r2, #0
 800341c:	d100      	bne.n	8003420 <_printf_i+0x24>
 800341e:	e0c0      	b.n	80035a2 <_printf_i+0x1a6>
 8003420:	2a58      	cmp	r2, #88	; 0x58
 8003422:	d052      	beq.n	80034ca <_printf_i+0xce>
 8003424:	0026      	movs	r6, r4
 8003426:	3642      	adds	r6, #66	; 0x42
 8003428:	7032      	strb	r2, [r6, #0]
 800342a:	e022      	b.n	8003472 <_printf_i+0x76>
 800342c:	0010      	movs	r0, r2
 800342e:	3863      	subs	r0, #99	; 0x63
 8003430:	2815      	cmp	r0, #21
 8003432:	d8f7      	bhi.n	8003424 <_printf_i+0x28>
 8003434:	f7fc fe68 	bl	8000108 <__gnu_thumb1_case_shi>
 8003438:	001f0016 	.word	0x001f0016
 800343c:	fff6fff6 	.word	0xfff6fff6
 8003440:	fff6fff6 	.word	0xfff6fff6
 8003444:	fff6001f 	.word	0xfff6001f
 8003448:	fff6fff6 	.word	0xfff6fff6
 800344c:	00a8fff6 	.word	0x00a8fff6
 8003450:	009a0036 	.word	0x009a0036
 8003454:	fff6fff6 	.word	0xfff6fff6
 8003458:	fff600b9 	.word	0xfff600b9
 800345c:	fff60036 	.word	0xfff60036
 8003460:	009efff6 	.word	0x009efff6
 8003464:	0026      	movs	r6, r4
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	3642      	adds	r6, #66	; 0x42
 800346a:	1d11      	adds	r1, r2, #4
 800346c:	6019      	str	r1, [r3, #0]
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	7033      	strb	r3, [r6, #0]
 8003472:	2301      	movs	r3, #1
 8003474:	e0a7      	b.n	80035c6 <_printf_i+0x1ca>
 8003476:	6808      	ldr	r0, [r1, #0]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	1d0a      	adds	r2, r1, #4
 800347c:	0605      	lsls	r5, r0, #24
 800347e:	d50b      	bpl.n	8003498 <_printf_i+0x9c>
 8003480:	680d      	ldr	r5, [r1, #0]
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	2d00      	cmp	r5, #0
 8003486:	da03      	bge.n	8003490 <_printf_i+0x94>
 8003488:	232d      	movs	r3, #45	; 0x2d
 800348a:	9a04      	ldr	r2, [sp, #16]
 800348c:	426d      	negs	r5, r5
 800348e:	7013      	strb	r3, [r2, #0]
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <_printf_i+0x21c>)
 8003492:	270a      	movs	r7, #10
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	e032      	b.n	80034fe <_printf_i+0x102>
 8003498:	680d      	ldr	r5, [r1, #0]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	0641      	lsls	r1, r0, #25
 800349e:	d5f1      	bpl.n	8003484 <_printf_i+0x88>
 80034a0:	b22d      	sxth	r5, r5
 80034a2:	e7ef      	b.n	8003484 <_printf_i+0x88>
 80034a4:	680d      	ldr	r5, [r1, #0]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	1d08      	adds	r0, r1, #4
 80034aa:	6018      	str	r0, [r3, #0]
 80034ac:	062e      	lsls	r6, r5, #24
 80034ae:	d501      	bpl.n	80034b4 <_printf_i+0xb8>
 80034b0:	680d      	ldr	r5, [r1, #0]
 80034b2:	e003      	b.n	80034bc <_printf_i+0xc0>
 80034b4:	066d      	lsls	r5, r5, #25
 80034b6:	d5fb      	bpl.n	80034b0 <_printf_i+0xb4>
 80034b8:	680d      	ldr	r5, [r1, #0]
 80034ba:	b2ad      	uxth	r5, r5
 80034bc:	4b56      	ldr	r3, [pc, #344]	; (8003618 <_printf_i+0x21c>)
 80034be:	270a      	movs	r7, #10
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	2a6f      	cmp	r2, #111	; 0x6f
 80034c4:	d117      	bne.n	80034f6 <_printf_i+0xfa>
 80034c6:	2708      	movs	r7, #8
 80034c8:	e015      	b.n	80034f6 <_printf_i+0xfa>
 80034ca:	3145      	adds	r1, #69	; 0x45
 80034cc:	700a      	strb	r2, [r1, #0]
 80034ce:	4a52      	ldr	r2, [pc, #328]	; (8003618 <_printf_i+0x21c>)
 80034d0:	9203      	str	r2, [sp, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	6821      	ldr	r1, [r4, #0]
 80034d6:	ca20      	ldmia	r2!, {r5}
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	0608      	lsls	r0, r1, #24
 80034dc:	d550      	bpl.n	8003580 <_printf_i+0x184>
 80034de:	07cb      	lsls	r3, r1, #31
 80034e0:	d502      	bpl.n	80034e8 <_printf_i+0xec>
 80034e2:	2320      	movs	r3, #32
 80034e4:	4319      	orrs	r1, r3
 80034e6:	6021      	str	r1, [r4, #0]
 80034e8:	2710      	movs	r7, #16
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	d103      	bne.n	80034f6 <_printf_i+0xfa>
 80034ee:	2320      	movs	r3, #32
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	439a      	bics	r2, r3
 80034f4:	6022      	str	r2, [r4, #0]
 80034f6:	0023      	movs	r3, r4
 80034f8:	2200      	movs	r2, #0
 80034fa:	3343      	adds	r3, #67	; 0x43
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	60a3      	str	r3, [r4, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db03      	blt.n	800350e <_printf_i+0x112>
 8003506:	2204      	movs	r2, #4
 8003508:	6821      	ldr	r1, [r4, #0]
 800350a:	4391      	bics	r1, r2
 800350c:	6021      	str	r1, [r4, #0]
 800350e:	2d00      	cmp	r5, #0
 8003510:	d102      	bne.n	8003518 <_printf_i+0x11c>
 8003512:	9e04      	ldr	r6, [sp, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <_printf_i+0x136>
 8003518:	9e04      	ldr	r6, [sp, #16]
 800351a:	0028      	movs	r0, r5
 800351c:	0039      	movs	r1, r7
 800351e:	f7fc fe83 	bl	8000228 <__aeabi_uidivmod>
 8003522:	9b03      	ldr	r3, [sp, #12]
 8003524:	3e01      	subs	r6, #1
 8003526:	5c5b      	ldrb	r3, [r3, r1]
 8003528:	7033      	strb	r3, [r6, #0]
 800352a:	002b      	movs	r3, r5
 800352c:	0005      	movs	r5, r0
 800352e:	429f      	cmp	r7, r3
 8003530:	d9f3      	bls.n	800351a <_printf_i+0x11e>
 8003532:	2f08      	cmp	r7, #8
 8003534:	d109      	bne.n	800354a <_printf_i+0x14e>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	07db      	lsls	r3, r3, #31
 800353a:	d506      	bpl.n	800354a <_printf_i+0x14e>
 800353c:	6863      	ldr	r3, [r4, #4]
 800353e:	6922      	ldr	r2, [r4, #16]
 8003540:	4293      	cmp	r3, r2
 8003542:	dc02      	bgt.n	800354a <_printf_i+0x14e>
 8003544:	2330      	movs	r3, #48	; 0x30
 8003546:	3e01      	subs	r6, #1
 8003548:	7033      	strb	r3, [r6, #0]
 800354a:	9b04      	ldr	r3, [sp, #16]
 800354c:	1b9b      	subs	r3, r3, r6
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	9b07      	ldr	r3, [sp, #28]
 8003552:	0021      	movs	r1, r4
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	9805      	ldr	r0, [sp, #20]
 8003558:	9b06      	ldr	r3, [sp, #24]
 800355a:	aa09      	add	r2, sp, #36	; 0x24
 800355c:	f7ff fede 	bl	800331c <_printf_common>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d135      	bne.n	80035d0 <_printf_i+0x1d4>
 8003564:	2001      	movs	r0, #1
 8003566:	4240      	negs	r0, r0
 8003568:	b00b      	add	sp, #44	; 0x2c
 800356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800356c:	2220      	movs	r2, #32
 800356e:	6809      	ldr	r1, [r1, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	6022      	str	r2, [r4, #0]
 8003574:	0022      	movs	r2, r4
 8003576:	2178      	movs	r1, #120	; 0x78
 8003578:	3245      	adds	r2, #69	; 0x45
 800357a:	7011      	strb	r1, [r2, #0]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <_printf_i+0x220>)
 800357e:	e7a7      	b.n	80034d0 <_printf_i+0xd4>
 8003580:	0648      	lsls	r0, r1, #25
 8003582:	d5ac      	bpl.n	80034de <_printf_i+0xe2>
 8003584:	b2ad      	uxth	r5, r5
 8003586:	e7aa      	b.n	80034de <_printf_i+0xe2>
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	680d      	ldr	r5, [r1, #0]
 800358c:	1d10      	adds	r0, r2, #4
 800358e:	6949      	ldr	r1, [r1, #20]
 8003590:	6018      	str	r0, [r3, #0]
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	062e      	lsls	r6, r5, #24
 8003596:	d501      	bpl.n	800359c <_printf_i+0x1a0>
 8003598:	6019      	str	r1, [r3, #0]
 800359a:	e002      	b.n	80035a2 <_printf_i+0x1a6>
 800359c:	066d      	lsls	r5, r5, #25
 800359e:	d5fb      	bpl.n	8003598 <_printf_i+0x19c>
 80035a0:	8019      	strh	r1, [r3, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9e04      	ldr	r6, [sp, #16]
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	e7d2      	b.n	8003550 <_printf_i+0x154>
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	1d11      	adds	r1, r2, #4
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	6816      	ldr	r6, [r2, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	0030      	movs	r0, r6
 80035b6:	6862      	ldr	r2, [r4, #4]
 80035b8:	f000 f832 	bl	8003620 <memchr>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d001      	beq.n	80035c4 <_printf_i+0x1c8>
 80035c0:	1b80      	subs	r0, r0, r6
 80035c2:	6060      	str	r0, [r4, #4]
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	6123      	str	r3, [r4, #16]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9a04      	ldr	r2, [sp, #16]
 80035cc:	7013      	strb	r3, [r2, #0]
 80035ce:	e7bf      	b.n	8003550 <_printf_i+0x154>
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	0032      	movs	r2, r6
 80035d4:	9906      	ldr	r1, [sp, #24]
 80035d6:	9805      	ldr	r0, [sp, #20]
 80035d8:	9d07      	ldr	r5, [sp, #28]
 80035da:	47a8      	blx	r5
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d0c1      	beq.n	8003564 <_printf_i+0x168>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	079b      	lsls	r3, r3, #30
 80035e4:	d415      	bmi.n	8003612 <_printf_i+0x216>
 80035e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e8:	68e0      	ldr	r0, [r4, #12]
 80035ea:	4298      	cmp	r0, r3
 80035ec:	dabc      	bge.n	8003568 <_printf_i+0x16c>
 80035ee:	0018      	movs	r0, r3
 80035f0:	e7ba      	b.n	8003568 <_printf_i+0x16c>
 80035f2:	0022      	movs	r2, r4
 80035f4:	2301      	movs	r3, #1
 80035f6:	9906      	ldr	r1, [sp, #24]
 80035f8:	9805      	ldr	r0, [sp, #20]
 80035fa:	9e07      	ldr	r6, [sp, #28]
 80035fc:	3219      	adds	r2, #25
 80035fe:	47b0      	blx	r6
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d0af      	beq.n	8003564 <_printf_i+0x168>
 8003604:	3501      	adds	r5, #1
 8003606:	68e3      	ldr	r3, [r4, #12]
 8003608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	42ab      	cmp	r3, r5
 800360e:	dcf0      	bgt.n	80035f2 <_printf_i+0x1f6>
 8003610:	e7e9      	b.n	80035e6 <_printf_i+0x1ea>
 8003612:	2500      	movs	r5, #0
 8003614:	e7f7      	b.n	8003606 <_printf_i+0x20a>
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	08004030 	.word	0x08004030
 800361c:	08004041 	.word	0x08004041

08003620 <memchr>:
 8003620:	b2c9      	uxtb	r1, r1
 8003622:	1882      	adds	r2, r0, r2
 8003624:	4290      	cmp	r0, r2
 8003626:	d101      	bne.n	800362c <memchr+0xc>
 8003628:	2000      	movs	r0, #0
 800362a:	4770      	bx	lr
 800362c:	7803      	ldrb	r3, [r0, #0]
 800362e:	428b      	cmp	r3, r1
 8003630:	d0fb      	beq.n	800362a <memchr+0xa>
 8003632:	3001      	adds	r0, #1
 8003634:	e7f6      	b.n	8003624 <memchr+0x4>

08003636 <memcpy>:
 8003636:	2300      	movs	r3, #0
 8003638:	b510      	push	{r4, lr}
 800363a:	429a      	cmp	r2, r3
 800363c:	d100      	bne.n	8003640 <memcpy+0xa>
 800363e:	bd10      	pop	{r4, pc}
 8003640:	5ccc      	ldrb	r4, [r1, r3]
 8003642:	54c4      	strb	r4, [r0, r3]
 8003644:	3301      	adds	r3, #1
 8003646:	e7f8      	b.n	800363a <memcpy+0x4>

08003648 <memmove>:
 8003648:	b510      	push	{r4, lr}
 800364a:	4288      	cmp	r0, r1
 800364c:	d902      	bls.n	8003654 <memmove+0xc>
 800364e:	188b      	adds	r3, r1, r2
 8003650:	4298      	cmp	r0, r3
 8003652:	d303      	bcc.n	800365c <memmove+0x14>
 8003654:	2300      	movs	r3, #0
 8003656:	e007      	b.n	8003668 <memmove+0x20>
 8003658:	5c8b      	ldrb	r3, [r1, r2]
 800365a:	5483      	strb	r3, [r0, r2]
 800365c:	3a01      	subs	r2, #1
 800365e:	d2fb      	bcs.n	8003658 <memmove+0x10>
 8003660:	bd10      	pop	{r4, pc}
 8003662:	5ccc      	ldrb	r4, [r1, r3]
 8003664:	54c4      	strb	r4, [r0, r3]
 8003666:	3301      	adds	r3, #1
 8003668:	429a      	cmp	r2, r3
 800366a:	d1fa      	bne.n	8003662 <memmove+0x1a>
 800366c:	e7f8      	b.n	8003660 <memmove+0x18>
	...

08003670 <_free_r>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	0005      	movs	r5, r0
 8003674:	2900      	cmp	r1, #0
 8003676:	d010      	beq.n	800369a <_free_r+0x2a>
 8003678:	1f0c      	subs	r4, r1, #4
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	da00      	bge.n	8003682 <_free_r+0x12>
 8003680:	18e4      	adds	r4, r4, r3
 8003682:	0028      	movs	r0, r5
 8003684:	f000 f8d4 	bl	8003830 <__malloc_lock>
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <_free_r+0x90>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <_free_r+0x2c>
 8003690:	6063      	str	r3, [r4, #4]
 8003692:	6014      	str	r4, [r2, #0]
 8003694:	0028      	movs	r0, r5
 8003696:	f000 f8d3 	bl	8003840 <__malloc_unlock>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	42a3      	cmp	r3, r4
 800369e:	d908      	bls.n	80036b2 <_free_r+0x42>
 80036a0:	6821      	ldr	r1, [r4, #0]
 80036a2:	1860      	adds	r0, r4, r1
 80036a4:	4283      	cmp	r3, r0
 80036a6:	d1f3      	bne.n	8003690 <_free_r+0x20>
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	1841      	adds	r1, r0, r1
 80036ae:	6021      	str	r1, [r4, #0]
 80036b0:	e7ee      	b.n	8003690 <_free_r+0x20>
 80036b2:	001a      	movs	r2, r3
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <_free_r+0x4e>
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	d9f9      	bls.n	80036b2 <_free_r+0x42>
 80036be:	6811      	ldr	r1, [r2, #0]
 80036c0:	1850      	adds	r0, r2, r1
 80036c2:	42a0      	cmp	r0, r4
 80036c4:	d10b      	bne.n	80036de <_free_r+0x6e>
 80036c6:	6820      	ldr	r0, [r4, #0]
 80036c8:	1809      	adds	r1, r1, r0
 80036ca:	1850      	adds	r0, r2, r1
 80036cc:	6011      	str	r1, [r2, #0]
 80036ce:	4283      	cmp	r3, r0
 80036d0:	d1e0      	bne.n	8003694 <_free_r+0x24>
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	1841      	adds	r1, r0, r1
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	6053      	str	r3, [r2, #4]
 80036dc:	e7da      	b.n	8003694 <_free_r+0x24>
 80036de:	42a0      	cmp	r0, r4
 80036e0:	d902      	bls.n	80036e8 <_free_r+0x78>
 80036e2:	230c      	movs	r3, #12
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	e7d5      	b.n	8003694 <_free_r+0x24>
 80036e8:	6821      	ldr	r1, [r4, #0]
 80036ea:	1860      	adds	r0, r4, r1
 80036ec:	4283      	cmp	r3, r0
 80036ee:	d103      	bne.n	80036f8 <_free_r+0x88>
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	1841      	adds	r1, r0, r1
 80036f6:	6021      	str	r1, [r4, #0]
 80036f8:	6063      	str	r3, [r4, #4]
 80036fa:	6054      	str	r4, [r2, #4]
 80036fc:	e7ca      	b.n	8003694 <_free_r+0x24>
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	200000c0 	.word	0x200000c0

08003704 <_malloc_r>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	2303      	movs	r3, #3
 8003708:	1ccd      	adds	r5, r1, #3
 800370a:	439d      	bics	r5, r3
 800370c:	3508      	adds	r5, #8
 800370e:	0006      	movs	r6, r0
 8003710:	2d0c      	cmp	r5, #12
 8003712:	d21f      	bcs.n	8003754 <_malloc_r+0x50>
 8003714:	250c      	movs	r5, #12
 8003716:	42a9      	cmp	r1, r5
 8003718:	d81e      	bhi.n	8003758 <_malloc_r+0x54>
 800371a:	0030      	movs	r0, r6
 800371c:	f000 f888 	bl	8003830 <__malloc_lock>
 8003720:	4925      	ldr	r1, [pc, #148]	; (80037b8 <_malloc_r+0xb4>)
 8003722:	680a      	ldr	r2, [r1, #0]
 8003724:	0014      	movs	r4, r2
 8003726:	2c00      	cmp	r4, #0
 8003728:	d11a      	bne.n	8003760 <_malloc_r+0x5c>
 800372a:	4f24      	ldr	r7, [pc, #144]	; (80037bc <_malloc_r+0xb8>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <_malloc_r+0x38>
 8003732:	0021      	movs	r1, r4
 8003734:	0030      	movs	r0, r6
 8003736:	f000 f869 	bl	800380c <_sbrk_r>
 800373a:	6038      	str	r0, [r7, #0]
 800373c:	0029      	movs	r1, r5
 800373e:	0030      	movs	r0, r6
 8003740:	f000 f864 	bl	800380c <_sbrk_r>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d12b      	bne.n	80037a0 <_malloc_r+0x9c>
 8003748:	230c      	movs	r3, #12
 800374a:	0030      	movs	r0, r6
 800374c:	6033      	str	r3, [r6, #0]
 800374e:	f000 f877 	bl	8003840 <__malloc_unlock>
 8003752:	e003      	b.n	800375c <_malloc_r+0x58>
 8003754:	2d00      	cmp	r5, #0
 8003756:	dade      	bge.n	8003716 <_malloc_r+0x12>
 8003758:	230c      	movs	r3, #12
 800375a:	6033      	str	r3, [r6, #0]
 800375c:	2000      	movs	r0, #0
 800375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	1b5b      	subs	r3, r3, r5
 8003764:	d419      	bmi.n	800379a <_malloc_r+0x96>
 8003766:	2b0b      	cmp	r3, #11
 8003768:	d903      	bls.n	8003772 <_malloc_r+0x6e>
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	18e4      	adds	r4, r4, r3
 800376e:	6025      	str	r5, [r4, #0]
 8003770:	e003      	b.n	800377a <_malloc_r+0x76>
 8003772:	6863      	ldr	r3, [r4, #4]
 8003774:	42a2      	cmp	r2, r4
 8003776:	d10e      	bne.n	8003796 <_malloc_r+0x92>
 8003778:	600b      	str	r3, [r1, #0]
 800377a:	0030      	movs	r0, r6
 800377c:	f000 f860 	bl	8003840 <__malloc_unlock>
 8003780:	0020      	movs	r0, r4
 8003782:	2207      	movs	r2, #7
 8003784:	300b      	adds	r0, #11
 8003786:	1d23      	adds	r3, r4, #4
 8003788:	4390      	bics	r0, r2
 800378a:	1ac2      	subs	r2, r0, r3
 800378c:	4298      	cmp	r0, r3
 800378e:	d0e6      	beq.n	800375e <_malloc_r+0x5a>
 8003790:	1a1b      	subs	r3, r3, r0
 8003792:	50a3      	str	r3, [r4, r2]
 8003794:	e7e3      	b.n	800375e <_malloc_r+0x5a>
 8003796:	6053      	str	r3, [r2, #4]
 8003798:	e7ef      	b.n	800377a <_malloc_r+0x76>
 800379a:	0022      	movs	r2, r4
 800379c:	6864      	ldr	r4, [r4, #4]
 800379e:	e7c2      	b.n	8003726 <_malloc_r+0x22>
 80037a0:	2303      	movs	r3, #3
 80037a2:	1cc4      	adds	r4, r0, #3
 80037a4:	439c      	bics	r4, r3
 80037a6:	42a0      	cmp	r0, r4
 80037a8:	d0e1      	beq.n	800376e <_malloc_r+0x6a>
 80037aa:	1a21      	subs	r1, r4, r0
 80037ac:	0030      	movs	r0, r6
 80037ae:	f000 f82d 	bl	800380c <_sbrk_r>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d1db      	bne.n	800376e <_malloc_r+0x6a>
 80037b6:	e7c7      	b.n	8003748 <_malloc_r+0x44>
 80037b8:	200000c0 	.word	0x200000c0
 80037bc:	200000c4 	.word	0x200000c4

080037c0 <_realloc_r>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	0007      	movs	r7, r0
 80037c4:	000d      	movs	r5, r1
 80037c6:	0016      	movs	r6, r2
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d105      	bne.n	80037d8 <_realloc_r+0x18>
 80037cc:	0011      	movs	r1, r2
 80037ce:	f7ff ff99 	bl	8003704 <_malloc_r>
 80037d2:	0004      	movs	r4, r0
 80037d4:	0020      	movs	r0, r4
 80037d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d8:	2a00      	cmp	r2, #0
 80037da:	d103      	bne.n	80037e4 <_realloc_r+0x24>
 80037dc:	f7ff ff48 	bl	8003670 <_free_r>
 80037e0:	0034      	movs	r4, r6
 80037e2:	e7f7      	b.n	80037d4 <_realloc_r+0x14>
 80037e4:	f000 f834 	bl	8003850 <_malloc_usable_size_r>
 80037e8:	002c      	movs	r4, r5
 80037ea:	42b0      	cmp	r0, r6
 80037ec:	d2f2      	bcs.n	80037d4 <_realloc_r+0x14>
 80037ee:	0031      	movs	r1, r6
 80037f0:	0038      	movs	r0, r7
 80037f2:	f7ff ff87 	bl	8003704 <_malloc_r>
 80037f6:	1e04      	subs	r4, r0, #0
 80037f8:	d0ec      	beq.n	80037d4 <_realloc_r+0x14>
 80037fa:	0029      	movs	r1, r5
 80037fc:	0032      	movs	r2, r6
 80037fe:	f7ff ff1a 	bl	8003636 <memcpy>
 8003802:	0029      	movs	r1, r5
 8003804:	0038      	movs	r0, r7
 8003806:	f7ff ff33 	bl	8003670 <_free_r>
 800380a:	e7e3      	b.n	80037d4 <_realloc_r+0x14>

0800380c <_sbrk_r>:
 800380c:	2300      	movs	r3, #0
 800380e:	b570      	push	{r4, r5, r6, lr}
 8003810:	4d06      	ldr	r5, [pc, #24]	; (800382c <_sbrk_r+0x20>)
 8003812:	0004      	movs	r4, r0
 8003814:	0008      	movs	r0, r1
 8003816:	602b      	str	r3, [r5, #0]
 8003818:	f7fe fc68 	bl	80020ec <_sbrk>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d103      	bne.n	8003828 <_sbrk_r+0x1c>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d000      	beq.n	8003828 <_sbrk_r+0x1c>
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	200004d0 	.word	0x200004d0

08003830 <__malloc_lock>:
 8003830:	b510      	push	{r4, lr}
 8003832:	4802      	ldr	r0, [pc, #8]	; (800383c <__malloc_lock+0xc>)
 8003834:	f000 f814 	bl	8003860 <__retarget_lock_acquire_recursive>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	200004d8 	.word	0x200004d8

08003840 <__malloc_unlock>:
 8003840:	b510      	push	{r4, lr}
 8003842:	4802      	ldr	r0, [pc, #8]	; (800384c <__malloc_unlock+0xc>)
 8003844:	f000 f80d 	bl	8003862 <__retarget_lock_release_recursive>
 8003848:	bd10      	pop	{r4, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	200004d8 	.word	0x200004d8

08003850 <_malloc_usable_size_r>:
 8003850:	1f0b      	subs	r3, r1, #4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1f18      	subs	r0, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	da01      	bge.n	800385e <_malloc_usable_size_r+0xe>
 800385a:	580b      	ldr	r3, [r1, r0]
 800385c:	18c0      	adds	r0, r0, r3
 800385e:	4770      	bx	lr

08003860 <__retarget_lock_acquire_recursive>:
 8003860:	4770      	bx	lr

08003862 <__retarget_lock_release_recursive>:
 8003862:	4770      	bx	lr

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
