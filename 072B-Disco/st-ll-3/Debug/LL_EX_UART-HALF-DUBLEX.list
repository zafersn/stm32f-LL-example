
LL_EX_UART-HALF-DUBLEX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000161c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016f4  080016f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080016f4  080016f4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016f4  080016f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016f8  080016f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080016fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000014  08001710  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001710  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fe6  00000000  00000000  00023f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  00024f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000510  00000000  00000000  000254a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ec0  00000000  00000000  000259b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000040b4  00000000  00000000  00039878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000677ce  00000000  00000000  0003d92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a50fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012cc  00000000  00000000  000a5150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080016c4 	.word	0x080016c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080016c4 	.word	0x080016c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <LL_SYSTICK_EnableIT+0x18>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <LL_SYSTICK_EnableIT+0x18>)
 800022a:	2102      	movs	r1, #2
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e000e010 	.word	0xe000e010

0800023c <LL_USART_EnableDirectionRx>:
  * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000244:	f3ef 8310 	mrs	r3, PRIMASK
 8000248:	60bb      	str	r3, [r7, #8]
  return(result);
 800024a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2301      	movs	r3, #1
 8000250:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	f383 8810 	msr	PRIMASK, r3
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2204      	movs	r2, #4
 8000260:	431a      	orrs	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	f383 8810 	msr	PRIMASK, r3
}
 8000270:	46c0      	nop			; (mov r8, r8)
}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	b006      	add	sp, #24
 8000278:	bd80      	pop	{r7, pc}

0800027a <LL_USART_EnableDirectionTx>:
  * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	b086      	sub	sp, #24
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000282:	f3ef 8310 	mrs	r3, PRIMASK
 8000286:	60bb      	str	r3, [r7, #8]
  return(result);
 8000288:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	2301      	movs	r3, #1
 800028e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	f383 8810 	msr	PRIMASK, r3
}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2208      	movs	r2, #8
 800029e:	431a      	orrs	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	f383 8810 	msr	PRIMASK, r3
}
 80002ae:	46c0      	nop			; (mov r8, r8)
}
 80002b0:	46c0      	nop			; (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b006      	add	sp, #24
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <LL_USART_EnableHalfDuplex>:
  * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	2208      	movs	r2, #8
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	609a      	str	r2, [r3, #8]
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	69db      	ldr	r3, [r3, #28]
 80002e0:	2220      	movs	r2, #32
 80002e2:	4013      	ands	r3, r2
 80002e4:	2b20      	cmp	r3, #32
 80002e6:	d101      	bne.n	80002ec <LL_USART_IsActiveFlag_RXNE+0x18>
 80002e8:	2301      	movs	r3, #1
 80002ea:	e000      	b.n	80002ee <LL_USART_IsActiveFlag_RXNE+0x1a>
 80002ec:	2300      	movs	r3, #0
}
 80002ee:	0018      	movs	r0, r3
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b002      	add	sp, #8
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b082      	sub	sp, #8
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	2240      	movs	r2, #64	; 0x40
 8000304:	4013      	ands	r3, r2
 8000306:	2b40      	cmp	r3, #64	; 0x40
 8000308:	d101      	bne.n	800030e <LL_USART_IsActiveFlag_TC+0x18>
 800030a:	2301      	movs	r3, #1
 800030c:	e000      	b.n	8000310 <LL_USART_IsActiveFlag_TC+0x1a>
 800030e:	2300      	movs	r3, #0
}
 8000310:	0018      	movs	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	b002      	add	sp, #8
 8000316:	bd80      	pop	{r7, pc}

08000318 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2240      	movs	r2, #64	; 0x40
 8000324:	621a      	str	r2, [r3, #32]
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b002      	add	sp, #8
 800032c:	bd80      	pop	{r7, pc}

0800032e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	b086      	sub	sp, #24
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000336:	f3ef 8310 	mrs	r3, PRIMASK
 800033a:	60bb      	str	r3, [r7, #8]
  return(result);
 800033c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	2301      	movs	r3, #1
 8000342:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f383 8810 	msr	PRIMASK, r3
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2220      	movs	r2, #32
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	f383 8810 	msr	PRIMASK, r3
}
 8000362:	46c0      	nop			; (mov r8, r8)
}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b006      	add	sp, #24
 800036a:	bd80      	pop	{r7, pc}

0800036c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000378:	b29b      	uxth	r3, r3
 800037a:	b2db      	uxtb	r3, r3
}
 800037c:	0018      	movs	r0, r3
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}

08000384 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	000a      	movs	r2, r1
 800038e:	1cfb      	adds	r3, r7, #3
 8000390:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8000392:	1cfb      	adds	r3, r7, #3
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b29a      	uxth	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b002      	add	sp, #8
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	683a      	ldr	r2, [r7, #0]
 80003b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bd80      	pop	{r7, pc}

080003bc <BSL_Startup>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Startup()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	LED_Init();
 80003c0:	f000 f86a 	bl	8000498 <LED_Init>
	UART2_Init();
 80003c4:	f000 f81a 	bl	80003fc <UART2_Init>

	UART1_Init();
 80003c8:	f000 f804 	bl	80003d4 <UART1_Init>
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <UART1_Init>:

void UART1_Init()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	ubReceiveIndex1 = 0;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <UART1_Init+0x20>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
#ifdef STM32F0xx_HAL_UART_H
	HAL_UART_Receive_IT(&huart1, u_RXBuffer1, len_TX_BUF);
#else
	LL_USART_EnableHalfDuplex(USART1);
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <UART1_Init+0x24>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ff69 	bl	80002b8 <LL_USART_EnableHalfDuplex>
	LL_USART_EnableIT_RXNE(USART1);
 80003e6:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <UART1_Init+0x24>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ffa0 	bl	800032e <LL_USART_EnableIT_RXNE>
#endif
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000033 	.word	0x20000033
 80003f8:	40013800 	.word	0x40013800

080003fc <UART2_Init>:
void UART2_Init()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	ubReceiveIndex2 = 0;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <UART2_Init+0x20>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
#ifdef STM32F0xx_HAL_UART_H
	HAL_UART_Receive_IT(&huart3, u_RXBuffer2, len_TX_BUF);
#else
	LL_USART_EnableHalfDuplex(USART3);
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <UART2_Init+0x24>)
 8000408:	0018      	movs	r0, r3
 800040a:	f7ff ff55 	bl	80002b8 <LL_USART_EnableHalfDuplex>
		LL_USART_EnableIT_RXNE(USART3);
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <UART2_Init+0x24>)
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ff8c 	bl	800032e <LL_USART_EnableIT_RXNE>
#endif
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000034 	.word	0x20000034
 8000420:	40004800 	.word	0x40004800

08000424 <BSL_Config>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Config()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	LL_SYSTICK_EnableIT();
 8000428:	f7ff fefa 	bl	8000220 <LL_SYSTICK_EnableIT>
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <BSL_Control>:
 * @brief  TODO Auto-generated constructor stub
 * @param  (parm_1,parm_2,...)
 * @retval (parm_1,parm_2,-help,-debug)
 */
void BSL_Control()
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

	while(1)
	{
		if(ms500ms)
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <BSL_Control+0x50>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <BSL_Control+0x14>
		{
			ms500ms = false;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <BSL_Control+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]
		}

		u_TXBuffer1[5] = u_TXBuffer2[5]= i++;
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <BSL_Control+0x54>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	1c51      	adds	r1, r2, #1
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <BSL_Control+0x54>)
 8000450:	6019      	str	r1, [r3, #0]
 8000452:	b2d2      	uxtb	r2, r2
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <BSL_Control+0x58>)
 8000456:	715a      	strb	r2, [r3, #5]
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <BSL_Control+0x58>)
 800045a:	795a      	ldrb	r2, [r3, #5]
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <BSL_Control+0x5c>)
 800045e:	715a      	strb	r2, [r3, #5]
		UART1_TXHandle();
 8000460:	f000 f826 	bl	80004b0 <UART1_TXHandle>
		if(u_RXBuffer2[4] == '2' && u_RXBuffer2[3] == 'I')
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <BSL_Control+0x60>)
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	2b32      	cmp	r3, #50	; 0x32
 800046a:	d105      	bne.n	8000478 <BSL_Control+0x44>
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <BSL_Control+0x60>)
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	2b49      	cmp	r3, #73	; 0x49
 8000472:	d101      	bne.n	8000478 <BSL_Control+0x44>
		{
			UART2_TXHandle();
 8000474:	f000 f882 	bl	800057c <UART2_TXHandle>
		}
		LL_mDelay(500);
 8000478:	23fa      	movs	r3, #250	; 0xfa
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f8c5 	bl	800160c <LL_mDelay>
		if(ms500ms)
 8000482:	e7d9      	b.n	8000438 <BSL_Control+0x4>
 8000484:	20000032 	.word	0x20000032
 8000488:	20000038 	.word	0x20000038
 800048c:	20000008 	.word	0x20000008
 8000490:	20000000 	.word	0x20000000
 8000494:	20000048 	.word	0x20000048

08000498 <LED_Init>:
	}
}

void LED_Init()
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	LED1_OFF();
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <LED_Init+0x14>)
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff ff7f 	bl	80003a4 <LL_GPIO_ResetOutputPin>

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	48000800 	.word	0x48000800

080004b0 <UART1_TXHandle>:

void UART1_TXHandle()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
	ubReceiveIndex1 = 0;
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <UART1_TXHandle+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
	ubReceiveIndex2 = 0;
 80004bc:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <UART1_TXHandle+0x78>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
	memset(&u_RXBuffer2,0,sizeof(u_RXBuffer2));

	HAL_UART_Transmit(&huart1, u_TXBuffer1, len_TX_BUF, 10);
	while((READ_BIT(huart1.Instance->ISR, USART_ISR_TC) != (USART_ISR_TC)));
#else
	LL_USART_EnableDirectionTx(USART1);
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <UART1_TXHandle+0x7c>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f7ff fed8 	bl	800027a <LL_USART_EnableDirectionTx>
	LL_USART_EnableDirectionRx(USART3);
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <UART1_TXHandle+0x80>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff feb5 	bl	800023c <LL_USART_EnableDirectionRx>
	for(int i = 0; i<len_TX_BUF;i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	e012      	b.n	80004fe <UART1_TXHandle+0x4e>
	{
		LL_USART_TransmitData8(USART1, u_TXBuffer1[i]);
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <UART1_TXHandle+0x84>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	18d3      	adds	r3, r2, r3
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <UART1_TXHandle+0x7c>)
 80004e2:	0019      	movs	r1, r3
 80004e4:	0010      	movs	r0, r2
 80004e6:	f7ff ff4d 	bl	8000384 <LL_USART_TransmitData8>

		while(!LL_USART_IsActiveFlag_TC(USART1));
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <UART1_TXHandle+0x7c>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff ff01 	bl	80002f6 <LL_USART_IsActiveFlag_TC>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d0f9      	beq.n	80004ec <UART1_TXHandle+0x3c>
	for(int i = 0; i<len_TX_BUF;i++)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	2306      	movs	r3, #6
 8000500:	001a      	movs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4293      	cmp	r3, r2
 8000506:	dbe7      	blt.n	80004d8 <UART1_TXHandle+0x28>
	}
	if (LL_USART_IsActiveFlag_TC(USART1))
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <UART1_TXHandle+0x7c>)
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff fef3 	bl	80002f6 <LL_USART_IsActiveFlag_TC>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d003      	beq.n	800051c <UART1_TXHandle+0x6c>
	{
		LL_USART_ClearFlag_TC(USART1); /* Clear transfer complete flag */
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <UART1_TXHandle+0x7c>)
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff fefe 	bl	8000318 <LL_USART_ClearFlag_TC>
	}
#endif
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b002      	add	sp, #8
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000033 	.word	0x20000033
 8000528:	20000034 	.word	0x20000034
 800052c:	40013800 	.word	0x40013800
 8000530:	40004800 	.word	0x40004800
 8000534:	20000000 	.word	0x20000000

08000538 <UART1_Intrrpt_Handle>:
void UART1_Intrrpt_Handle()
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART1) )
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <UART1_Intrrpt_Handle+0x38>)
 800053e:	0018      	movs	r0, r3
 8000540:	f7ff fec8 	bl	80002d4 <LL_USART_IsActiveFlag_RXNE>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d00f      	beq.n	8000568 <UART1_Intrrpt_Handle+0x30>
	{
			u_RXBuffer1[ubReceiveIndex1++] = LL_USART_ReceiveData8(USART1);
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <UART1_Intrrpt_Handle+0x3c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	b2d1      	uxtb	r1, r2
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <UART1_Intrrpt_Handle+0x3c>)
 8000554:	7011      	strb	r1, [r2, #0]
 8000556:	001c      	movs	r4, r3
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <UART1_Intrrpt_Handle+0x38>)
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff ff06 	bl	800036c <LL_USART_ReceiveData8>
 8000560:	0003      	movs	r3, r0
 8000562:	001a      	movs	r2, r3
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <UART1_Intrrpt_Handle+0x40>)
 8000566:	551a      	strb	r2, [r3, r4]
	}
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bdb0      	pop	{r4, r5, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40013800 	.word	0x40013800
 8000574:	20000033 	.word	0x20000033
 8000578:	20000054 	.word	0x20000054

0800057c <UART2_TXHandle>:
void UART2_TXHandle()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	ubReceiveIndex2 = 0;
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <UART2_TXHandle+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
	ubReceiveIndex1 = 0;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <UART2_TXHandle+0x78>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
	memset(&u_RXBuffer1,0,sizeof(u_RXBuffer1));

	HAL_UART_Transmit(&huart3, u_TXBuffer2, len_TX_BUF, 10);
	while((READ_BIT(huart3.Instance->ISR, USART_ISR_TC) != (USART_ISR_TC)));
#else
	LL_USART_EnableDirectionTx(USART3);
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <UART2_TXHandle+0x7c>)
 8000590:	0018      	movs	r0, r3
 8000592:	f7ff fe72 	bl	800027a <LL_USART_EnableDirectionTx>
	LL_USART_EnableDirectionRx(USART1);
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <UART2_TXHandle+0x80>)
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff fe4f 	bl	800023c <LL_USART_EnableDirectionRx>
	for(int i = 0; i<len_TX_BUF;i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e012      	b.n	80005ca <UART2_TXHandle+0x4e>
	{
		LL_USART_TransmitData8(USART3, u_TXBuffer2[i]);
 80005a4:	4a16      	ldr	r2, [pc, #88]	; (8000600 <UART2_TXHandle+0x84>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	18d3      	adds	r3, r2, r3
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <UART2_TXHandle+0x7c>)
 80005ae:	0019      	movs	r1, r3
 80005b0:	0010      	movs	r0, r2
 80005b2:	f7ff fee7 	bl	8000384 <LL_USART_TransmitData8>

		 while(!LL_USART_IsActiveFlag_TC(USART3));
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <UART2_TXHandle+0x7c>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fe9b 	bl	80002f6 <LL_USART_IsActiveFlag_TC>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d0f9      	beq.n	80005b8 <UART2_TXHandle+0x3c>
	for(int i = 0; i<len_TX_BUF;i++)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	2306      	movs	r3, #6
 80005cc:	001a      	movs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4293      	cmp	r3, r2
 80005d2:	dbe7      	blt.n	80005a4 <UART2_TXHandle+0x28>
	}
	if (LL_USART_IsActiveFlag_TC(USART3))
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <UART2_TXHandle+0x7c>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff fe8d 	bl	80002f6 <LL_USART_IsActiveFlag_TC>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d003      	beq.n	80005e8 <UART2_TXHandle+0x6c>
	{
			LL_USART_ClearFlag_TC(USART3); /* Clear transfer complete flag */
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <UART2_TXHandle+0x7c>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff fe98 	bl	8000318 <LL_USART_ClearFlag_TC>
	}
#endif

}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000034 	.word	0x20000034
 80005f4:	20000033 	.word	0x20000033
 80005f8:	40004800 	.word	0x40004800
 80005fc:	40013800 	.word	0x40013800
 8000600:	20000008 	.word	0x20000008

08000604 <UART2_Intrrpt_Handle>:
void UART2_Intrrpt_Handle()
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART3) )
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <UART2_Intrrpt_Handle+0x38>)
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff fe62 	bl	80002d4 <LL_USART_IsActiveFlag_RXNE>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d00f      	beq.n	8000634 <UART2_Intrrpt_Handle+0x30>
	{
			u_RXBuffer2[ubReceiveIndex2++] = LL_USART_ReceiveData8(USART3);
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <UART2_Intrrpt_Handle+0x3c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	b2d1      	uxtb	r1, r2
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <UART2_Intrrpt_Handle+0x3c>)
 8000620:	7011      	strb	r1, [r2, #0]
 8000622:	001c      	movs	r4, r3
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <UART2_Intrrpt_Handle+0x38>)
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff fea0 	bl	800036c <LL_USART_ReceiveData8>
 800062c:	0003      	movs	r3, r0
 800062e:	001a      	movs	r2, r3
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <UART2_Intrrpt_Handle+0x40>)
 8000632:	551a      	strb	r2, [r3, r4]
	}
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bdb0      	pop	{r4, r5, r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40004800 	.word	0x40004800
 8000640:	20000034 	.word	0x20000034
 8000644:	20000048 	.word	0x20000048

08000648 <BSL_Tick>:
    LL_mDelay(Period);
  }
}

void BSL_Tick()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	static __IO uint32_t cntr_ms_50 = 0;
	static __IO uint32_t cntr_ms_500 = 0;
	static __IO uint32_t cntr_ms_3000 = 0;

	if(++cntr_ms_50 >49)
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <BSL_Tick+0x60>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <BSL_Tick+0x60>)
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	2b31      	cmp	r3, #49	; 0x31
 8000658:	d905      	bls.n	8000666 <BSL_Tick+0x1e>
	{
		ms50ms = true;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <BSL_Tick+0x64>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
		cntr_ms_50 = 0;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <BSL_Tick+0x60>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
	}
	if(++cntr_ms_500 >499)
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <BSL_Tick+0x68>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <BSL_Tick+0x68>)
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	22fa      	movs	r2, #250	; 0xfa
 8000672:	0052      	lsls	r2, r2, #1
 8000674:	4293      	cmp	r3, r2
 8000676:	d305      	bcc.n	8000684 <BSL_Tick+0x3c>
		{
			ms500ms = true;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <BSL_Tick+0x6c>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
			cntr_ms_500 = 0;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <BSL_Tick+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
		}
	if(++cntr_ms_3000 > 2999)
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <BSL_Tick+0x70>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <BSL_Tick+0x70>)
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <BSL_Tick+0x74>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d905      	bls.n	80006a0 <BSL_Tick+0x58>
	{
		ms3000ms = true;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <BSL_Tick+0x78>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
		cntr_ms_3000 = 0;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <BSL_Tick+0x70>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	}
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	2000003c 	.word	0x2000003c
 80006ac:	20000030 	.word	0x20000030
 80006b0:	20000040 	.word	0x20000040
 80006b4:	20000032 	.word	0x20000032
 80006b8:	20000044 	.word	0x20000044
 80006bc:	00000bb7 	.word	0x00000bb7
 80006c0:	20000031 	.word	0x20000031

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b7f      	cmp	r3, #127	; 0x7f
 80006d6:	d809      	bhi.n	80006ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	001a      	movs	r2, r3
 80006de:	231f      	movs	r3, #31
 80006e0:	401a      	ands	r2, r3
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <__NVIC_EnableIRQ+0x30>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	4091      	lsls	r1, r2
 80006e8:	000a      	movs	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
  }
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b002      	add	sp, #8
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b7f      	cmp	r3, #127	; 0x7f
 800070c:	d828      	bhi.n	8000760 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800070e:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <__NVIC_SetPriority+0xd4>)
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	33c0      	adds	r3, #192	; 0xc0
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	589b      	ldr	r3, [r3, r2]
 800071e:	1dfa      	adds	r2, r7, #7
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0011      	movs	r1, r2
 8000724:	2203      	movs	r2, #3
 8000726:	400a      	ands	r2, r1
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	21ff      	movs	r1, #255	; 0xff
 800072c:	4091      	lsls	r1, r2
 800072e:	000a      	movs	r2, r1
 8000730:	43d2      	mvns	r2, r2
 8000732:	401a      	ands	r2, r3
 8000734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	019b      	lsls	r3, r3, #6
 800073a:	22ff      	movs	r2, #255	; 0xff
 800073c:	401a      	ands	r2, r3
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	0018      	movs	r0, r3
 8000744:	2303      	movs	r3, #3
 8000746:	4003      	ands	r3, r0
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <__NVIC_SetPriority+0xd4>)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b25b      	sxtb	r3, r3
 8000754:	089b      	lsrs	r3, r3, #2
 8000756:	430a      	orrs	r2, r1
 8000758:	33c0      	adds	r3, #192	; 0xc0
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800075e:	e031      	b.n	80007c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <__NVIC_SetPriority+0xd8>)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	0019      	movs	r1, r3
 8000768:	230f      	movs	r3, #15
 800076a:	400b      	ands	r3, r1
 800076c:	3b08      	subs	r3, #8
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	3306      	adds	r3, #6
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	3304      	adds	r3, #4
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1dfa      	adds	r2, r7, #7
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	0011      	movs	r1, r2
 8000780:	2203      	movs	r2, #3
 8000782:	400a      	ands	r2, r1
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	21ff      	movs	r1, #255	; 0xff
 8000788:	4091      	lsls	r1, r2
 800078a:	000a      	movs	r2, r1
 800078c:	43d2      	mvns	r2, r2
 800078e:	401a      	ands	r2, r3
 8000790:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	22ff      	movs	r2, #255	; 0xff
 8000798:	401a      	ands	r2, r3
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0018      	movs	r0, r3
 80007a0:	2303      	movs	r3, #3
 80007a2:	4003      	ands	r3, r0
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <__NVIC_SetPriority+0xd8>)
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	001c      	movs	r4, r3
 80007b0:	230f      	movs	r3, #15
 80007b2:	4023      	ands	r3, r4
 80007b4:	3b08      	subs	r3, #8
 80007b6:	089b      	lsrs	r3, r3, #2
 80007b8:	430a      	orrs	r2, r1
 80007ba:	3306      	adds	r3, #6
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	18c3      	adds	r3, r0, r3
 80007c0:	3304      	adds	r3, #4
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b003      	add	sp, #12
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LL_RCC_HSI_Enable+0x18>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <LL_RCC_HSI_Enable+0x18>)
 80007de:	2101      	movs	r1, #1
 80007e0:	430a      	orrs	r2, r1
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <LL_RCC_HSI_IsReady+0x1c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2202      	movs	r2, #2
 80007fa:	4013      	ands	r3, r2
 80007fc:	3b02      	subs	r3, #2
 80007fe:	425a      	negs	r2, r3
 8000800:	4153      	adcs	r3, r2
 8000802:	b2db      	uxtb	r3, r3
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40021000 	.word	0x40021000

08000810 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	22f8      	movs	r2, #248	; 0xf8
 800081e:	4393      	bics	r3, r2
 8000820:	0019      	movs	r1, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	00da      	lsls	r2, r3, #3
 8000826:	4b03      	ldr	r3, [pc, #12]	; (8000834 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000828:	430a      	orrs	r2, r1
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <LL_RCC_SetSysClkSource+0x24>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2203      	movs	r2, #3
 8000846:	4393      	bics	r3, r2
 8000848:	0019      	movs	r1, r3
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <LL_RCC_SetSysClkSource+0x24>)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	430a      	orrs	r2, r1
 8000850:	605a      	str	r2, [r3, #4]
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40021000 	.word	0x40021000

08000860 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <LL_RCC_GetSysClkSource+0x14>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	220c      	movs	r2, #12
 800086a:	4013      	ands	r3, r2
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <LL_RCC_SetAHBPrescaler+0x24>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	22f0      	movs	r2, #240	; 0xf0
 8000886:	4393      	bics	r3, r2
 8000888:	0019      	movs	r1, r3
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <LL_RCC_SetAHBPrescaler+0x24>)
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	430a      	orrs	r2, r1
 8000890:	605a      	str	r2, [r3, #4]
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	0019      	movs	r1, r3
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	430a      	orrs	r2, r1
 80008b8:	605a      	str	r2, [r3, #4]
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000
 80008c8:	fffff8ff 	.word	0xfffff8ff

080008cc <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <LL_RCC_SetUSARTClockSource+0x30>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	0e12      	lsrs	r2, r2, #24
 80008dc:	2103      	movs	r1, #3
 80008de:	4091      	lsls	r1, r2
 80008e0:	000a      	movs	r2, r1
 80008e2:	43d2      	mvns	r2, r2
 80008e4:	401a      	ands	r2, r3
 80008e6:	0011      	movs	r1, r2
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	0a1a      	lsrs	r2, r3, #8
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <LL_RCC_SetUSARTClockSource+0x30>)
 80008f0:	430a      	orrs	r2, r1
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <LL_RCC_PLL_Enable+0x18>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <LL_RCC_PLL_Enable+0x18>)
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	0449      	lsls	r1, r1, #17
 800090e:	430a      	orrs	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000

0800091c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <LL_RCC_PLL_IsReady+0x24>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	049b      	lsls	r3, r3, #18
 8000928:	4013      	ands	r3, r2
 800092a:	22fe      	movs	r2, #254	; 0xfe
 800092c:	0612      	lsls	r2, r2, #24
 800092e:	4694      	mov	ip, r2
 8000930:	4463      	add	r3, ip
 8000932:	425a      	negs	r2, r3
 8000934:	4153      	adcs	r3, r2
 8000936:	b2db      	uxtb	r3, r3
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40021000 	.word	0x40021000

08000944 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000956:	4013      	ands	r3, r2
 8000958:	0019      	movs	r1, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	431a      	orrs	r2, r3
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000962:	430a      	orrs	r2, r1
 8000964:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	220f      	movs	r2, #15
 800096c:	4393      	bics	r3, r2
 800096e:	0019      	movs	r1, r3
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	430a      	orrs	r2, r1
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b004      	add	sp, #16
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000
 8000984:	ffc27fff 	.word	0xffc27fff

08000988 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000992:	6959      	ldr	r1, [r3, #20]
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	430a      	orrs	r2, r1
 800099a:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4013      	ands	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b004      	add	sp, #16
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <LL_APB1_GRP1_EnableClock+0x28>)
 80009be:	69d9      	ldr	r1, [r3, #28]
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <LL_APB1_GRP1_EnableClock+0x28>)
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <LL_APB1_GRP1_EnableClock+0x28>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4013      	ands	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b004      	add	sp, #16
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000

080009e0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <LL_APB1_GRP2_EnableClock+0x28>)
 80009ea:	6999      	ldr	r1, [r3, #24]
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <LL_APB1_GRP2_EnableClock+0x28>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <LL_APB1_GRP2_EnableClock+0x28>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4013      	ands	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b004      	add	sp, #16
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000

08000a0c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <LL_FLASH_SetLatency+0x24>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4393      	bics	r3, r2
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <LL_FLASH_SetLatency+0x24>)
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	430a      	orrs	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40022000 	.word	0x40022000

08000a34 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <LL_FLASH_GetLatency+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4013      	ands	r3, r2
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	40022000 	.word	0x40022000

08000a4c <LL_USART_Enable>:
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_USART_ConfigHalfDuplexMode>:
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LL_USART_ConfigHalfDuplexMode+0x38>)
 8000a76:	401a      	ands	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	2222      	movs	r2, #34	; 0x22
 8000a82:	4393      	bics	r3, r2
 8000a84:	001a      	movs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2208      	movs	r2, #8
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	609a      	str	r2, [r3, #8]
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	ffffb7ff 	.word	0xffffb7ff

08000aa4 <LL_GPIO_ResetOutputPin>:
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff ff8d 	bl	80009e0 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	055b      	lsls	r3, r3, #21
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff ff72 	bl	80009b4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f80e 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f000 f91e 	bl	8000d14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ad8:	f000 f850 	bl	8000b7c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000adc:	f000 f8b4 	bl	8000c48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BSL_Startup();
 8000ae0:	f7ff fc6c 	bl	80003bc <BSL_Startup>

  BSL_Config();
 8000ae4:	f7ff fc9e 	bl	8000424 <BSL_Config>

  BSL_Control();
 8000ae8:	f7ff fca4 	bl	8000434 <BSL_Control>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <main+0x30>
	...

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff89 	bl	8000a0c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	f7ff ff9a 	bl	8000a34 <LL_FLASH_GetLatency>
 8000b00:	0003      	movs	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d1fa      	bne.n	8000afc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000b06:	f7ff fe65 	bl	80007d4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	f7ff fe70 	bl	80007f0 <LL_RCC_HSI_IsReady>
 8000b10:	0003      	movs	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d1fa      	bne.n	8000b0c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000b16:	2010      	movs	r0, #16
 8000b18:	f7ff fe7a 	bl	8000810 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PREDIV_DIV_1);
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	0359      	lsls	r1, r3, #13
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	2200      	movs	r2, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff0c 	bl	8000944 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b2c:	f7ff fee8 	bl	8000900 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	f7ff fef3 	bl	800091c <LL_RCC_PLL_IsReady>
 8000b36:	0003      	movs	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d1fa      	bne.n	8000b32 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fe9b 	bl	8000878 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff feac 	bl	80008a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff fe75 	bl	8000838 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	f7ff fe86 	bl	8000860 <LL_RCC_GetSysClkSource>
 8000b54:	0003      	movs	r3, r0
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	d1fa      	bne.n	8000b50 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <SystemClock_Config+0x88>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fd45 	bl	80015ec <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SystemClock_Config+0x88>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fd73 	bl	8001650 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff feae 	bl	80008cc <LL_RCC_SetUSARTClockSource>
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	02dc6c00 	.word	0x02dc6c00

08000b7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b08f      	sub	sp, #60	; 0x3c
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b82:	241c      	movs	r4, #28
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	0018      	movs	r0, r3
 8000b88:	231c      	movs	r3, #28
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f000 fd91 	bl	80016b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	0018      	movs	r0, r3
 8000b96:	2318      	movs	r3, #24
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f000 fd8a 	bl	80016b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	01db      	lsls	r3, r3, #7
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff ff1b 	bl	80009e0 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	029b      	lsls	r3, r3, #10
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff feea 	bl	8000988 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	1d3a      	adds	r2, r7, #4
 8000bdc:	2390      	movs	r3, #144	; 0x90
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 f9d6 	bl	8000f94 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	201b      	movs	r0, #27
 8000bec:	f7ff fd84 	bl	80006f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000bf0:	201b      	movs	r0, #27
 8000bf2:	f7ff fd67 	bl	80006c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2296      	movs	r2, #150	; 0x96
 8000bfa:	0212      	lsls	r2, r2, #8
 8000bfc:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000bfe:	0021      	movs	r1, r4
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	220c      	movs	r2, #12
 8000c16:	611a      	str	r2, [r3, #16]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <MX_USART1_UART_Init+0xc8>)
 8000c22:	0019      	movs	r1, r3
 8000c24:	0010      	movs	r0, r2
 8000c26:	f000 fc45 	bl	80014b4 <LL_USART_Init>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART1_UART_Init+0xc8>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff1b 	bl	8000a68 <LL_USART_ConfigHalfDuplexMode>
  LL_USART_Enable(USART1);
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <MX_USART1_UART_Init+0xc8>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff09 	bl	8000a4c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b00f      	add	sp, #60	; 0x3c
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40013800 	.word	0x40013800

08000c48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b08f      	sub	sp, #60	; 0x3c
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c4e:	241c      	movs	r4, #28
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	0018      	movs	r0, r3
 8000c54:	231c      	movs	r3, #28
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f000 fd2b 	bl	80016b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	0018      	movs	r0, r3
 8000c62:	2318      	movs	r3, #24
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f000 fd24 	bl	80016b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	02db      	lsls	r3, r3, #11
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fe9f 	bl	80009b4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	031b      	lsls	r3, r3, #12
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fe84 	bl	8000988 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC4   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2210      	movs	r2, #16
 8000c84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2202      	movs	r2, #2
 8000c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2203      	movs	r2, #3
 8000c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2201      	movs	r2, #1
 8000c96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <MX_USART3_UART_Init+0xc4>)
 8000ca8:	0019      	movs	r1, r3
 8000caa:	0010      	movs	r0, r2
 8000cac:	f000 f972 	bl	8000f94 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_4_IRQn, 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	201d      	movs	r0, #29
 8000cb4:	f7ff fd20 	bl	80006f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_IRQn);
 8000cb8:	201d      	movs	r0, #29
 8000cba:	f7ff fd03 	bl	80006c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2296      	movs	r2, #150	; 0x96
 8000cc2:	0212      	lsls	r2, r2, #8
 8000cc4:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	220c      	movs	r2, #12
 8000cde:	611a      	str	r2, [r3, #16]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART3, &USART_InitStruct);
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <MX_USART3_UART_Init+0xc8>)
 8000cea:	0019      	movs	r1, r3
 8000cec:	0010      	movs	r0, r2
 8000cee:	f000 fbe1 	bl	80014b4 <LL_USART_Init>
  LL_USART_ConfigHalfDuplexMode(USART3);
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_USART3_UART_Init+0xc8>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff feb7 	bl	8000a68 <LL_USART_ConfigHalfDuplexMode>
  LL_USART_Enable(USART3);
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MX_USART3_UART_Init+0xc8>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff fea5 	bl	8000a4c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b00f      	add	sp, #60	; 0x3c
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	40004800 	.word	0x40004800

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2318      	movs	r3, #24
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f000 fcc6 	bl	80016b4 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	031b      	lsls	r3, r3, #12
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fe2b 	bl	8000988 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	029b      	lsls	r3, r3, #10
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fe26 	bl	8000988 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_C7_GPIO_Port, LED_C7_Pin);
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_GPIO_Init+0x64>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff feaf 	bl	8000aa4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_C7_Pin;
 8000d46:	003b      	movs	r3, r7
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4c:	003b      	movs	r3, r7
 8000d4e:	2201      	movs	r2, #1
 8000d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_C7_GPIO_Port, &GPIO_InitStruct);
 8000d64:	003b      	movs	r3, r7
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <MX_GPIO_Init+0x64>)
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	f000 f912 	bl	8000f94 <LL_GPIO_Init>

}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b006      	add	sp, #24
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	48000800 	.word	0x48000800

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSL_Tick();
 8000da0:	f7ff fc52 	bl	8000648 <BSL_Tick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
#ifdef STM32F0xx_HAL_UART_H

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
#else
	UART1_Intrrpt_Handle();
 8000dae:	f7ff fbc3 	bl	8000538 <UART1_Intrrpt_Handle>
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
#ifdef STM32F0xx_HAL_UART_H
  /* USER CODE END USART3_4_IRQn 0 */

  /* USER CODE BEGIN USART3_4_IRQn 1 */
#else
	UART2_Intrrpt_Handle();
 8000dbc:	f7ff fc22 	bl	8000604 <UART2_Intrrpt_Handle>
#endif
  /* USER CODE END USART3_4_IRQn 1 */
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dfa:	f7ff ffe4 	bl	8000dc6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dfe:	f000 fc35 	bl	800166c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e02:	f7ff fe5b 	bl	8000abc <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e14:	080016fc 	.word	0x080016fc
  ldr r2, =_sbss
 8000e18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e1c:	20000060 	.word	0x20000060

08000e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_COMP_IRQHandler>

08000e22 <LL_GPIO_SetPinMode>:
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	435b      	muls	r3, r3
 8000e36:	001a      	movs	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	189b      	adds	r3, r3, r2
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	400b      	ands	r3, r1
 8000e42:	001a      	movs	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	435b      	muls	r3, r3
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	434b      	muls	r3, r1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <LL_GPIO_SetPinOutputType>:
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	43d2      	mvns	r2, r2
 8000e6e:	401a      	ands	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	434b      	muls	r3, r1
 8000e76:	431a      	orrs	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	605a      	str	r2, [r3, #4]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <LL_GPIO_SetPinSpeed>:
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6899      	ldr	r1, [r3, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	435b      	muls	r3, r3
 8000e98:	001a      	movs	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	189b      	adds	r3, r3, r2
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	435b      	muls	r3, r3
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	434b      	muls	r3, r1
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	609a      	str	r2, [r3, #8]
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b004      	add	sp, #16
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <LL_GPIO_SetPinPull>:
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	68d9      	ldr	r1, [r3, #12]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	435b      	muls	r3, r3
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	189b      	adds	r3, r3, r2
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	400b      	ands	r3, r1
 8000edc:	001a      	movs	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	435b      	muls	r3, r3
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	434b      	muls	r3, r1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	60da      	str	r2, [r3, #12]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <LL_GPIO_SetAFPin_0_7>:
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a19      	ldr	r1, [r3, #32]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	435b      	muls	r3, r3
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4353      	muls	r3, r2
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	435a      	muls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	43db      	mvns	r3, r3
 8000f18:	400b      	ands	r3, r1
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	435b      	muls	r3, r3
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	434b      	muls	r3, r1
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	434b      	muls	r3, r1
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	434b      	muls	r3, r1
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	621a      	str	r2, [r3, #32]
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <LL_GPIO_SetAFPin_8_15>:
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	0a12      	lsrs	r2, r2, #8
 8000f52:	4353      	muls	r3, r2
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	0a12      	lsrs	r2, r2, #8
 8000f58:	4353      	muls	r3, r2
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	0a12      	lsrs	r2, r2, #8
 8000f5e:	435a      	muls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	43db      	mvns	r3, r3
 8000f68:	400b      	ands	r3, r1
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	0a09      	lsrs	r1, r1, #8
 8000f74:	434b      	muls	r3, r1
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	0a09      	lsrs	r1, r1, #8
 8000f7a:	434b      	muls	r3, r1
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	0a09      	lsrs	r1, r1, #8
 8000f80:	434b      	muls	r3, r1
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	434b      	muls	r3, r1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000fa2:	e048      	b.n	8001036 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d03a      	beq.n	8001030 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d003      	beq.n	8000fca <LL_GPIO_Init+0x36>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d10e      	bne.n	8000fe8 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff ff56 	bl	8000e84 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff39 	bl	8000e5a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff ff63 	bl	8000ebc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d111      	bne.n	8001022 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d807      	bhi.n	8001014 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	695a      	ldr	r2, [r3, #20]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ff71 	bl	8000ef4 <LL_GPIO_SetAFPin_0_7>
 8001012:	e006      	b.n	8001022 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff8c 	bl	8000f3a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff fef9 	bl	8000e22 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	40da      	lsrs	r2, r3
 800103e:	1e13      	subs	r3, r2, #0
 8001040:	d1b0      	bne.n	8000fa4 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001042:	2300      	movs	r3, #0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}

0800104c <LL_RCC_HSI_IsReady>:
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <LL_RCC_HSI_IsReady+0x1c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2202      	movs	r2, #2
 8001056:	4013      	ands	r3, r2
 8001058:	3b02      	subs	r3, #2
 800105a:	425a      	negs	r2, r3
 800105c:	4153      	adcs	r3, r2
 800105e:	b2db      	uxtb	r3, r3
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	40021000 	.word	0x40021000

0800106c <LL_RCC_LSE_IsReady>:
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <LL_RCC_LSE_IsReady+0x1c>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	2202      	movs	r2, #2
 8001076:	4013      	ands	r3, r2
 8001078:	3b02      	subs	r3, #2
 800107a:	425a      	negs	r2, r3
 800107c:	4153      	adcs	r3, r2
 800107e:	b2db      	uxtb	r3, r3
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	40021000 	.word	0x40021000

0800108c <LL_RCC_GetSysClkSource>:
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <LL_RCC_GetSysClkSource+0x14>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	220c      	movs	r2, #12
 8001096:	4013      	ands	r3, r2
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40021000 	.word	0x40021000

080010a4 <LL_RCC_GetAHBPrescaler>:
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <LL_RCC_GetAHBPrescaler+0x14>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	22f0      	movs	r2, #240	; 0xf0
 80010ae:	4013      	ands	r3, r2
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	40021000 	.word	0x40021000

080010bc <LL_RCC_GetAPB1Prescaler>:
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	23e0      	movs	r3, #224	; 0xe0
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4013      	ands	r3, r2
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000

080010d4 <LL_RCC_GetUSARTClockSource>:
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <LL_RCC_GetUSARTClockSource+0x24>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	2103      	movs	r1, #3
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	401a      	ands	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	061b      	lsls	r3, r3, #24
 80010ee:	4313      	orrs	r3, r2
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000

080010fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <LL_RCC_PLL_GetMainSource+0x14>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	23c0      	movs	r3, #192	; 0xc0
 8001106:	025b      	lsls	r3, r3, #9
 8001108:	4013      	ands	r3, r2
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000

08001114 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	23f0      	movs	r3, #240	; 0xf0
 800111e:	039b      	lsls	r3, r3, #14
 8001120:	4013      	ands	r3, r2
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000

0800112c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <LL_RCC_PLL_GetPrediv+0x14>)
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	220f      	movs	r2, #15
 8001136:	4013      	ands	r3, r2
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40021000 	.word	0x40021000

08001144 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800114c:	f000 f89c 	bl	8001288 <RCC_GetSystemClockFreq>
 8001150:	0002      	movs	r2, r0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f8c2 	bl	80012e4 <RCC_GetHCLKClockFreq>
 8001160:	0002      	movs	r2, r0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f8d0 	bl	8001310 <RCC_GetPCLK1ClockFreq>
 8001170:	0002      	movs	r2, r0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	609a      	str	r2, [r3, #8]
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d12d      	bne.n	80011ee <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ff9d 	bl	80010d4 <LL_RCC_GetUSARTClockSource>
 800119a:	0003      	movs	r3, r0
 800119c:	2b03      	cmp	r3, #3
 800119e:	d00a      	beq.n	80011b6 <LL_RCC_GetUSARTClockFreq+0x36>
 80011a0:	d818      	bhi.n	80011d4 <LL_RCC_GetUSARTClockFreq+0x54>
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d002      	beq.n	80011ac <LL_RCC_GetUSARTClockFreq+0x2c>
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d00c      	beq.n	80011c4 <LL_RCC_GetUSARTClockFreq+0x44>
 80011aa:	e013      	b.n	80011d4 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80011ac:	f000 f86c 	bl	8001288 <RCC_GetSystemClockFreq>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
        break;
 80011b4:	e020      	b.n	80011f8 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80011b6:	f7ff ff49 	bl	800104c <LL_RCC_HSI_IsReady>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d019      	beq.n	80011f2 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <LL_RCC_GetUSARTClockFreq+0xf8>)
 80011c0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011c2:	e016      	b.n	80011f2 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80011c4:	f7ff ff52 	bl	800106c <LL_RCC_LSE_IsReady>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d014      	beq.n	80011f6 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011d2:	e010      	b.n	80011f6 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80011d4:	f000 f858 	bl	8001288 <RCC_GetSystemClockFreq>
 80011d8:	0003      	movs	r3, r0
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 f882 	bl	80012e4 <RCC_GetHCLKClockFreq>
 80011e0:	0003      	movs	r3, r0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f894 	bl	8001310 <RCC_GetPCLK1ClockFreq>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
        break;
 80011ec:	e004      	b.n	80011f8 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	e002      	b.n	80011f8 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	e000      	b.n	80011f8 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80011f6:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d132      	bne.n	8001264 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ff67 	bl	80010d4 <LL_RCC_GetUSARTClockSource>
 8001206:	0003      	movs	r3, r0
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <LL_RCC_GetUSARTClockFreq+0xfc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00e      	beq.n	800122c <LL_RCC_GetUSARTClockFreq+0xac>
 800120e:	4a1b      	ldr	r2, [pc, #108]	; (800127c <LL_RCC_GetUSARTClockFreq+0xfc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d81a      	bhi.n	800124a <LL_RCC_GetUSARTClockFreq+0xca>
 8001214:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <LL_RCC_GetUSARTClockFreq+0x100>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d003      	beq.n	8001222 <LL_RCC_GetUSARTClockFreq+0xa2>
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <LL_RCC_GetUSARTClockFreq+0x104>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00c      	beq.n	800123a <LL_RCC_GetUSARTClockFreq+0xba>
 8001220:	e013      	b.n	800124a <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001222:	f000 f831 	bl	8001288 <RCC_GetSystemClockFreq>
 8001226:	0003      	movs	r3, r0
 8001228:	60fb      	str	r3, [r7, #12]
        break;
 800122a:	e020      	b.n	800126e <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800122c:	f7ff ff0e 	bl	800104c <LL_RCC_HSI_IsReady>
 8001230:	1e03      	subs	r3, r0, #0
 8001232:	d019      	beq.n	8001268 <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <LL_RCC_GetUSARTClockFreq+0xf8>)
 8001236:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001238:	e016      	b.n	8001268 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800123a:	f7ff ff17 	bl	800106c <LL_RCC_LSE_IsReady>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d014      	beq.n	800126c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001248:	e010      	b.n	800126c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800124a:	f000 f81d 	bl	8001288 <RCC_GetSystemClockFreq>
 800124e:	0003      	movs	r3, r0
 8001250:	0018      	movs	r0, r3
 8001252:	f000 f847 	bl	80012e4 <RCC_GetHCLKClockFreq>
 8001256:	0003      	movs	r3, r0
 8001258:	0018      	movs	r0, r3
 800125a:	f000 f859 	bl	8001310 <RCC_GetPCLK1ClockFreq>
 800125e:	0003      	movs	r3, r0
 8001260:	60fb      	str	r3, [r7, #12]
        break;
 8001262:	e004      	b.n	800126e <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	e002      	b.n	800126e <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	e000      	b.n	800126e <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 800126c:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}
 8001278:	007a1200 	.word	0x007a1200
 800127c:	10030000 	.word	0x10030000
 8001280:	10010000 	.word	0x10010000
 8001284:	10020000 	.word	0x10020000

08001288 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001292:	f7ff fefb 	bl	800108c <LL_RCC_GetSysClkSource>
 8001296:	0003      	movs	r3, r0
 8001298:	2b0c      	cmp	r3, #12
 800129a:	d013      	beq.n	80012c4 <RCC_GetSystemClockFreq+0x3c>
 800129c:	d815      	bhi.n	80012ca <RCC_GetSystemClockFreq+0x42>
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d00b      	beq.n	80012ba <RCC_GetSystemClockFreq+0x32>
 80012a2:	d812      	bhi.n	80012ca <RCC_GetSystemClockFreq+0x42>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <RCC_GetSystemClockFreq+0x26>
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d003      	beq.n	80012b4 <RCC_GetSystemClockFreq+0x2c>
 80012ac:	e00d      	b.n	80012ca <RCC_GetSystemClockFreq+0x42>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <RCC_GetSystemClockFreq+0x54>)
 80012b0:	607b      	str	r3, [r7, #4]
      break;
 80012b2:	e00d      	b.n	80012d0 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <RCC_GetSystemClockFreq+0x54>)
 80012b6:	607b      	str	r3, [r7, #4]
      break;
 80012b8:	e00a      	b.n	80012d0 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80012ba:	f000 f83d 	bl	8001338 <RCC_PLL_GetFreqDomain_SYS>
 80012be:	0003      	movs	r3, r0
 80012c0:	607b      	str	r3, [r7, #4]
      break;
 80012c2:	e005      	b.n	80012d0 <RCC_GetSystemClockFreq+0x48>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI48:/* HSI48 used as system clock  source */
      frequency = HSI48_VALUE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <RCC_GetSystemClockFreq+0x58>)
 80012c6:	607b      	str	r3, [r7, #4]
      break;
 80012c8:	e002      	b.n	80012d0 <RCC_GetSystemClockFreq+0x48>
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <RCC_GetSystemClockFreq+0x54>)
 80012cc:	607b      	str	r3, [r7, #4]
      break;
 80012ce:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	007a1200 	.word	0x007a1200
 80012e0:	02dc6c00 	.word	0x02dc6c00

080012e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80012ec:	f7ff feda 	bl	80010a4 <LL_RCC_GetAHBPrescaler>
 80012f0:	0003      	movs	r3, r0
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	220f      	movs	r2, #15
 80012f6:	4013      	ands	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <RCC_GetHCLKClockFreq+0x28>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	001a      	movs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	40d3      	lsrs	r3, r2
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	080016dc 	.word	0x080016dc

08001310 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001318:	f7ff fed0 	bl	80010bc <LL_RCC_GetAPB1Prescaler>
 800131c:	0003      	movs	r3, r0
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <RCC_GetPCLK1ClockFreq+0x24>)
 8001322:	5cd3      	ldrb	r3, [r2, r3]
 8001324:	001a      	movs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	40d3      	lsrs	r3, r2
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	080016ec 	.word	0x080016ec

08001338 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001346:	f7ff fed9 	bl	80010fc <LL_RCC_PLL_GetMainSource>
 800134a:	0003      	movs	r3, r0
 800134c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	23c0      	movs	r3, #192	; 0xc0
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	429a      	cmp	r2, r3
 8001356:	d012      	beq.n	800137e <RCC_PLL_GetFreqDomain_SYS+0x46>
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	23c0      	movs	r3, #192	; 0xc0
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	429a      	cmp	r2, r3
 8001360:	d813      	bhi.n	800138a <RCC_PLL_GetFreqDomain_SYS+0x52>
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	429a      	cmp	r2, r3
 800136a:	d005      	beq.n	8001378 <RCC_PLL_GetFreqDomain_SYS+0x40>
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	429a      	cmp	r2, r3
 8001374:	d006      	beq.n	8001384 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8001376:	e008      	b.n	800138a <RCC_PLL_GetFreqDomain_SYS+0x52>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800137a:	607b      	str	r3, [r7, #4]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800137c:	e008      	b.n	8001390 <RCC_PLL_GetFreqDomain_SYS+0x58>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <RCC_PLL_GetFreqDomain_SYS+0x8c>)
 8001380:	607b      	str	r3, [r7, #4]
      break;
 8001382:	e005      	b.n	8001390 <RCC_PLL_GetFreqDomain_SYS+0x58>
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8001386:	607b      	str	r3, [r7, #4]
      break;
 8001388:	e002      	b.n	8001390 <RCC_PLL_GetFreqDomain_SYS+0x58>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800138c:	607b      	str	r3, [r7, #4]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800138e:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8001390:	f7ff fecc 	bl	800112c <LL_RCC_PLL_GetPrediv>
 8001394:	0003      	movs	r3, r0
 8001396:	220f      	movs	r2, #15
 8001398:	4013      	ands	r3, r2
 800139a:	3301      	adds	r3, #1
 800139c:	0019      	movs	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7fe feb2 	bl	8000108 <__udivsi3>
 80013a4:	0003      	movs	r3, r0
 80013a6:	001c      	movs	r4, r3
 80013a8:	f7ff feb4 	bl	8001114 <LL_RCC_PLL_GetMultiplicator>
 80013ac:	0003      	movs	r3, r0
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	220f      	movs	r2, #15
 80013b2:	4013      	ands	r3, r2
 80013b4:	3302      	adds	r3, #2
 80013b6:	4363      	muls	r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b003      	add	sp, #12
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	007a1200 	.word	0x007a1200
 80013c4:	02dc6c00 	.word	0x02dc6c00

080013c8 <LL_USART_IsEnabled>:
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <LL_USART_IsEnabled+0x18>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <LL_USART_IsEnabled+0x1a>
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <LL_USART_SetStopBitsLength>:
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <LL_USART_SetStopBitsLength+0x24>)
 80013fc:	401a      	ands	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	605a      	str	r2, [r3, #4]
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	ffffcfff 	.word	0xffffcfff

08001414 <LL_USART_SetHWFlowCtrl>:
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <LL_USART_SetHWFlowCtrl+0x24>)
 8001424:	401a      	ands	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	609a      	str	r2, [r3, #8]
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	fffffcff 	.word	0xfffffcff

0800143c <LL_USART_SetBaudRate>:
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	429a      	cmp	r2, r3
 8001452:	d11c      	bne.n	800148e <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	005a      	lsls	r2, r3, #1
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7fe fe51 	bl	8000108 <__udivsi3>
 8001466:	0003      	movs	r3, r0
 8001468:	b29b      	uxth	r3, r3
 800146a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <LL_USART_SetBaudRate+0x74>)
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	b29b      	uxth	r3, r3
 800147a:	001a      	movs	r2, r3
 800147c:	2307      	movs	r3, #7
 800147e:	4013      	ands	r3, r2
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	60da      	str	r2, [r3, #12]
}
 800148c:	e00c      	b.n	80014a8 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	085a      	lsrs	r2, r3, #1
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	18d3      	adds	r3, r2, r3
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	0018      	movs	r0, r3
 800149a:	f7fe fe35 	bl	8000108 <__udivsi3>
 800149e:	0003      	movs	r3, r0
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	001a      	movs	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	60da      	str	r2, [r3, #12]
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b006      	add	sp, #24
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0000fff0 	.word	0x0000fff0

080014b4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80014be:	231f      	movs	r3, #31
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff7b 	bl	80013c8 <LL_USART_IsEnabled>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d15f      	bne.n	8001596 <LL_USART_Init+0xe2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <LL_USART_Init+0xf0>)
 80014dc:	401a      	ands	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	6859      	ldr	r1, [r3, #4]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4319      	orrs	r1, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4319      	orrs	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	430b      	orrs	r3, r1
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff72 	bl	80013ec <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff7f 	bl	8001414 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <LL_USART_Init+0xf4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d105      	bne.n	800152a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fe2e 	bl	8001180 <LL_RCC_GetUSARTClockFreq>
 8001524:	0003      	movs	r3, r0
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	e022      	b.n	8001570 <LL_USART_Init+0xbc>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <LL_USART_Init+0xf8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d105      	bne.n	800153e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001532:	2010      	movs	r0, #16
 8001534:	f7ff fe24 	bl	8001180 <LL_RCC_GetUSARTClockFreq>
 8001538:	0003      	movs	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	e018      	b.n	8001570 <LL_USART_Init+0xbc>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#endif /* USART2 */
#if defined(USART3)
    else if (USARTx == USART3)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <LL_USART_Init+0xfc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d108      	bne.n	8001558 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001546:	240c      	movs	r4, #12
 8001548:	193b      	adds	r3, r7, r4
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff fdfa 	bl	8001144 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001550:	193b      	adds	r3, r7, r4
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	e00b      	b.n	8001570 <LL_USART_Init+0xbc>
#endif
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <LL_USART_Init+0x100>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d107      	bne.n	8001570 <LL_USART_Init+0xbc>
    {
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001560:	240c      	movs	r4, #12
 8001562:	193b      	adds	r3, r7, r4
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fded 	bl	8001144 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800156a:	193b      	adds	r3, r7, r4
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00f      	beq.n	8001596 <LL_USART_Init+0xe2>
        && (USART_InitStruct->BaudRate != 0U))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <LL_USART_Init+0xe2>
    {
      status = SUCCESS;
 800157e:	231f      	movs	r3, #31
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	699a      	ldr	r2, [r3, #24]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff53 	bl	800143c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001596:	231f      	movs	r3, #31
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	781b      	ldrb	r3, [r3, #0]
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b009      	add	sp, #36	; 0x24
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	efff69f3 	.word	0xefff69f3
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40004800 	.word	0x40004800
 80015b4:	40004c00 	.word	0x40004c00

080015b8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7fe fd9f 	bl	8000108 <__udivsi3>
 80015ca:	0003      	movs	r3, r0
 80015cc:	001a      	movs	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <LL_InitTick+0x30>)
 80015d0:	3a01      	subs	r2, #1
 80015d2:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <LL_InitTick+0x30>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <LL_InitTick+0x30>)
 80015dc:	2205      	movs	r2, #5
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	e000e010 	.word	0xe000e010

080015ec <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80015f4:	23fa      	movs	r3, #250	; 0xfa
 80015f6:	009a      	lsls	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	0011      	movs	r1, r2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ffdb 	bl	80015b8 <LL_InitTick>
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <LL_mDelay+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800161a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	d00c      	beq.n	800163c <LL_mDelay+0x30>
  {
    Delay++;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001628:	e008      	b.n	800163c <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <LL_mDelay+0x40>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	4013      	ands	r3, r2
 8001634:	d002      	beq.n	800163c <LL_mDelay+0x30>
    {
      Delay--;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3b01      	subs	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
  while (Delay)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f3      	bne.n	800162a <LL_mDelay+0x1e>
    }
  }
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bd80      	pop	{r7, pc}
 800164c:	e000e010 	.word	0xe000e010

08001650 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <LL_SetSystemCoreClock+0x18>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	20000010 	.word	0x20000010

0800166c <__libc_init_array>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	2600      	movs	r6, #0
 8001670:	4d0c      	ldr	r5, [pc, #48]	; (80016a4 <__libc_init_array+0x38>)
 8001672:	4c0d      	ldr	r4, [pc, #52]	; (80016a8 <__libc_init_array+0x3c>)
 8001674:	1b64      	subs	r4, r4, r5
 8001676:	10a4      	asrs	r4, r4, #2
 8001678:	42a6      	cmp	r6, r4
 800167a:	d109      	bne.n	8001690 <__libc_init_array+0x24>
 800167c:	2600      	movs	r6, #0
 800167e:	f000 f821 	bl	80016c4 <_init>
 8001682:	4d0a      	ldr	r5, [pc, #40]	; (80016ac <__libc_init_array+0x40>)
 8001684:	4c0a      	ldr	r4, [pc, #40]	; (80016b0 <__libc_init_array+0x44>)
 8001686:	1b64      	subs	r4, r4, r5
 8001688:	10a4      	asrs	r4, r4, #2
 800168a:	42a6      	cmp	r6, r4
 800168c:	d105      	bne.n	800169a <__libc_init_array+0x2e>
 800168e:	bd70      	pop	{r4, r5, r6, pc}
 8001690:	00b3      	lsls	r3, r6, #2
 8001692:	58eb      	ldr	r3, [r5, r3]
 8001694:	4798      	blx	r3
 8001696:	3601      	adds	r6, #1
 8001698:	e7ee      	b.n	8001678 <__libc_init_array+0xc>
 800169a:	00b3      	lsls	r3, r6, #2
 800169c:	58eb      	ldr	r3, [r5, r3]
 800169e:	4798      	blx	r3
 80016a0:	3601      	adds	r6, #1
 80016a2:	e7f2      	b.n	800168a <__libc_init_array+0x1e>
 80016a4:	080016f4 	.word	0x080016f4
 80016a8:	080016f4 	.word	0x080016f4
 80016ac:	080016f4 	.word	0x080016f4
 80016b0:	080016f8 	.word	0x080016f8

080016b4 <memset>:
 80016b4:	0003      	movs	r3, r0
 80016b6:	1882      	adds	r2, r0, r2
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d100      	bne.n	80016be <memset+0xa>
 80016bc:	4770      	bx	lr
 80016be:	7019      	strb	r1, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e7f9      	b.n	80016b8 <memset+0x4>

080016c4 <_init>:
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ca:	bc08      	pop	{r3}
 80016cc:	469e      	mov	lr, r3
 80016ce:	4770      	bx	lr

080016d0 <_fini>:
 80016d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016d6:	bc08      	pop	{r3}
 80016d8:	469e      	mov	lr, r3
 80016da:	4770      	bx	lr
